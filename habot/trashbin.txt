bg-gray-800
 

          fontSize:"30px !important",
 

          fontSize:"h1",
 

          fontSize:"30px !important",
 

          fontWeight: '400',
 
fontSize: '25px !important',
 
 // Add !important to make sure it overrides
 
style={{
          color: '#6D6E71',
          lineHeight: '24px',
          fontSize: '10px',
          fontWeight: '400',
          gap: '30px',
        }}
 
// Ensure this is correct
 
// Ensure this is correct
 
 <h1 className="lg:text-[37px] md:text-[37px] text-[30px] font-[600] leading-[40px] text-center md:text-left text-black lg:ml-[80px]">
          Let Suppliers
          <span className="relative inline-block ml-2">
            Find You
            <div className="w-full h-1 mt-2 bg-[#EB7150] absolute bottom-[-10px] left-0"></div>
          </span>
        </h1>
 
bg-red-500
 
g-purple-500
 
bg-gray-600
 
g-red-500
 
bg-gray-600
 
justify-center
 
 <h1 className="font-[600] text-[37px] w-[500px] leading-[40px] ml-[100px]">
          Let Suppliers Find You
        </h1>
 
justify-center
 

        <button> hello</button>
 

        <h1 className="w-[563px] h-[40px] font-[600] text-[37px]">
        Let Suppliers Find You
        </h1>
 
hello world
 

    <div className="w-full md:h-[100px] h-auto flex lg:flex-row flex-col justify-between items-center bg-[#E8FBFF] md:pl-[100px] md:pr-[140px] px-4 py-4 mt-20 mb-20 lg:gap-0 md:gap-0 gap-2">
      <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] leading-[40px] text-center md:text-left text-black">
        Let Suppliers
        <span className="relative inline-block ml-2">
          Find You
          <div className="w-full h-1 mt-2 bg-[#EB7150] absolute bottom-[-10px] left-0"></div>
        </span>
      </h1>

      <button className="md:w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] md:mt-4 text-[18px] font-[700] text-center leading-[24px] text-white w-[180px]">
        Get Verified
      </button>
    </div>
 
<div className="w-full md:h-[100px] h-auto flex lg:flex-row flex-col justify-between items-center bg-[#E8FBFF] md:pl-[100px] md:pr-[140px] px-4 py-4 mt-20 mb-20 lg:gap-0 md:gap-0 gap-2">
      <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] leading-[40px] text-center md:text-left text-black">
        Let Suppliers
        <span className="relative inline-block ml-2">
          Find You
          <div className="w-full h-1 mt-2 bg-[#EB7150] absolute bottom-[-10px] left-0"></div>
        </span>
      </h1>

      <button className="md:w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] md:mt-4 text-[18px] font-[700] text-center leading-[24px] text-white w-[180px]">
        Get Verified
      </button>
 
px-4 py-4
 
<div className="w-full md:h-[200px] h-auto flex lg:flex-row flex-col justify-between items-center bg-[#E8FBFF] md:pl-[100px] md:pr-[140px] px-4 py-4 mt-20 mb-20 lg:gap-0 md:gap-0 gap-2">
      <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] leading-[40px] text-center md:text-left text-black">
        Let Suppliers
        <span className="relative inline-block ml-2">
          Find You
          <div className="w-full h-1 mt-2 bg-[#EB7150] absolute bottom-[-10px] left-0"></div>
        </span>
      </h1>

      <button className="md:w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] md:mt-4 text-[18px] font-[700] text-center leading-[24px] text-white w-[180px]">
        Get Verified
      </button>
    </div>
 
    <div className="w-full md:h-[200px] h-auto flex lg:flex-row flex-col justify-between items-center bg-[#E8FBFF] md:pl-[100px] md:pr-[140px] px-4 py-4 mt-20 mb-20 lg:gap-0 md:gap-0 gap-2">
      <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] leading-[40px] text-center md:text-left text-black">
        Let Suppliers
        <span className="relative inline-block ml-2">
          Find You
          <div className="w-full h-1 mt-2 bg-[#EB7150] absolute bottom-[-10px] left-0"></div>
        </span>
      </h1>

      <button className="md:w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] md:mt-4 text-[18px] font-[700] text-center leading-[24px] text-white w-[180px]">
        Get Verified
      </button>
    </div>
 
    <div className="w-full md:h-[200px] h-auto flex lg:flex-row flex-col justify-between items-center bg-[#E8FBFF] md:pl-[100px] md:pr-[140px] px-4 py-4 mt-20 mb-20 lg:gap-0 md:gap-0 gap-2">
      <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] leading-[40px] text-center md:text-left text-black">
        Let Suppliers
        <span className="relative inline-block ml-2">
          Find You
          <div className="w-full h-1 mt-2 bg-[#EB7150] absolute bottom-[-10px] left-0"></div>
        </span>
      </h1>

      <button className="md:w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] md:mt-4 text-[18px] font-[700] text-center leading-[24px] text-white w-[180px]">
        Get Verified
      </button>
    </div>
 
lg:py-0
 
 <div className="w-full md:h-[200px] h-auto flex lg:flex-row md:flex-col justify-between items-center bg-[#E8FBFF] md:pl-[100px] md:pr-[140px] px-4 py-4 mt-20 mb-20 flex-col">
      <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] md:font-[600] leading-[40px] text-center md:text-left text-black lg:py-0 py-6">
        Let Suppliers
        <span className="relative inline-block ml-2">
          Find You
          <div className="w-[100%] h-1 mt-2 bg-[#EB7150] absolute bottom-[-10px] left-0"></div>
        </span>
      </h1>

      <button className="md:w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] md:mt-4 text-[18px] md:font-[700] text-center leading-[24px] font-[700]  text-white lg:mb-0 md:mb-0 mb-2 w-[180px]">
        Get Verified
      </button>
    </div>
 
 <div className="w-full md:h-[200px] h-auto flex lg:flex-row md:flex-col justify-between items-center bg-[#E8FBFF] md:pl-[100px] md:pr-[140px] px-4 py-4 mt-20 mb-20 flex-col">
      <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] md:font-[600] leading-[40px] text-center md:text-left text-black lg:py-0 py-6">
        Let Suppliers
        <span className="relative inline-block ml-2">
          Find You
          <div className="w-[100%] h-1 mt-2 bg-[#EB7150] absolute bottom-[-10px] left-0"></div>
        </span>
      </h1>

      <button className="md:w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] md:mt-0 text-[18px] md:font-[700] text-center leading-[24px] font-[700]  text-white lg:mb-0 md:mb-0 mb-2 w-[180px]">
        Get Verified
      </button>
    </div>
 
 <div className="w-full md:h-[200px] h-auto flex lg:flex-row md:flex-col justify-between items-center bg-[#E8FBFF] md:pl-[100px] md:pr-[140px] px-4 py-4 mt-20 mb-20 flex-col">
      <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] md:font-[600] leading-[40px] text-center md:text-left text-black lg:py-0 py-6">
        Let Suppliers
        <span className="relative inline-block ml-2">
          Find You
          <div className="w-[100%] h-1 mt-2 bg-[#EB7150] absolute bottom-[-10px] left-0"></div>
        </span>
      </h1>

      <button className="md:w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] md:mt-0 text-[18px] md:font-[700] text-center leading-[24px] font-[700]  text-white lg:mb-0 md:mb-0 mb-2 w-[180px]">
        Get Verified
      </button>
    </div>
 
bg-blue-600
 

      {/* <div className="w-full grid lg:grid-cols-2 ">
        <div className="w-auto h-full flex flex-col gap-6 lg:items-start px-6 md:px-[60px] py-6 md:py-[60px] md:items-center items-center">
          <h1 className="text-2xl sm:text-3xl lg:text-4xl font-[700] leading-tight text-black">
            Ready to dive into <span className="text-[#271555]">HABOT?</span>
          </h1>
          <p className="text-[20px] lg:text-lg font-light text-[#000000] text-justify w-full sm:w-[500px] md:w-[540px]">
            Signing up with HABOT opens the door to a world of new opportunities
            and potential for business growth. Gain access to a vibrant
            community of like-minded individuals, unlock valuable resources, and
            take the first step towards realizing your entrepreneurial dreams.
          </p>
          <button className="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center">
            Sign up Today!
          </button>
        </div>

        <div className="lg:w-auto h-full flex flex-wrap gap-4 px-4 md:px-[76px] py-4 md:py-[20px] lg:py-[80px] justify-center">
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Abu Dhabi
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Sharjah & Ajman
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Dubai
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Fujairah
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Ras Al Khaimah
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Umm Al Quwain
          </button>
        </div>
      </div> */}
 
Example
 
bg-purple-500
 
bg-blue-500
 
bg-red-300
 
bg-green-500
 
bg-orange-400
 
<div
                  className={`lg:w-[100%] md:w-[100%]  sm:w-[40%] w-[40%] mt-[10px] h-[0.5px] border-b-4 ${selected === 'Supplier' ? 'border-[#EB7150]' : 'border-transparent'}`}
                ></div>
 
Buyer
 
Buyer
 
Buyer
 
<button
                className={`font-[700] text-[26px] leading-[32px] ${selected === 'Supplier' ? 'text-[#EB7150]' : 'text-white'} lg:w-[45%] md:w-[20%] w-full lg:text-center flex flex-col items-center`}
                onClick={() => setSelected('Supplier')}
              >
                <span>Supplier</span>
                <div
                  className={`lg:w-[100%] md:w-[100%]  sm:w-[40%] w-[40%] mt-[10px] h-[0.5px] border-b-4 ${selected === 'Supplier' ? 'border-[#EB7150]' : 'border-transparent'}`}
                ></div>
              </button>
 
items-center
 
md:px-8
 
<div
                  className={`lg:w-[90%] md:w-[50%] sm:w-[50%] w-[50%] mt-[10px] h-[0.5px] border-b-4 ${selected === 'Supplier' ? 'border-[#EB7150]' : 'border-transparent'}`}
                ></div>
 
<div
                  className={`lg:w-[90%] md:w-[50%] sm:w-[50%] w-[50%] mt-[10px] h-[0.5px] border-b-4 ${selected === 'Supplier' ? 'border-[#EB7150]' : 'border-transparent'}`}
                ></div>
 
<div
                  className={`lg:w-[90%] md:w-[50%] sm:w-[50%] w-[50%] mt-[10px] h-[0.5px] border-b-4 ${selected === 'Supplier' ? 'border-[#EB7150]' : 'border-transparent'}`}
                ></div>
 
justify-center
 
reviews
 
rating and reviews.
 
lassName="overflow-x-hidden"
 
className="overflow-x-hidden"
 
html, body {
    overflow-x: hidden;
    margin: 0;
    height: 100%; /* Ensure the body has full height */
  }
  
 
<Navbar>
 
/* styles.css ya Tailwind custom file mein */
html, body {
    overflow-x: hidden;
    margin: 0; /* margin ko reset karen */
  }
  
 
 <div className="overflow-x-hidden">
      <Navbar></Navbar>
      <Hero></Hero>
      <Dashboard></Dashboard>
      <YtDashboard videoId={videoId}></YtDashboard>
      <GetVefified></GetVefified>
      <BuyersPost></BuyersPost>
      <Footer></Footer>
    </div>
 
overflow-x-hidden
 
 <div className="w-full md:h-[200px] h-auto flex lg:flex-row md:flex-col justify-between items-center bg-[#E8FBFF] md:pl-[100px] md:pr-[140px] px-4 py-4 mt-20 mb-20 flex-col">
      <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] md:font-[600] leading-[40px] text-center md:text-left text-black lg:py-0 py-6">
        Let Suppliers
        <span className="relative inline-block ml-2">
          Find You
          <div className="w-[100%] h-1 mt-2 bg-[#EB7150] absolute bottom-[-10px] left-0"></div>
        </span>
      </h1>

      <button className="md:w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] md:mt-4 text-[18px] md:font-[700] text-center leading-[24px] font-[700]  text-white lg:mb-0 md:mb-0 mb-2 w-[180px]">
        Get Verified
      </button>
    </div>
 
 <!-- Added ml-2 to add space -->
 
 <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] md:font-[600] leading-[40px] text-center md:text-left text-black lg:py-0 py-6">
        Let Suppliers
        <span className="relative inline-block">
          Find You
          <div className="w-[100%] h-1 mt-2 bg-[#EB7150] absolute bottom-[-5px] left-0"></div>
        </span>
      </h1>
 
<h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] md:font-[600] leading-[40px] text-center md:text-left text-black lg:py-0 py-6">
  Let Suppliers <span className="relative inline-block">Find You
    <div className="w-[100%] h-1 mt-3 bg-[#EB7150] absolute bottom-0 left-0"></div>
  </span>
</h1>
 
<h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] md:font-[600] leading-[40px] text-center md:text-left text-black lg:py-0 py-6">
  Let Suppliers <span className="relative inline-block">Find You
    <div className="w-[100%] h-1 mt-3 bg-[#EB7150] absolute bottom-0 left-0"></div>
  </span>
</h1>
 
  <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] md:font-[600] leading-[40px] text-center md:text-left text-black lg:py-0 py-6">
    Let Suppliers <font>Find You</font>
    <div className="w-[50%] h-1 mt-2 bg-[#EB7150]"></div>
  </h1>
 
 <h1 className="lg:text-[37px] md:text-[37px] text-[35px] font-[600] md:font-[600] leading-[40px] text-center md:text-left text-black lg:py-0 py-6">
        Let Suppliers <font>Find You</font>
      </h1>
 
<span className="flex-grow text-center leading-[24px] ">
 
class
 
 <button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center flex items-center justify-center relative">
            Sign up Today !
            <img
              src={arrow}
              alt="Arrow"
              class="w-8 h-4 ml-6 absolute right-3"
            />
          </button>
 
 <button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center flex items-center justify-center relative">
            Sign up Today !
            <img
              src={arrow}
              alt="Arrow"
              class="w-8 h-4 ml-6 absolute right-3"
            />
          </button>
 
</span>
 
<span className="text-center items-center justify-center">
 
  <button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center flex items-center justify-center relative">
            <span className="text-center items-center justify-center">Sign up Today !</span>
            <img
              src={arrow}
              alt="Arrow"
              class="w-8 h-4 ml-6 absolute right-3"
            />
          </button>
 
 <button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center flex items-center justify-center relative">
            <span class="text-center">Sign up Today!</span>
            <img
              src={arrow}
              alt="Arrow"
              class="w-8 h-4 ml-6 absolute right-3"
            />
          </button>
 
 <button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center flex items-center justify-center relative">
            <span class="text-center">Sign up Today!</span>
            <img
              src={arrow}
              alt="Arrow"
              class="w-8 h-4 ml-6 absolute right-3"
            />
          </button>
 
 items-center justify-center
 
 <button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center lg:px-0 lg:py-0 flex justify-center items-center space-x-2">
            <span className="absolute">Sign up Today!</span>
            <img src={arrow} alt="Arrow" class="w-10 h-4 ml-8 " />
          </button>
 
  <button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center lg:px-0 lg:py-0 flex justify-center items-center space-x-2">
            <span>Sign up Today!</span>
            <img src={arrow} alt="Arrow" class="w-10 h-4 ml-6" />
          </button>
 
"../Asessts/Vector.png"
 
<button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center lg:px-0 lg:py-0">
            Sign up Today ! 
          </button>
 
<div>
      <Navbar></Navbar>
      <Hero></Hero>
      <Dashboard></Dashboard>
      <YtDashboard videoId={videoId}></YtDashboard>
      <GetVefified></GetVefified>
      <BuyersPost></BuyersPost>

      {/* <Footer></Footer> */}
    </div>
 
<div>
      <Navbar></Navbar>
      <Hero></Hero>
      <Dashboard></Dashboard>
      <YtDashboard videoId={videoId}></YtDashboard>
      <GetVefified></GetVefified>
      <BuyersPost></BuyersPost>

      {/* <Footer></Footer> */}
    </div>
 
*{
    overflow-x: hidden;
}
 
350
 
224
 
Select Your Role and Sign Up
 
Select Your Role and Sign Up
 
Select Your Role and Sign Up
 
Select Your Role and Sign Up
 
bg-orange-400 
 
justify-between
 
md:pr-[140px]
 
md:mt-0
 
g-gray-600
 
bg-green-400
 
bg-gray-600
 
g-purple-500
 
bg-yellow-300
 
bg-orange-400
 
bg-red-500
 
bg-green-400
 
bg-yellow-300
 
bg-red-500
 
bg-orange-400
 

                      <span className="inline-block">business.</span>
 
rating and reviews.
 
Choose among the suppliers based on the
 
  <div className="flex items-center mb-3 w-full leading-[39px]">
                    <img
                      src={check}
                      className="text-green-500 text-xl mr-2 flex-shrink-0"
                      alt="check"
                    />
                    <div className="text-white text-[18px] font-[500]">
                      
                    </div>
                  </div>
 
Sit back for multiple suppliers to contact you.
 

                  </div>
 
 <div className="flex items-center mb-3 w-full leading-[39px]">
                    <img
                      src={check}
                      className="text-green-500 text-xl mr-2 flex-shrink-0"
                      alt="check"
                    />
                    <div className="text-white text-[18px] font-[500]">
                      
                    </div>
 
Post your requirements.
 
<div className="flex items-center mb-3 w-full leading-[39px]">
                    <img
                      src={check}
                      className="text-green-500 text-xl mr-2 flex-shrink-0"
                      alt="check"
                    />
                    <div className="text-white text-[18px] font-[500]">
                      
                    </div>
                  </div>
 
Reach out to buyers and expand your business.
 
Select service tags for relevant opportunities.
 
Complete your profile and get verified.
 
 <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
                    <img
                      src={check}
                      className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                      alt="check"
                    />
                    <div className="flex-1 text-white text-[18.75px] font-[500]">
                      Post your requirements.
                    </div>
                  </div>
                  <div className="flex items-start mb-3 w-full md:w-[100%] xl:w-full">
                    <img
                      src={check}
                      className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                      alt="check"
                    />
                    <div className="flex-1 text-white text-[18px] font-[500]">
                      Sit back for multiple suppliers to contact you.
                    </div>
                  </div>
                  <div className="flex items-start mb-3 w-full">
                    <img
                      src={check}
                      className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                      alt="check"
                    />
                    <div className="flex-1 text-white text-[18px] font-[500] leading-[30px]">
                      Choose among the suppliers based on the{' '}
                      <span className="inline-block">rating and reviews.</span>
                    </div>
                  </div>
 
Reach out to buyers and expand your business.
 
Reach out to buyers and expand your business.
 
 <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
                    <img
                      src={check}
                      className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                      alt="check"
                    />
                    <div className="flex-1 text-white text-[18.75px] font-[500]">
                      Complete your profile and get verified.
                    </div>
                  </div>
 
 <div className="flex items-start mb-3 w-full md:w-[100%] xl:w-full">
                    <img
                      src={check}
                      className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                      alt="check"
                    />
                    <div className="flex-1 text-white text-[18px] font-[500]">
                      Select services tags for relevant opportunities.
                    </div>
                  </div>
 
 <div className="flex items-start mb-3 w-full leading-[39px]">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0 "
                alt="check"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Reach out to buyers and expand your business.
              </div>
            </div>
 

                <span className="inline-block"></span>
 
rating and reviews
 
Choose among the suppliers based on the{' '}
 
Sit back for multiple suppliers to contact you.
 
Post your requirements.
 
<div className="flex items-start mb-3 md:w-[80%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Complete your profile and get verified.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full md:w-[100%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Select service tags for relevant opportunities.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Reach out to buyers and expand your business.
              </div>
            </div>
 
 <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18.75px] font-[500]">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full md:w-[100%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18px] font-[500] leading-[30px]">
                Choose among the suppliers based on the{' '}
                <span className="inline-block">rating and reviews.</span>
              </div>
            </div>
 
 <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18.75px] font-[500]">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full md:w-[100%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18px] font-[500] leading-[30px]">
                Choose among the suppliers based on the{' '}
                <span className="inline-block">rating and reviews.</span>
              </div>
            </div>
 
<div className="flex items-start mb-3 w-full md:w-[100%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                alt="check"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Choose among the suppliers based on the{' '}
                <span className="inline-block">rating and reviews.</span>
              </div>
            </div>
 
 <div className="flex w-full lg:w-[90%] h-auto lg:h-[310px] lg:flex-col flex-wrap lg:ml-2 lg:gap-3 gap-6 mb-4">
            {/* top section */}
            <div className="w-[70%] bg-green-400 mx-auto lg:w-[100%] lg:h-[47px] h-auto flex lg:justify-between lg:mt-5 flex-row md:justify-center mt-4 justify-between">
              <button className="font-[700] text-[26px] leading-[32px] text-[#EB7150] lg:text-center lg:w-[45%] w-[45%] mr-[20px] flex flex-col items-center">
                <span>Buyer</span>
                <div className="lg:w-[100%] md:w-[35%] sm:w-[50%] w-[100%] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </button>
              <button className="font-[700] text-[26px] leading-[32px] text-[white] lg:w-[45%] lg:text-center flex flex-col items-center">
                <span>Supplier</span>
                <div className="lg:w-[90%] md:w-[35%] sm:w-[50%] w-[100%] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </button>
            </div>

            {/* paragraph section */}
            <div className="lg:w-[100%] h-auto flex bg-yellow-300 lg:flex-col md:flex-col lg:mt-8 flex-col lg:px-0 px-4">
              <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Post your requirements.
                </div>
              </div>
              <div className="flex items-start mb-3 w-full md:w-[100%] xl:w-full">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Sit back for multiple suppliers to contact you.
                </div>
              </div>
              <div className="flex items-start mb-3 w-full">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Choose among the suppliers based on the{' '}
                  <span className="inline-block">rating and reviews.</span>
                </div>
              </div>
            </div>
          </div>
 

import React, { useState } from 'react';
 

import React from 'react';
 

import { useState } from 'react';
 

import useState from "react"
 
 <div className="w-[70%] bg-green-400 mx-auto lg:w-[100%] lg:h-[47px] h-auto flex-wrap lg:justify-between lg:mt-5 flex md:justify-center mt-4 justify-between">
              <button className="font-[700] text-[26px] leading-[32px] text-[#EB7150] lg:text-center lg:w-[50%] w-[30%]">
                Buyer
                <div className="lg:w-[100%] md:w-[35%] sm:w-[50%] w-[100%] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </button>
              <button className="font-[700] text-[26px] leading-[32px] text-[white] lg:w-[50%] lg:text-center">
                Supplier
                <div className="lg:w-[90%] md:w-[35%] sm:w-[50%] w-[100%] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </button>
            </div>
 
 <div className="w-[70%] bg-green-400 mx-auto lg:w-[100%] lg:h-[47px] h-auto flex-wrap lg:justify-between lg:mt-5 flex md:justify-center mt-4 justify-between">
              <button className="font-[700] text-[26px] leading-[32px] text-[#EB7150] lg:text-center lg:w-[50%] w-[30%]">
                Buyer
                <div className="lg:w-[100%] md:w-[35%] sm:w-[50%] w-[100%] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </button>
              <button className="font-[700] text-[26px] leading-[32px] text-[white] lg:w-[50%] lg:text-center">
                Supplier
                <div className="lg:w-[90%] md:w-[35%] sm:w-[50%] w-[100%] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </button>
            </div>
 

                <div className=""></div>
 
Abu Dhabi
 
Abu Dhabi
 
Ras Al Khaimah
 
Fujairah
 
Abu Dhabi
 
Abu Dhabi
 
Abu Dhabi
 
Abu Dhabi
 
 <button class="md:w-full max-w-[258px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-full sm:w-[200px]">
              Dubai
            </button>
 
 <button class="md:w-full max-w-[258px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-full sm:w-[200px]">
              Dubai
            </button>
 
<button class="md:w-full max-w-[258px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-full sm:w-[200px]">
              Dubai
            </button>
 
bg-purple-500
 
bg-purple-500
 
bg-purple-500
 
bg-gray-500
 
bg-orange-300
 
bg-red-500
 
<div class="flex-1 min-w-0 grid grid-cols-1 lg:gap-7 lg:px-0 px-5 bg-orange-300 place-items-center lg:place-items-start py-8 md:gap-4 gap-4">
          <h1 class="text-[37px] font-[700] lg:leading-[40px] text-center sm:text-[28px]">
            Ready to dive into <font color="#271555">HABOT?</font>
          </h1>

          <p class="lg:text-[17.16px] lg:font-[300] lg:ml-1 lg:leading-[28px] md:leading-[28px] leading-[25px] underline decoration-transparent sm:text-[16px] sm:mb-4 w-full text-justify overflow-x-auto flex-wrap resize-none text-black lg:w-[520px] md:px-6 lg:px-0 px-4">
            Signing up with HABOT opens the door to a world of new opportunities
            and potential for business growth. Gain access to a vibrant
            community of like-minded individuals, unlock valuable resources, and
            take the first step towards realizing your entrepreneurial dreams.
          </p>

          <button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center lg:px-0 lg:py-0 md:px-0">
            Sign up Today!
          </button>
        </div>
 
lg:w-[520px]
 
 <div class="flex-1 min-w-0 grid grid-cols-1 lg:gap-7 pr-5 bg-orange-300 place-items-center lg:place-items-start py-8 md:gap-4 gap-4">
          <h1 class="text-[37px] font-[700] lg:leading-[40px] text-center sm:text-[28px]">
            Ready to dive into <font color="#271555">HABOT?</font>
          </h1>

          <p class="lg:text-[17.16px] lg:w-[520px] lg:font-[300] lg:ml-1 lg:leading-[28px] md:leading-[28px] leading-[25px] underline decoration-transparent sm:text-[16px] sm:mb-4 w-full text-justify overflow-x-auto resize-none text-black">
            Signing up with HABOT opens the door to a world of new opportunities
            and potential for business growth. Gain access to a vibrant
            community of like-minded individuals, unlock valuable resources, and
            take the first step towards realizing your entrepreneurial dreams.
          </p>

          <button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center lg:px-0 lg:py-0 md:px-0">
            Sign up Today!
          </button>
        </div>
 
 <div class="flex-1 min-w-0 grid grid-cols-1 lg:gap-7 pr-5 bg-orange-300 place-items-center lg:place-items-start py-8 md:gap-4 gap-4">
          <h1 class="text-[37px] font-[700] lg:leading-[40px] text-center sm:text-[28px]">
            Ready to dive into <font color="#271555">HABOT?</font>
          </h1>

          <p class="lg:text-[17.16px] lg:w-[520px] lg:font-[300] lg:ml-1 lg:leading-[28px] md:leading-[28px] leading-[25px] underline decoration-transparent sm:text-[16px] sm:mb-4 w-full text-justify overflow-x-auto resize-none text-black">
            Signing up with HABOT opens the door to a world of new opportunities
            and potential for business growth. Gain access to a vibrant
            community of like-minded individuals, unlock valuable resources, and
            take the first step towards realizing your entrepreneurial dreams.
          </p>

          <button class="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center lg:px-0 lg:py-0 md:px-0">
            Sign up Today!
          </button>
        </div>
 
  <div class="flex lg:gap-4 lg:justify-end lg:mt-1 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-full sm:w-[200px]">
              Abu Dhabi
            </button>
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-full sm:w-[200px]">
              Dubai
            </button>
          </div>
 
 <div class="flex lg:gap-4 lg:justify-end lg:mt-1 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-full sm:w-[200px]">
              Abu Dhabi
            </button>
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-full sm:w-[200px]">
              Dubai
            </button>
          </div>
 
lg:ml-2
 
lg:justify-start
 
justify-center
 
bg-blue-400 
 
bg-orange-400
 
bg-red-600
 
 // Placeholder aur icon ke beech mein space ke liye
 
// Icon ko vertically center karne ke liye
 
// Placeholder aur icon ke beech mein space ke liye
 
// Icon ko vertically center karne ke liye
 

          {/* Bottom sextion */}
 

import { width } from '@fortawesome/free-solid-svg-icons/fa0';
 

// import sent from "../Asessts/suitcase 1.png";
// import address from "../Asessts/placeholder 1.png";
// import { Input } from "postcss";
 

      {/* // <main>
    //   <div
    //     className="min-h-[490px] bg-cover bg-center flex flex-col gap-[20px] md:gap-[35px] text-[white] items-center justify-center"
    //     style={{
    //       backgroundImage: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)), url(${heroImage})`,
    //     }}
    //   >
    //     <div className="grid justify-items-center flex-col">
    //       <h1 className="text-[28px] md:text-[55px] font-[700] md:leading-[66px] text-center">
    //         Are You a Supplier?
    //       </h1>
    //       <span className="text-[22px] md:text-[55px] lg:text-[55px] font-[400] md:leading-[66px]  text-center">
    //         Explore Matching Opportunities.
    //       </span>
    //     </div>

    //     <div className="flex flex-col gap-[22px] items-center justify-center md:flex-row md:gap-[10px] md:w-full px-2">
    //       <input
    //         type="text"
    //         placeholder="Search your required service here"
    //         className="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center] w-[300px]  md:w-[400px]"
    //         style={{
    //           height: '52px',
    //         }}
    //       />
    //       <input
    //         type="text"
    //         placeholder="Search your required service here"
    //         className="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center] w-[300px]  md:w-[400px]"
    //         style={{
    //           height: '52px',
    //         }}
    //       />
    //       <button className="w-[160px] h-[54px] bg-[#00732f] rounded-[5px] text-[15px] font-[700]">
    //         Search
    //       </button>
    //     </div>

    //     <div className="flex flex-col  md:flex-row gap-2 items-center text-center ">
    //       <b className="text-lg  font-semibold">Are you a buyer?</b>
    //       <span className="underline text-[14px] s">
    //         Click here if you are looking to post a requirement
    //       </span>
    //     </div>
    //   </div>
    // </main> */}
 
/* Add this to your global CSS (or inside Tailwind config) */
html, body {
  }
  
 

    overflow-x: hidden; /* Hide horizontal scroll */
    overflow-y: auto;   /* Keep vertical scroll */
 

    overflow-y: auto;   Keep vertical scroll
 
<nav
      className="px-8 py-2 flex justify-between items-center sticky top-0"
      style={{
        height: '65px',
        background: 'white',
      }}
    >
      <a
        href="#"
        className="flex items-center md:w-[181px] lg:w-[181px] w-[120px]"
      >
        <img alt="Habot Logo" src={logo} />
      </a>

      {/* Main navigation links (visible on large screens) */}
      <div
        className={`hidden md:flex md:ml-5 space-x-4 justify-center items-center ${
          isMenuOpen ? 'hidden' : ''
        }`} // Hide when mobile menu is open
        style={{
          color: '#6D6E71',
          lineHeight: '24px',
          fontSize: '15.25px',
          fontWeight: '400',
          gap: '30px',
        }}
      >
        {navigation.map((item) => (
          <div key={item.name} className="flex items-center md:text-[14px]">
            <a
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(item.current)}
            >
              {item.name}
            </a>

            {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
            {item.name === 'Find Service Tags' && (
              <img
                src={dropVec}
                className="md:justify-center cursor-pointer ml-[7px]"
                alt="Dropdown"
              />
            )}
          </div>
        ))}

        <button className="relative  font-[700] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 md:w-[193px] lg:w-[193px] rounded-[5px] border-[1px] border-[#00732F] text-[#00732F] text-[15px] leading-[24px] h-[50px]">
          Login / Signup
        </button>
      </div>

      {/* Hamburger button to open/close mobile menu */}
      <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={isMenuOpen ? faXmark : faBars} />
      </button>

      {/* Mobile navigation menu (only shown when isMenuOpen is true) */}
      {isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden h-[40vh] w-[90%] mt-[65px] ml-[20px] rounded-[20px] bg-white border border-[#00732F] shadow-xl p-5 
          sm:mt-[65px] sm:mx-auto md:mt-[65px] md:mx-auto"
        >
          {/* Mobile menu content */}
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? 'page' : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === 'Find Service Tags' && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: '7px',
                      cursor: 'pointer',
                    }}
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black md:w-[193px] lg:w-[193px] w-[150px]"
              style={{
                height: '50px',
                borderRadius: '5px',
                border: '1px solid #00732F',
                color: '#00732F',
                fontSize: '15px',
                fontWeight: '700',
                lineHeight: '24px',
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
    </nav>
 
 <nav
      className="px-8 py-2 flex justify-between items-center sticky top-0"
      style={{
        height: '65px',
        background: 'white',
      }}
    >
      <a
        href="#"
        className="flex items-center md:w-[181px] lg:w-[181px] w-[120px]"
      >
        <img alt="Habot Logo" src={logo} />
      </a>

      {/* Main navigation links (visible on large screens) */}
      <div
        className={`hidden md:flex md:ml-5 space-x-4 justify-center items-center ${
          isMenuOpen ? 'hidden' : ''
        }`} // Hide when mobile menu is open
        style={{
          color: '#6D6E71',
          lineHeight: '24px',
          fontSize: '15.25px',
          fontWeight: '400',
          gap: '30px',
        }}
      >
        {navigation.map((item) => (
          <div key={item.name} className="flex items-center md:text-[14px]">
            <a
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(item.current)}
            >
              {item.name}
            </a>

            {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
            {item.name === 'Find Service Tags' && (
              <img
                src={dropVec}
                className="md:justify-center cursor-pointer ml-[7px]"
                alt="Dropdown"
              />
            )}
          </div>
        ))}

        <button className="relative  font-[700] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 md:w-[193px] lg:w-[193px] rounded-[5px] border-[1px] border-[#00732F] text-[#00732F] text-[15px] leading-[24px] h-[50px]">
          Login / Signup
        </button>
      </div>

      {/* Hamburger button to open/close mobile menu */}
      <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={isMenuOpen ? faXmark : faBars} />
      </button>

      {/* Mobile navigation menu (only shown when isMenuOpen is true) */}
      {isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden h-[40vh] w-[90%] mt-[65px] ml-[20px] rounded-[20px] bg-white border border-[#00732F] shadow-xl p-5 
          sm:mt-[65px] sm:mx-auto md:mt-[65px] md:mx-auto"
        >
          {/* Mobile menu content */}
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? 'page' : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === 'Find Service Tags' && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: '7px',
                      cursor: 'pointer',
                    }}
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black md:w-[193px] lg:w-[193px] w-[150px]"
              style={{
                height: '50px',
                borderRadius: '5px',
                border: '1px solid #00732F',
                color: '#00732F',
                fontSize: '15px',
                fontWeight: '700',
                lineHeight: '24px',
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
    </nav>
 
<nav
      className="px-8 py-2 flex justify-between items-center sticky top-0"
      style={{
        height: '65px',
        background: 'white',
      }}
    >
 

    overflow-y: ;
 
  <nav
      className="px-8 py-2 flex justify-between items-center sticky top-0"
      style={{
        height: '65px',
        background: 'white',
      }}
    >
      <a
        href="#"
        className="flex items-center md:w-[181px] lg:w-[181px] w-[120px]"
      >
        <img alt="Habot Logo" src={logo} />
      </a>

      {/* Main navigation links (visible on large screens) */}
      <div
        className={`hidden md:flex md:ml-5 space-x-4 justify-center items-center ${
          isMenuOpen ? 'hidden' : ''
        }`} // Hide when mobile menu is open
        style={{
          color: '#6D6E71',
          lineHeight: '24px',
          fontSize: '15.25px',
          fontWeight: '400',
          gap: '30px',
        }}
      >
        {navigation.map((item) => (
          <div key={item.name} className="flex items-center md:text-[14px]">
            <a
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(item.current)}
            >
              {item.name}
            </a>

            {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
            {item.name === 'Find Service Tags' && (
              <img
                src={dropVec}
                className="md:justify-center cursor-pointer ml-[7px]"
                alt="Dropdown"
              />
            )}
          </div>
        ))}

        <button className="relative  font-[700] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 md:w-[193px] lg:w-[193px] rounded-[5px] border-[1px] border-[#00732F] text-[#00732F] text-[15px] leading-[24px] h-[50px]">
          Login / Signup
        </button>
      </div>

      {/* Hamburger button to open/close mobile menu */}
      <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={isMenuOpen ? faXmark : faBars} />
      </button>

      {/* Mobile navigation menu (only shown when isMenuOpen is true) */}
      {isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden h-[40vh] w-[90%] mt-[65px] ml-[20px] rounded-[20px] bg-white border border-[#00732F] shadow-xl p-5 
          sm:mt-[65px] sm:mx-auto md:mt-[65px] md:mx-auto"
        >
          {/* Mobile menu content */}
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? 'page' : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === 'Find Service Tags' && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: '7px',
                      cursor: 'pointer',
                    }}
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black md:w-[193px] lg:w-[193px] w-[150px]"
              style={{
                height: '50px',
                borderRadius: '5px',
                border: '1px solid #00732F',
                color: '#00732F',
                fontSize: '15px',
                fontWeight: '700',
                lineHeight: '24px',
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
    </nav>
 
  <nav
      className="px-8 py-2 flex justify-between items-center sticky top-0"
      style={{
        height: '65px',
        background: 'white',
      }}
    >
      <a
        href="#"
        className="flex items-center md:w-[181px] lg:w-[181px] w-[120px]"
      >
        <img alt="Habot Logo" src={logo} />
      </a>

      {/* Main navigation links (visible on large screens) */}
      <div
        className={`hidden md:flex md:ml-5 space-x-4 justify-center items-center ${
          isMenuOpen ? 'hidden' : ''
        }`} // Hide when mobile menu is open
        style={{
          color: '#6D6E71',
          lineHeight: '24px',
          fontSize: '15.25px',
          fontWeight: '400',
          gap: '30px',
        }}
      >
        {navigation.map((item) => (
          <div key={item.name} className="flex items-center md:text-[14px]">
            <a
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(item.current)}
            >
              {item.name}
            </a>

            {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
            {item.name === 'Find Service Tags' && (
              <img
                src={dropVec}
                className="md:justify-center cursor-pointer ml-[7px]"
                alt="Dropdown"
              />
            )}
          </div>
        ))}

        <button className="relative  font-[700] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 md:w-[193px] lg:w-[193px] rounded-[5px] border-[1px] border-[#00732F] text-[#00732F] text-[15px] leading-[24px] h-[50px]">
          Login / Signup
        </button>
      </div>

      {/* Hamburger button to open/close mobile menu */}
      <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={isMenuOpen ? faXmark : faBars} />
      </button>

      {/* Mobile navigation menu (only shown when isMenuOpen is true) */}
      {isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden h-[40vh] w-[90%] mt-[65px] ml-[20px] rounded-[20px] bg-white border border-[#00732F] shadow-xl p-5 
          sm:mt-[65px] sm:mx-auto md:mt-[65px] md:mx-auto"
        >
          {/* Mobile menu content */}
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? 'page' : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === 'Find Service Tags' && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: '7px',
                      cursor: 'pointer',
                    }}
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black md:w-[193px] lg:w-[193px] w-[150px]"
              style={{
                height: '50px',
                borderRadius: '5px',
                border: '1px solid #00732F',
                color: '#00732F',
                fontSize: '15px',
                fontWeight: '700',
                lineHeight: '24px',
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
    </nav>
 
<div className="w-full px-4 flex flex-col md:flex-row flex-wrap bg-[#123557] text-white md:h-[212px] h-auto items-center  justify-center">
      <div className="w-full md:w-[1200px] flex flex-col lg:flex-row md:flex-col flex-wrap justify-between  md:px-2 text-white lg:h-[150px]  h-auto border-t-[1px] border-b-[1px] border-solid border-[#FFFFFF33]">
        <div className="flex flex-col  md:flex-row lg:flex-row flex-wrap md:gap-16 lg:gap-16 md:justify-center sm:justify-center ">
          <div className="md:justify-center lg:justify-center flex lg:flex-col md:flex-col gap-2 flex-col lg:mt-6 items-center mt-5">
            <img
              src={footerLogo}
              alt="logo"
              className="lg:w-[206px] md:w-[206px] sm:w-[206px] w-[206px]"
            />
            <p className="text-16px font-[300] leading-[32px] ml-3 mt">
              © R Singhania
            </p>
          </div>
          <div className="sm:flex-row flex sm:gap-10 justify-center gap-10">
          <div className="flex md:flex-col md:gap-[7px] md:mt-[20px] flex-col mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">
              Company
            </h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">About</p>
              <p className="text-[14px] font-[300] leading-[25px]">FAQ</p>
            </div>
          </div>
          <div className="flex flex-col gap-[7px]  mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">Terms</h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">
                Data privacy
              </p>
              <p className="text-[14px] font-[300] leading-[25px]">Terms</p>
              <p className="text-[14px] font-[300] leading-[25px]">
                Accessibility
              </p>
            </div>
          </div>
          <div className="flex flex-col gap-[7px]  mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">
              Related
            </h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">
                Find Buyer
              </p>
              <p className="text-[14px] font-[300] leading-[25px]">Feedback</p>
            </div>
          </div>
          </div>
         
        </div>

        <div className="flex flex-row flex-wrap gap-4 md:items-center lg:justify-center md:justify-center md:py-4 sm:justify-center sm:py-4 pl-4 py-4 justify-center">
          <a href="#">
            <img src={linkdln} />
          </a>
          <a href="#">
            <img src={x} />
          </a>
          <a href="#">
            <img src={fb} />
          </a>
          <a href="#">
            <img src={instagram} />
          </a>
        </div>
      </div>
    </div>
 
<div className="w-full px-4 flex flex-col md:flex-row flex-wrap bg-[#123557] text-white md:h-[212px] h-auto items-center  justify-center">
      <div className="w-full md:w-[1200px] flex flex-col lg:flex-row md:flex-col flex-wrap justify-between  md:px-2 text-white lg:h-[150px]  h-auto border-t-[1px] border-b-[1px] border-solid border-[#FFFFFF33]">
        <div className="flex flex-col  md:flex-row lg:flex-row flex-wrap md:gap-16 lg:gap-16 md:justify-center sm:justify-center ">
          <div className="md:justify-center lg:justify-center flex lg:flex-col md:flex-col gap-2 flex-col lg:mt-6 items-center mt-5">
            <img
              src={footerLogo}
              alt="logo"
              className="lg:w-[206px] md:w-[206px] sm:w-[206px] w-[206px]"
            />
            <p className="text-16px font-[300] leading-[32px] ml-3 mt">
              © R Singhania
            </p>
          </div>
          <div className="sm:flex-row flex sm:gap-10 justify-center gap-10">
          <div className="flex md:flex-col md:gap-[7px] md:mt-[20px] flex-col mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">
              Company
            </h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">About</p>
              <p className="text-[14px] font-[300] leading-[25px]">FAQ</p>
            </div>
          </div>
          <div className="flex flex-col gap-[7px]  mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">Terms</h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">
                Data privacy
              </p>
              <p className="text-[14px] font-[300] leading-[25px]">Terms</p>
              <p className="text-[14px] font-[300] leading-[25px]">
                Accessibility
              </p>
            </div>
          </div>
          <div className="flex flex-col gap-[7px]  mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">
              Related
            </h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">
                Find Buyer
              </p>
              <p className="text-[14px] font-[300] leading-[25px]">Feedback</p>
            </div>
          </div>
          </div>
         
        </div>

        <div className="flex flex-row flex-wrap gap-4 md:items-center lg:justify-center md:justify-center md:py-4 sm:justify-center sm:py-4 pl-4 py-4 justify-center">
          <a href="#">
            <img src={linkdln} />
          </a>
          <a href="#">
            <img src={x} />
          </a>
          <a href="#">
            <img src={fb} />
          </a>
          <a href="#">
            <img src={instagram} />
          </a>
        </div>
      </div>
    </div>
 
<div class="flex flex-wrap bg-orange-400 lg:flex-row md:flex-col lg:gap-4 lg:px-16 lg:py-16 flex-col">
        {/* <!-- Left side content div --> */}
        <div class="flex-1 min-w-[200px] bg-red-600 grid grid-cols-1 lg:gap-8 p-5 place-items-center lg:place-items-start py-8 md:gap-4 gap-4">
          <h1 class="text-[37px] font-[700] lg:leading-[40px]">
            Ready to dive into <font color="#271555">HABOT?</font>
          </h1>

          {/* <!-- Responsive Paragraph with Fixed Width and Scroll on Overflow --> */}
          <p class="lg:text-[17.16px] lg:font-[300] lg:ml-1 lg:leading-[28px] md:leading-[28px] leading-[25px] underline decoration-transparent sm:text-[16px] sm:mb-4 w-[520px] max-w-full text-justify overflow-x-auto resize-none text-black">
            Signing up with HABOT opens the door to a world of new opportunities
            and potential for business growth. Gain access to a vibrant
            community of like-minded individuals, unlock valuable resources, and
            take the first step towards realizing your entrepreneurial dreams.
          </p>

          <button class="w-[50%] sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center lg:px-0 lg:py-0 md:px-0 ">
            Sign up Today!
          </button>
        </div>
        {/*  */}
        {/* <!-- Right side buttons div --> */}
        <div class="flex-1 min-w-[200px] flex lg:flex-col lg:pr-5 bg-blue-400 flex-col lg:justify-start lg:px-0 lg:py-0 md:py-6 px-28 py-6 lg:gap-0 gap-4">
          <div class="flex lg:gap-4 lg:justify-end lg:mt-10 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Abu Dhabi
            </button>
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Dubai
            </button>
          </div>
          <div class="flex lg:gap-4 lg:justify-end lg:mt-5 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Abu Dhabi
            </button>
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Dubai
            </button>
          </div>
          <div class="flex lg:gap-4 lg:justify-end lg:mt-5 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Abu Dhabi
            </button>
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Dubai
            </button>
          </div>
        </div>
      </div>
 
 <div class="flex lg:gap-4 lg:justify-end lg:mt-10 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Abu Dhabi
            </button>
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Dubai
            </button>
          </div>
          <div class="flex lg:gap-4 lg:justify-end lg:mt-5 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Abu Dhabi
            </button>
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Dubai
            </button>
          </div>
          <div class="flex lg:gap-4 lg:justify-end lg:mt-5 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Abu Dhabi
            </button>
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Dubai
            </button>
          </div>
 
{
    
}
 
body:{

}
 
 <div class="flex lg:gap-4 lg:justify-end lg:mt-5 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Abu Dhabi
            </button>
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Dubai
            </button>
          </div>
          <div class="flex lg:gap-4 lg:justify-end lg:mt-5 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Abu Dhabi
            </button>
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Dubai
            </button>
          </div>
 
w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer
 
          <div class="flex lg:gap-4 lg:justify-end lg:mt-5 lg:ml-2 md:justify-center md:gap-4 gap-4 lg:flex-row md:flex-row flex-col justify-center items-center">
            <button class="md:w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer w-[200px]">
              Abu Dhabi
            </button>
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Dubai
            </button>
          </div>
 
 <div class="flex lg:gap-4 lg:justify-end lg:mt-5 md:justify-center md:gap-4 md:mt-5">
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Ras Al Khaimah
            </button>
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Umm Al Quwain
            </button>
          </div>
 
 <div class="flex lg:gap-4 lg:justify-end lg:mt-5 md:justify-center md:gap-4 md:mt-5">
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Sharjah & Ajman
            </button>
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Fujairah
            </button>
          </div>
 
 <div class="flex lg:gap-4 lg:justify-end lg:mt-5 md:justify-center md:gap-4 md:mt-5">
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Sharjah & Ajman
            </button>
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Fujairah
            </button>
          </div>
 
 <div class="flex lg:gap-4 lg:justify-end lg:mt-5 md:justify-center md:gap-4 md:mt-5">
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Sharjah & Ajman
            </button>
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Fujairah
            </button>
          </div>
 
lg:py-0
 
<div class="flex-1 min-w-[200px] flex lg:flex-col lg:pr-5 bg-blue-400 flex-col">
 
flex gap-4 justify-end
 
gap-4 justify-end
 
<div class="flex-1 min-w-[200px] flex lg:flex-col lg:gap-4 lg:pr-5 bg-blue-400 flex-col ">
 

        <div class="flex-1 min-w-[200px] bg-red-600 grid grid-cols-1 lg:gap-8 p-5">
 
"flex-1 min-w-[200px] bg-red-600 grid grid-cols-1 lg:gap-8 p-5"
 
      <div class="flex flex-wrap bg-orange-400 lg:gap-4 lg:px-16 lg:py-16">
 
sm:leading-[24px]
 
 style={{
            marginTop:"5px"
          }}
 
style={{
            marginTop:"5px"
          }}>
 

            lineHeight:"15px"
 
<h1 class="text-[37px] font-[700]">
            Ready to dive into <font color="#271555">HABOT?</font>
          </h1>
 
<h1 class="text-[37px] font-[700]">
            Ready to dive into <font color="#271555">HABOT?</font>
          </h1>
 
</span>
 
<span class="text-[#271555] ">
 
<span class="text-[#271555] ">
 

</div>

 
<div class="flex-1 min-w-[200px] grid grid-cols-1 gap-10 p-5">
          <h1 class="text-[37px] font-[700] leading-[30px]">
            Ready to dive into <span class="text-[#271555]">HABOT?</span>
          </h1>
 
<div class="flex-1 min-w-[200px] grid grid-cols-1 gap-10 p-5">
          <h1 class="text-[37px] font-[700] leading-[30px]">
            Ready to dive into <span class="text-[#271555]">HABOT?</span>
          </h1>
 
 block sm:mt-4 md:mt-6
 
<h1 class="text-[37px] font-[700] leading-[30px]">
            Ready to dive into <span class="text-[#271555]">HABOT?</span>
          </h1>
 
<h1 class="text-[37px] font-[700] leading-[30px]">
            Ready to dive into <span class="text-[#271555]">HABOT?</span>
          </h1>
 
sm:text-[16px]
 
sm:text-[16px]
 
 <div class="flex flex-wrap gap-4 px-16 py-16  ">
        <div class="grid grid-cols-1 gap-7 p-5  min-w-[200px]">
          <h1 class="text-[37px] font-[700] leading-[30px]">
            Ready to dive into <span className="text-[#271555]">HABOT?</span>
          </h1>

          {/* <!-- Responsive Paragraph with Fixed Width and Scroll on Overflow --> */}
          <p class="text-[17.16px] font-[300] ml-1 leading-[28px] underline decoration-transparent sm:text-[16px] sm:leading-[24px] sm:mb-4 w-[485px] max-w-full text-justify overflow-x-auto resize-none">
            Signing up with HABOT opens the door to a world of new opportunities
            and potential for business growth. Gain access to a vibrant
            community of like-minded individuals, unlock valuable resources, and
            take the first step towards realizing your entrepreneurial dreams.
          </p>

          <button className="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center">
            Sign up Today!
          </button>
        </div>

        <div class="flex-1 min-w-[200px]  flex flex-col gap-4  pr-5">
          <div class="flex gap-4 justify-end mt-6">
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Abu Dhabi
            </button>
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Dubai
            </button>
          </div>
          <div class="flex gap-4 justify-end">
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Sharjah & Ajman
            </button>
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Fujairah
            </button>
          </div>
          <div class="flex gap-4 justify-end">
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Ras Al Khaimah
            </button>
            <button class="w-full max-w-[270px] h-[65px] bg-white border border-[#E7760D] rounded-[5px] px-0 py-4 opacity-100 text-[18.75px] leading-[32px] text-center font-[500] hover:bg-header-serch-icon-color hover:text-white cursor-pointer">
              Umm Al Quwain
            </button>
          </div>
        </div>
      </div>
 
<div class="grid grid-cols-1 gap-7 p-5  min-w-[200px]">
          <h1 class="text-[37px] font-[700] leading-[30px]">
            Ready to dive into <span className="text-[#271555]">HABOT?</span>
          </h1>

          {/* <!-- Responsive Paragraph with Fixed Width and Scroll on Overflow --> */}
          <p class="text-[17.16px] font-[300] ml-1 leading-[28px] underline decoration-transparent sm:text-[16px] sm:leading-[24px] sm:mb-4 w-[485px] max-w-full text-justify overflow-x-auto resize-none">
            Signing up with HABOT opens the door to a world of new opportunities
            and potential for business growth. Gain access to a vibrant
            community of like-minded individuals, unlock valuable resources, and
            take the first step towards realizing your entrepreneurial dreams.
          </p>

          <button className="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center">
            Sign up Today!
          </button>
        </div>
 
bg-red-300
 
bg-green-600
 
bg-red-700
 
items-center
 
items-center
 
items-center
 
260
 
 Button 1
 
Button 1
 
Button 1
 
utton 1
 
Button 1
 
Button 1
 
<button class="w-full max-w-[260px] h-[65px] bg-white text-[#E7760D] border border-[#E7760D] rounded-tl-[5px] px-0 py-4 opacity-100">
              Button 6
            </button>
 
<button class="w-full max-w-[260px] h-[65px] bg-white text-[#E7760D] border border-[#E7760D] rounded-tl-[5px] px-0 py-4 opacity-100">
              Button 5
            </button>
 
<button class="w-full max-w-[260px] h-[65px] bg-white text-[#E7760D] border border-[#E7760D] rounded-tl-[5px] px-0 py-4 opacity-100">
              Button 4
            </button>
 
 <button class="w-full max-w-[260px] h-[65px] bg-white text-[#E7760D] border border-[#E7760D] rounded-tl-[5px] px-0 py-4 opacity-100">
              Button 3
            </button>
 
<button class="w-full max-w-[260px] h-[65px] bg-white text-[#E7760D] border border-[#E7760D] rounded-tl-[5px] px-0 py-4 opacity-100">
              Button 2
            </button>
 
<button class="w-full max-w-[260px] h-[65px] bg-[#E7760D] text-white border border-[#E7760D] rounded-tl-[5px] px-0 py-4 opacity-100">
            Click Me
          </button>
 
flex-1 min-w-[200px] flew flex-col bg-red-300 gap-4
 
flex-1 min-w-[200px] flew flex-col bg-red-300 gap-4
 
flex flex-wrap gap-4 p-5 bg-green-600
 
<div class="flex-1 min-w-[200px]">
          <h1 class="text-xl mb-3">Heading</h1>

          {/* <!-- Responsive Paragraph --> */}
          <p class="text-[17.16px] font-light leading-[28px] underline decoration-transparent sm:text-[16px] sm:leading-[24px] sm:mb-4 w-[485px] text-justify">
            Signing up with HABOT opens the door to a world of new opportunities
            and potential for business growth. Gain access to a vibrant
            community of like-minded individuals, unlock valuable resources, and
            take the first step towards realizing your entrepreneurial dreams.
          </p>

          <button class="w-full max-w-[260px] h-[65px] bg-[#E7760D] text-white border border-[#E7760D] rounded-tl-[5px] px-0 py-4 opacity-100">
            Click Me
          </button>
        </div>
 
text-left
 
<div class="flex-1 min-w-[200px]">
          <h1 class="text-xl mb-3">Heading</h1>

          {/* <!-- Responsive Paragraph --> */}
          <p class="text-left text-[17.16px] font-light leading-[28px] underline decoration-transparent sm:text-[16px] sm:leading-[24px] sm:mb-4">
            Signing up with HABOT opens the door to a world of new opportunities
            and potential for business growth. Gain access to a vibrant
            community of like-minded individuals, unlock valuable resources, and
            take the first step towards realizing your entrepreneurial dreams.
          </p>

          <button class="w-full max-w-[260px] h-[65px] bg-[#E7760D] text-white border border-[#E7760D] rounded-tl-[5px] px-0 py-4 opacity-100">
            Click Me
          </button>
        </div>
 
<div class="flex-1 min-w-[200px]">
    <h1 class="text-xl mb-3">Heading</h1>
    <p class="mb-4">This is a paragraph.</p>
    <button class="w-full max-w-[260px] h-[65px] bg-[#E7760D] text-white border border-[#E7760D] rounded-tl-[5px] px-0 py-4 opacity-100">Click Me</button>
  </div>
 

  <!-- Right Div (Buttons) -->
 

  <!-- Left Div -->
 

  <!-- Left Div -->
 


  <!-- Right Div (Buttons) -->
 
<div className="w-auto h-full flex flex-col gap-6 lg:items-start px-6 md:px-[60px] py-6 md:py-[60px] md:items-center items-center">
          <h1 className="text-2xl sm:text-3xl lg:text-4xl font-[700] leading-tight text-black">
            Ready to dive into <span className="text-[#271555]">HABOT?</span>
          </h1>
          <p className="text-[20px] lg:text-lg font-light text-[#000000] text-justify w-full sm:w-[500px] md:w-[540px]">
            Signing up with HABOT opens the door to a world of new opportunities
            and potential for business growth. Gain access to a vibrant
            community of like-minded individuals, unlock valuable resources, and
            take the first step towards realizing your entrepreneurial dreams.
          </p>
          <button className="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center">
            Sign up Today!
          </button>
        </div>
 
<div className="lg:w-auto h-full flex flex-wrap gap-4 px-4 md:px-[76px] py-4 md:py-[20px] lg:py-[80px] justify-center">
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Abu Dhabi
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Sharjah & Ajman
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Dubai
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Fujairah
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Ras Al Khaimah
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Umm Al Quwain
          </button>
        </div>
 
 <div className="lg:w-auto h-full flex flex-wrap gap-4 px-4 md:px-[76px] py-4 md:py-[20px] lg:py-[80px] justify-center">
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Abu Dhabi
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Sharjah & Ajman
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Dubai
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Fujairah
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Ras Al Khaimah
          </button>
          <button className="w-[220px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Umm Al Quwain
          </button>
        </div>
 
bg-red-500
 
py-4 md:py-[20px] lg:py-[80px]
 

  const countries = [
    { _name: 'Abu Dhabi', _path: '/' },
    { _name: 'Dubai', _path: '/' },
    { _name: 'Sharjah & Ajman', _path: '/' },
    { _name: 'Fujairah', _path: '/' },
    { _name: 'Ras Al Khaimah', _path: '/' },
    { _name: 'Umm Al Quwain', _path: '/' },
  ];
 
 {/* <div className="grid lg:grid-cols-2 w-full h-auto bg-orange-400 lg:justify-between lg:px-20 lg:py-16">
        <div className="flex flex-col flex-wrap gap-4 bg-red-500">
          <div className="flex flex-col flex-wrap gap-8 items-start">
            <h1 className="font-[700] text-[37px] leading-[40px]">
              Ready to dive into <span className="text-[#271555]">HABOT?</span>
            </h1>
            <p className="w-[520px] font-[300] text-[17.16px] leading-[28px] text-justify">
              Signing up with HABOT opens the door to a world of new
              opportunities and potential for business growth. Gain access to a
              vibrant community of like-minded individuals, unlock valuable
              resources, and take the first step towards realizing your
              entrepreneurial dreams.
            </p>
            <button className="w-[317px] h-[54px] rounded-[5px] bg-[#00732F] border-[1px] border-[#00732F] text-[18px] text-center font-[700] leading-[24px] text-white">
              Sign up Today!
            </button>
          </div>
        </div>

        <div className="flex flex-wrap gap-4 bg-red-800 max-w-[520px] h-[39vh] pt-5 ml-4">
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
        </div>
      </div> */}
      {/* <main className="w-full flex items-center justify-center py-16 bg-green-500 screen-750px:py-12">
        <section className=" max-w-max-width-of-section w-full bg-red-600 flex items-center justify-center">
          <div className="w-width-of-component flex items-center justify-between screen-580px:flex-col screen-580px:justify-center screen-580px:gap-6 bg-red-300">
            <div className="w-48% flex items-start justify-center bg-gray-600 flex-col gap-8 font-poppins screen-750px:gap-2 screen-580px:w-full screen-580px:items-center">
              <h3 className="font-[700] text-[37px] leading-[40px] screen-970px:text-h6 screen-750px:text-btn1 screen-580px:text-center screen-580px:w-full screen-480px:text-btn2 screen-370px:text-p1">
                <span>Ready to dive into </span>
                <span className=" text-habot-heading-color">HABOT?</span>
              </h3>
              <p className=" text-justify text-[16px] font-[300] leading-[28px] screen-970px:text-p3 screen-750px:text-p4 screen-420px:text-p5">
                Signing up with HABOT opens the door to a world of new
                opportunities and potential for business growth. Gain access to
                a vibrant community of like-minded individuals, unlock valuable
                resources, and take the first step towards realizing your
                entrepreneurial dreams.
              </p>
              <button className="lg:w-[290px] h-[52px] text-[18px] text-center font-[700] text-white bg-nav-button-color flex items-center justify-center gap-4 px-8 py-2 rounded-md border-nav-button-color border-2 hover:bg-white hover:text-nav-button-color transition-colors duration-200 ease-in-out screen-970px:text-p3 screen-750px:text-p4 screen-420px:text-p5">
                Sign up Today!
              </button>
            </div>
            <div className="flex items-center justify-center gap-3 text-p2 font-h2 font-inter flex-wrap bg-slate-400 lg:h-auto lg:w-auto lg:gap-5 lg:text-p3 md:h-[70vh] md:w-[90%] sm:h-[60vh] sm:w-[100%] xs:h-auto xs:w-full">
              {countries?.map((country, ind) => {
                return (
                  <button
                    // onClick={() => navigate(country._path)}
                    key={ind}
                    className="lg:w-[240px] lg:h-[60px] border border-header-serch-icon-color rounded-md py-2 w-49% text-center hover:bg-header-serch-icon-color hover:text-white cursor-pointer"
                  >
                    {country._name}
                  </button>
                );
              })}
            </div>
          </div>
        </section>
      </main> */}
 
<div className="w-48% flex items-center lg:justify-center lg:gap-5 flex-wrap gap-y-3 text-p2 font-h2 font-inter screen-970px:text-p3 screen-970px:gap-y-2 screen-750px:text-p4 screen-580px:w-full screen-580px:gap-y-3 screen-420px:text-p5 screen-420px:gap-y-2 bg-slate-400">
 

                </span>
 

                <span className=" text-2xl screen-970px:text-xl screen-750px:text-lg screen-420px:text-base">
                  {/* <LuMoveRight /> */}
 
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/**/*.{html,js,jsx,ts,tsx}', // Make sure to include your React files here
  ],
  theme: {
    extend: {
      fontSize: {
        'sm': '0.75rem',   // Small size 12px
        'base': '0.875rem', // Base size 14px
        'md': '1rem',      // Medium size 16px
        'lg': '1.25rem',   // Large size (20px)
        'xl': '1.5rem',    // Extra large size (24px)
        '2xl': '1.75rem',  // 2x large size (28px)
        '3xl': '2.25rem',  // 3x large size (36px)
      },
    },
  },
  fontFamily: {
    display: ["Poppins", "sans-serif"], // Ensure this is correct
    body: ["Inter", "sans-serif"],      // Ensure this is correct
  },
  plugins: [require("tailwindcss"), require("autoprefixer")],
};

 
  /** @type {import('tailwindcss').Config} */
  module.exports = {
    content: [
      './src/**/*.{html,js,jsx,ts,tsx}', // Make sure to include your React files here
    ],
    theme: {
      extend: {
        fontSize: {
          'sm': '0.75rem',   // Small size 12px
          'base': '0.875rem', // Base size 14px
          'md': '1rem',      // Medium size 16px
          'lg': '1.25rem',   // Large size (20px)
          'xl': '1.5rem',    // Extra large size (24px)
          '2xl': '1.75rem',  // 2x large size (28px)
          '3xl': '2.25rem',  // 3x large size (36px)
        },
      },
    },
    fontFamily: {
      display: ["Poppins", "sans-serif"], // Ensure this is correct
      body: ["Inter", "sans-serif"],      // Ensure this is correct
    },
    plugins: [require("tailwindcss"), require("autoprefixer")],
  };

 
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/**/*.{html,js,jsx,ts,tsx}', // Make sure to include your React files here
  ],
  theme: {
    extend: {
      fontSize: {
        'sm': '0.75rem',   // Small size 12px
        'base': '0.875rem', // Base size 14px
        'md': '1rem',      // Medium size 16px
        'lg': '1.25rem',   // Large size (20px)
        'xl': '1.5rem',    // Extra large size (24px)
        '2xl': '1.75rem',  // 2x large size (28px)
        '3xl': '2.25rem',  // 3x large size (36px)
      },
    },
  },
  fontFamily: {
    display: ["Poppins", "sans-serif"], // Ensure this is correct
    body: ["Inter", "sans-serif"],      // Ensure this is correct
  },
  plugins: [require("tailwindcss"), require("autoprefixer")],
};

 

          {/* <!-- text content start here --> */}
 

        {/* <!-- Left Div with Content --> */}
 

        {/* <!-- Right Div with Buttons --> */}
 

          {/* <!-- text content end here --> */}
 
 <div className="grid lg:grid-cols-2 w-full h-auto bg-orange-400 lg:justify-between lg:px-20 lg:py-16">
        <div className="flex flex-col flex-wrap gap-4 bg-red-500">
          {/* text content start here */}
          <div className="flex flex-col flex-wrap gap-8 items-start">
            <h1 className="font-[700] text-[37px] leading-[40px]">
              Ready to dive into <span className="text-[#271555]">HABOT?</span>
            </h1>
            <p className="w-[520px] font-[300] text-[17.16px] leading-[28px] text-justify">
              Signing up with HABOT opens the door to a world of new
              opportunities and potential for business growth. Gain access to a
              vibrant community of like-minded individuals, unlock valuable
              resources, and take the first step towards realizing your
              entrepreneurial dreams.
            </p>
            <button className="w-[317px] h-[54px] rounded-[5px] bg-[#00732F] border-[1px] border-[#00732F] text-[18px] text-center font-[700] leading-[24px] text-white">
              Sign up Today!
            </button>
          </div>
          {/* text content end here */}
        </div>
        <div className="flex flex-wrap gap-4 bg-red-800 max-w-[520px] h-[39vh] pt-5 ml-4">
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
        </div>
      </div>
 
flex flex-wrap lg:flex-row
 
lg:justify-between 
 
<div className="flex flex-wrap lg:flex-row w-full h-auto bg-orange-400 lg:justify-between lg:px-20 lg:py-16">
        <div className="flex flex-col flex-wrap gap-4 bg-red-500">
          {/* text content start here */}
          <div className="flex flex-col flex-wrap gap-8 items-start">
            <h1 className="font-[700] text-[37px] leading-[40px]">
              Ready to dive into <span className="text-[#271555]">HABOT?</span>
            </h1>
            <p className="w-[520px] font-[300] text-[17.16px] leading-[28px] text-justify">
              Signing up with HABOT opens the door to a world of new
              opportunities and potential for business growth. Gain access to a
              vibrant community of like-minded individuals, unlock valuable
              resources, and take the first step towards realizing your
              entrepreneurial dreams.
            </p>
            <button className="w-[317px] h-[54px] rounded-[5px] bg-[#00732F] border-[1px] border-[#00732F] text-[18px] text-center font-[700] leading-[24px] text-white">
              Sign up Today!
            </button>
          </div>
          {/* text content end here */}
        </div>
        <div className="flex flex-wrap gap-4 bg-red-800 max-w-[520px] h-[39vh] pt-5 ml-4">
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
        </div>
      </div>
 
<div className="flex flex-wrap lg:flex-row w-full h-auto bg-orange-400 lg:justify-between lg:px-20 lg:py-16">
        <div className="flex flex-col flex-wrap gap-4 bg-red-500">
          {/* text content start here */}
          <div className="flex flex-col flex-wrap gap-8 items-start">
            <h1 className="font-[700] text-[37px] leading-[40px]">
              Ready to dive into <span className="text-[#271555]">HABOT?</span>
            </h1>
            <p className="w-[520px] font-[300] text-[17.16px] leading-[28px] text-justify">
              Signing up with HABOT opens the door to a world of new
              opportunities and potential for business growth. Gain access to a
              vibrant community of like-minded individuals, unlock valuable
              resources, and take the first step towards realizing your
              entrepreneurial dreams.
            </p>
            <button className="w-[317px] h-[54px] rounded-[5px] bg-[#00732F] border-[1px] border-[#00732F] text-[18px] text-center font-[700] leading-[24px] text-white">
              Sign up Today!
            </button>
          </div>
          {/* text content end here */}
        </div>
        <div className="flex flex-wrap gap-4 bg-red-800 max-w-[520px] h-[39vh] pt-5 ml-4">
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">
            Abu Dhabi
          </button>
        </div>
      </div>
 
bg-red-800
 
bg-red-500
 
bg-orange-400 
 
<div className="flex flex-wrap gap-4 bg-red-800">
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex flex-wrap justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">Abu Dhabi</button>
          <button className="w-[250px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D] flex flex-wrap justify-center items-center font-[500] text-[18.75px] leading-[32px] text-center">Abu Dhabi</button>
        </div>
 

          <button>2</button>
          <button>3</button>
          <button>4</button>
          <button>5</button>
          <button>6</button>
 

        {/* Right Div */}
 

        {/* left div */}
 
//
 

     </div>
 
overflow-x-hidden
 
pl-14
 
pl-14
 
  <input
              className="flex flex-wrap w-auto lg:w-[390px] lg:h-[52px] md:w-[390px] md:h-[52px] sm:w-[390px] sm:h-[52px]
               h-[52px] rounded-[5px] border-b-1 pl-12 bg-no-repeat focus:outline-none text-black justify-center items-center"
              placeholder="Search your required service here"
              style={{
                backgroundImage: `url(${emailIcon})`,
                backgroundRepeat: 'no-repeat',
                backgroundPosition: '15px center', // Icon ko vertically center karne ke liye
                paddingLeft: '45px', // Placeholder aur icon ke beech mein space ke liye
              }}
            />
 
<input
              className="flex flex-wrap lg:w-[390px] lg:h-[52px] md:w-[390px] md:h-[52px] sm:w-[390px] sm:h-[52px]
               h-[52px] rounded-[5px] border-b-1 pl-12 bg-no-repeat focus:outline-none text-black justify-center items-center xs:w-[380px]"
              placeholder="Search your required service here"
              style={{
                backgroundImage: `url(${emailIcon})`,
                backgroundRepeat: 'no-repeat',
                backgroundPosition: '15px center', // Icon ko vertically center karne ke liye
                paddingLeft: '45px', // Placeholder aur icon ke beech mein space ke liye
              }}
            />
 
w-auto
 
            <input
              className="flex flex-wrap md:w-[390px] md:h-[52px] lg:w-[390px] w-auto lg:h-[52px] rounded-[5px] border-b-1 pl-12 bg-no-repeat focus:outline-none text-black justify-center items-center"
              placeholder="Search your required service here"
              style={{
                backgroundImage: `url(${locationIcon})`,
                backgroundRepeat: 'no-repeat',
                backgroundPosition: '15px center', // Icon ko vertically center karne ke liye
                paddingLeft: '45px', // Placeholder aur icon ke beech mein space ke liye
              }}
            />
 
sm:items-center
 
sm:justify-center
 
font-[400] text-[55px] leading-[66px] text-center
 
 <input
              className="flex flex-wrap w-[390px] h-[52px] rounded-[5px] border-b-1 pl-12 bg-no-repeat focus:outline-none text-black justify-center items-center"
              placeholder="Search your required service here"
              style={{
                backgroundImage: `url(${emailIcon})`,
                backgroundRepeat: 'no-repeat',
                backgroundPosition: '15px center', // Icon ko vertically center karne ke liye
                paddingLeft: '45px', // Placeholder aur icon ke beech mein space ke liye
              }}
            />
 
 <input
              className="flex flex-wrap w-[390px] h-[52px] rounded-[5px] border-b-1 pl-12 bg-[url('../Assets/suitcase 1.png')] bg-no-repeat focus:outline-none text-black justify-center items-center"
              placeholder="Search your required service here"
              style={{
                backgroundImage: `url(${emailIcon})`,
                backgroundRepeat: 'no-repeat',
                backgroundPosition: '10px center',
              }}
            />
 
placeholder-gray-500
 
bg-left bg-[20px]
 
 <input
              className="flex flex-wrap w-[390px] h-[52px] rounded-[5px] border bottom-1"
              placeholder="Search your required service here"
              
            />
 
g-left bg-[20px]
 
<input
              className="flex flex-wrap w-[390px] h-[52px] rounded-[5px] border bottom-1"
              placeholder="Search your required service here"
            />
 
 bg-orange-400
 
style={{
        backgroundImage: `url(${bgImage})`,
        backgroundSize: 'cover',
        backgroundPosition: 'center',
      }}
 
https://example.com/your-image.jpg
 
<input/>
 
1
 
md:[509px]
 

    <div className="flex flex-col gap-2 items-center text-center"></div>
 
import React from 'react';
import ReactDOM from 'react-dom/client';
import './input.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

 
SignUpSection
 
lg:w-[75%] lg:ml-0
 

  lg:w-[75%] lg:ml-0"
 

          <div id="nav-bar" className="flex justify-between items-center">
            
          </div>
 
{/* Left: Logo (uncomment if you have logo to display) */}
            {/* <a href="#" className="flex gap-2 items-center">
        <img
          alt="Habot Logo"
          src={logo} // Update with actual logo path
          style={{
            width: "100px",
            height: "auto",
          }}
        />
      </a> */}

            {/* Right: Button to close menu (uncomment if you want to close functionality) */}
            {/* <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={faXmark} style={{ height: "25px" }} />
      </button> */}
 
style={{
            width: '193px',
            height: '50px',
            borderRadius: '5px',
            border: '1px solid #00732F',
            color: '#00732F',
            fontSize: '15px',
            fontWeight: '700',
            lineHeight: '24px',
          }}
 
border border-[#00732F]
 
 style={{
            width: '193px',
            height: '50px',
            borderRadius: '5px',
            border: '1px solid #00732F',
            color: '#00732F',
            fontSize: '15px',
            fontWeight: '700',
            lineHeight: '24px',
          }}
 
 style={{
            width: '193px',
            height: '50px',
            borderRadius: '5px',
            border: '1px solid #00732F',
            color: '#00732F',
            fontSize: '15px',
            fontWeight: '700',
            lineHeight: '24px',
          }}
 
 style={{
            width: '193px',
            height: '50px',
            borderRadius: '5px',
            border: '1px solid #00732F',
            color: '#00732F',
            fontSize: '15px',
            fontWeight: '700',
            lineHeight: '24px',
          }}
 

                style={{
                  marginLeft: '7px',
                  cursor: 'pointer',
                }} // Adjust size as needed
 

          style={{
            width: '181px',
            height: 'auto',
          }}
 
ase-in-out
 
 <nav
      className="px-8 py-2 flex justify-between items-center sticky top-0"
      style={{
        height: '65px',
        background: 'white',
      }}
    >
      <a href="#" className="flex items-center">
        <img
          alt="Habot Logo"
          src={logo}
          style={{
            width: '181px',
            height: 'auto',
          }}
        />
      </a>

      {/* Main navigation links (visible on large screens) */}
      <div
        className={`hidden md:flex md:ml-5 space-x-4 justify-center items-center ${
          isMenuOpen ? 'hidden' : ''
        }`} // Hide when mobile menu is open
        style={{
          color: '#6D6E71',
          lineHeight: '24px',
          fontSize: '15.25px',
          fontWeight: '400',
          gap: '30px',
        }}
      >
        {navigation.map((item) => (
          <div key={item.name} className="flex items-center md:text-[14px]">
            <a
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(item.current)}
            >
              {item.name}
            </a>

            {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
            {item.name === 'Find Service Tags' && (
              <img
                src={dropVec}
                className="md:justify-center"
                alt="Dropdown"
                style={{
                  marginLeft: '7px',
                  cursor: 'pointer',
                }} // Adjust size as needed
              />
            )}
          </div>
        ))}

        <button
          className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
          style={{
            width: '193px',
            height: '50px',
            borderRadius: '5px',
            border: '1px solid #00732F',
            color: '#00732F',
            fontSize: '15px',
            fontWeight: '700',
            lineHeight: '24px',
          }}
        >
          Login / Signup
        </button>
      </div>

      {/* Hamburger button to open/close mobile menu */}
      <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={isMenuOpen ? faXmark : faBars} />
      </button>

      {/* Mobile navigation menu (only shown when isMenuOpen is true) */}
      {isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden h-[40vh] w-[90%] mt-[65px] ml-[20px] rounded-[20px] bg-white border border-gray-200 shadow-lg p-5 
  sm:mt-[65px] sm:mx-auto 
  md:mt-[65px] md:mx-auto md:w-[85%] 
  lg:w-[75%] lg:ml-0"
        >
          <div id="nav-bar" className="flex justify-between items-center">
            {/* Left: Logo (uncomment if you have logo to display) */}
            {/* <a href="#" className="flex gap-2 items-center">
        <img
          alt="Habot Logo"
          src={logo} // Update with actual logo path
          style={{
            width: "100px",
            height: "auto",
          }}
        />
      </a> */}

            {/* Right: Button to close menu (uncomment if you want to close functionality) */}
            {/* <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={faXmark} style={{ height: "25px" }} />
      </button> */}
          </div>

          {/* Mobile menu content */}
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? 'page' : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === 'Find Service Tags' && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: '7px',
                      cursor: 'pointer',
                    }}
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black md:w-[193px] lg:w-[193px] w-[150px]"
              style={{
                height: '50px',
                borderRadius: '5px',
                border: '1px solid #00732F',
                color: '#00732F',
                fontSize: '15px',
                fontWeight: '700',
                lineHeight: '24px',
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
    </nav>
 
 <nav
      className="px-8 py-2 flex justify-between items-center sticky top-0"
      style={{
        height: '65px',
        background: 'white',
      }}
    >
      <a href="#" className="flex items-center">
        <img
          alt="Habot Logo"
          src={logo}
          style={{
            width: '181px',
            height: 'auto',
          }}
        />
      </a>

      {/* Main navigation links (visible on large screens) */}
      <div
        className={`hidden md:flex md:ml-5 space-x-4 justify-center items-center ${
          isMenuOpen ? 'hidden' : ''
        }`} // Hide when mobile menu is open
        style={{
          color: '#6D6E71',
          lineHeight: '24px',
          fontSize: '15.25px',
          fontWeight: '400',
          gap: '30px',
        }}
      >
        {navigation.map((item) => (
          <div key={item.name} className="flex items-center md:text-[14px]">
            <a
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(item.current)}
            >
              {item.name}
            </a>

            {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
            {item.name === 'Find Service Tags' && (
              <img
                src={dropVec}
                className="md:justify-center"
                alt="Dropdown"
                style={{
                  marginLeft: '7px',
                  cursor: 'pointer',
                }} // Adjust size as needed
              />
            )}
          </div>
        ))}

        <button
          className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
          style={{
            width: '193px',
            height: '50px',
            borderRadius: '5px',
            border: '1px solid #00732F',
            color: '#00732F',
            fontSize: '15px',
            fontWeight: '700',
            lineHeight: '24px',
          }}
        >
          Login / Signup
        </button>
      </div>

      {/* Hamburger button to open/close mobile menu */}
      <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={isMenuOpen ? faXmark : faBars} />
      </button>

      {/* Mobile navigation menu (only shown when isMenuOpen is true) */}
      {isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden h-[40vh] w-[90%] mt-[65px] ml-[20px] rounded-[20px] bg-white border border-gray-200 shadow-lg p-5 
  sm:mt-[65px] sm:mx-auto 
  md:mt-[65px] md:mx-auto md:w-[85%] 
  lg:w-[75%] lg:ml-0"
        >
          <div id="nav-bar" className="flex justify-between items-center">
            {/* Left: Logo (uncomment if you have logo to display) */}
            {/* <a href="#" className="flex gap-2 items-center">
        <img
          alt="Habot Logo"
          src={logo} // Update with actual logo path
          style={{
            width: "100px",
            height: "auto",
          }}
        />
      </a> */}

            {/* Right: Button to close menu (uncomment if you want to close functionality) */}
            {/* <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={faXmark} style={{ height: "25px" }} />
      </button> */}
          </div>

          {/* Mobile menu content */}
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? 'page' : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === 'Find Service Tags' && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: '7px',
                      cursor: 'pointer',
                    }}
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black md:w-[193px] lg:w-[193px] w-[150px]"
              style={{
                height: '50px',
                borderRadius: '5px',
                border: '1px solid #00732F',
                color: '#00732F',
                fontSize: '15px',
                fontWeight: '700',
                lineHeight: '24px',
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
    </nav>
 
mt-[65px]
 

                width: '193px',
 

                width: '193px',
 
 <nav
      className="px-8 py-2 flex justify-between items-center sticky top-0"
      style={{
        height: '65px',
        background: 'white',
      }}
    >
      <a href="#" className="flex items-center">
        <img
          alt="Habot Logo"
          src={logo}
          style={{
            width: '181px',
            height: 'auto',
          }}
        />
      </a>

      {/* Main navigation links (visible on large screens) */}
      <div
        className={`hidden md:flex md:ml-5 space-x-4 justify-center items-center ${
          isMenuOpen ? 'hidden' : ''
        }`} // Hide when mobile menu is open
        style={{
          color: '#6D6E71',
          lineHeight: '24px',
          fontSize: '15.25px',
          fontWeight: '400',
          gap: '30px',
        }}
      >
        {navigation.map((item) => (
          <div key={item.name} className="flex items-center md:text-[14px]">
            <a
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(item.current)}
            >
              {item.name}
            </a>

            {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
            {item.name === 'Find Service Tags' && (
              <img
                src={dropVec}
                className="md:justify-center"
                alt="Dropdown"
                style={{
                  marginLeft: '7px',
                  cursor: 'pointer',
                }} // Adjust size as needed
              />
            )}
          </div>
        ))}

        <button
          className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
          style={{
            width: '193px',
            height: '50px',
            borderRadius: '5px',
            border: '1px solid #00732F',
            color: '#00732F',
            fontSize: '15px',
            fontWeight: '700',
            lineHeight: '24px',
          }}
        >
          Login / Signup
        </button>
      </div>

      {/* Hamburger button to open/close mobile menu */}
      <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={isMenuOpen ? faXmark : faBars} />
      </button>

      {/* Mobile navigation menu (only shown when isMenuOpen is true) */}
      {isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden h-[40vh] w-[90%] mt-[65px] ml-[20px] rounded-[20px] bg-white border border-gray-200 shadow-lg p-5 
  sm:mt-[65px] sm:mx-auto 
  md:mt-[65px] md:mx-auto md:w-[85%] 
  lg:w-[75%] lg:ml-0"
        >
          <div id="nav-bar" className="flex justify-between items-center">
            {/* Left: Logo (uncomment if you have logo to display) */}
            {/* <a href="#" className="flex gap-2 items-center">
        <img
          alt="Habot Logo"
          src={logo} // Update with actual logo path
          style={{
            width: "100px",
            height: "auto",
          }}
        />
      </a> */}

            {/* Right: Button to close menu (uncomment if you want to close functionality) */}
            {/* <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={faXmark} style={{ height: "25px" }} />
      </button> */}
          </div>

          {/* Mobile menu content */}
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? 'page' : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === 'Find Service Tags' && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: '7px',
                      cursor: 'pointer',
                    }}
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black"
              style={{
                width: '193px',
                height: '50px',
                borderRadius: '5px',
                border: '1px solid #00732F',
                color: '#00732F',
                fontSize: '15px',
                fontWeight: '700',
                lineHeight: '24px',
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
    </nav>
 
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden"
          style={{
            height: '40vh',
            width: '90%', // width as per your original setup
            marginTop: '65px',
            marginLeft: '20px',
            borderRadius: '20px', // Rounded corners
            backgroundColor: 'white', // White background
            border: '1px solid rgba(0, 0, 0, 0.1)', // Light border with a soft color
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.3)', // Soft shadow effect
            padding: '20px', // Padding inside the box
          }}
        >
 
 {isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden"
          style={{
            height: '40vh',
            width: '90%', // width as per your original setup
            marginTop: '65px',
            marginLeft: '20px',
            borderRadius: '20px', // Rounded corners
            backgroundColor: 'white', // White background
            border: '1px solid rgba(0, 0, 0, 0.1)', // Light border with a soft color
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.3)', // Soft shadow effect
            padding: '20px', // Padding inside the box
          }}
        >
          <div id="nav-bar" className="flex justify-between items-center">
            {/* Left: Logo (uncomment if you have logo to display) */}
            {/* <a href="#" className="flex gap-2 items-center">
        <img
          alt="Habot Logo"
          src={logo} // Update with actual logo path
          style={{
            width: "100px",
            height: "auto",
          }}
        />
      </a> */}

            {/* Right: Button to close menu (uncomment if you want to close functionality) */}
            {/* <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={faXmark} style={{ height: "25px" }} />
      </button> */}
          </div>

          {/* Mobile menu content */}
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? 'page' : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === 'Find Service Tags' && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: '7px',
                      cursor: 'pointer',
                    }}
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black"
              style={{
                width: '193px',
                height: '50px',
                borderRadius: '5px',
                border: '1px solid #00732F',
                color: '#00732F',
                fontSize: '15px',
                fontWeight: '700',
                lineHeight: '24px',
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
 
{isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden"
          style={{
            height: "40vh",
            width: "90%", // width as per your original setup
            marginTop: "65px",
            marginLeft: "20px",
            borderRadius: "20px", // Rounded corners
            backgroundColor: "white", // White background
            border: "1px solid rgba(0, 0, 0, 0.1)", // Light border with a soft color
            boxShadow: "0 4px 8px rgba(0, 0, 0, 0.3)", // Soft shadow effect
            padding: "20px", // Padding inside the box
          }}
        >
          <div id="nav-bar" className="flex justify-between items-center">
            {/* Left: Logo (uncomment if you have logo to display) */}
            {/* <a href="#" className="flex gap-2 items-center">
        <img
          alt="Habot Logo"
          src={logo} // Update with actual logo path
          style={{
            width: "100px",
            height: "auto",
          }}
        />
      </a> */}

            {/* Right: Button to close menu (uncomment if you want to close functionality) */}
            {/* <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={faXmark} style={{ height: "25px" }} />
      </button> */}
          </div>

          {/* Mobile menu content */}
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? "page" : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === "Find Service Tags" && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: "7px",
                      cursor: "pointer",
                    }}
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black"
              style={{
                width: "193px",
                height: "50px",
                borderRadius: "5px",
                border: "1px solid #00732F",
                color: "#00732F",
                fontSize: "15px",
                fontWeight: "700",
                lineHeight: "24px",
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
 

        background: "gray",
 
bg-orange-500
 

import YtEmbed from './YtEmbeded';
 
bg-stone-700
 
bg-orange-700
 

      <>
        {/* <div className="w-[90%] h-auto md:h-[523px] mx-auto flex flex-col lg:flex-row lg:mb-2 bg-[#072F57] p-4 md:p-10 md:gap-10 ">
        <div className="w-full lg:ml-4 md:w-1/2 flex justify-center items-center bg-blue-600">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}`}
            alt=""
            style={{
              top: 0,
              left: 0,
              width: '550px',
              height: '310px',
              borderRadius: '5px',
            }}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            title="YouTube video"
          ></iframe>
        </div>

        <div className="w-full md:w-1/2 flex flex-col  lg:h-[310px] md:mt-16 xl:ml-[30px] ">
          <div className="flex flex-row lg:gap-10 bg-red-500 flex-wrap">
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] md:leading-[32px] text-[#EB7150]">
              Buyer
              <div className="md:w-[80px] lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] :leading-[32px] bg-gray-400 text-white">
              Supplier
              <div className="md:w-[100px] lg:w-[202px]  mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div className="xl:mt-4 bg-green-500">
            <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full md:w-[90%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Choose among the suppliers based on the{' '}
                <span className="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
      </div> */}

        {/* Tailwind code */}
        {/* <div className="h-auto md:h-[523px] w-[90%] mx-auto flex bg-[#072F57] flex-wrap flex-col justify-center">
        <div className="w-full lg:w-full h-auto lg:h-[523px] flex flex-wrap mx-auto md:gap-0 md:flex-row lg:flex-row flex-col lg:gap-10">
          <div className="h-auto lg:w-[50%] w-full flex flex-wrap items-center justify-center">
            <iframe
              src={`https://www.youtube.com/embed/${videoId}`}
              alt=""
              className="w-full lg:w-[550px] lg:h-[310px] rounded-lg"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              title="YouTube video"
            ></iframe>
          </div>

          <div className="flex flex-col lg:mt-0 lg:ml-10">
            <div className="mb-4 flex flex-row md:gap-10 justify-center lg:justify-start">
              <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-[#EB7150]">
                Buyer
                <div className="md:w-[100px] lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
              <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-white">
                Supplier
                <div className="md:w-[100px] lg:w-[202px] mt-[10px] h-[0.5px]"></div>
              </h1>
            </div>

            <div className="flex flex-col gap-3 mt-4">
              <div className="flex items-start">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Post your requirements.
                </div>
              </div>
              <div className="flex items-start">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Sit back for multiple suppliers to contact you.
                </div>
              </div>
              <div className="flex items-start">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Choose among the suppliers based on the{' '}
                  <span className="block mt-2">rating and reviews.</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div> */}
      </>

 
<div className="lg:w-[100%] md:w-[35%] sm:w-[50%] w-[100%] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
 
 <div className="lg:w-[100%] h-auto flex lg:flex-col flex-row lg:mt-8">
              <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Post your requirements.
                </div>
              </div>
              <div className="flex items-start mb-3 w-full md:w-[100%] xl:w-full">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Sit back for multiple suppliers to contact you.
                </div>
              </div>
              <div className="flex items-start mb-3 w-full">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Choose among the suppliers based on the{' '}
                  <span className="inline-block">rating and reviews.</span>
                </div>
              </div>
            </div>
 
bg-orange-400
 
 <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Choose among the suppliers based on the rating and reviews.
              </div>
            </div>
 
 <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Choose among the suppliers based on the rating and reviews.
              </div>
            </div>
 

                <span className="mt-2"></span>
 

                </div>
 

                <div>
 
lg:px-20
 
lg:px-20
 
<div className="w-full lg:w-[100%] lg:h-[47px] h-auto flex-wrap justify-between flex lg:px-20 ">
                <h1 className="font-[700] text-[26px] leading-[32px] text-[#EB7150] ">
                  Buyer
                  <div className="lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
                </h1>
                <h1 className="font-[700] text-[26px] leading-[32px] text-[white]">
                  Supplier
                  <div className=""></div>
                </h1>
              </div>
 
 border-b-4 border-[#EB7150]
 
md:w-[80px]
 

                  <div className=""></div>
 
md:w-[100px] lg:w-[202px]  mt-[10px] h-[0.5px]
 
text-[20px] text-center md:text-[26px] font-[700] :leading-[32px] bg-gray-400 text-white
 
md:w-[80px] lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]
 
text-[20px] text-center md:text-[26px] font-[700] md:leading-[32px] text-[#EB7150]
 

            <div className="flex lg:flex-row lg:justify-between lg:items-center">
 

            </div>
 

            <div className="flex lg:flex-row lg:justify-between lg:items-center">
 
<h1></h1>
 
md
 

          </div>
 

          <div className="">
 

            style={{
            }}
 

              top: 0,
              left: 0,
              width: '',
              height: '310px',
              borderRadius: '5px',
 

      <div className></div>
 
<div className="w-full md:w-1/2 flex flex-col  lg:h-[310px] md:mt-16 xl:ml-[30px] ">
          <div className="flex flex-row lg:gap-10 bg-red-500 flex-wrap">
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] md:leading-[32px] text-[#EB7150]">
              Buyer
              <div className="md:w-[80px] lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] lg:leading-[32px] bg-gray-400 text-white">
              Supplier
              <div className="md:w-[100px] lg:w-[202px]  mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div className="xl:mt-4 bg-green-500">
            <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full md:w-[90%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Choose among the suppliers based on the{' '}
                <span className="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
 
md:text-[26px]
 
 md:w-[90%]
 
 md:w-[90%]
 
mb-4
 
 <div className="flex flex-col lg:flex-row items-center justify-center bg-[#072F57] p-6">
        {/* Video Section */}
        <div className="w-full md:w-1/2 p-4">
          <div className="aspect-w-16 aspect-h-9">
            <iframe
              className="w-full h-full lg:h-[310px] lg:w-[550px] flex flex-wrap"
              src={`https://www.youtube.com/embed/${videoId}`}
              title="Video"
              frameBorder="0"
              allowFullScreen
            ></iframe>
          </div>
        </div>

        {/* Content Section */}
        <div className="w-full md:w-1/2 p-4 text-white">
        <div className="w-full md:w-1/2 flex flex-col  lg:h-[310px] md:mt-16 xl:ml-[30px] ">
          <div className="mb-4 flex flex-row md:gap-10 ">
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-[#EB7150]">
              Buyer
              <div className="md:w-[100px] lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-white">
              Supplier
              <div className="md:w-[100px] lg:w-[202px]  mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div className="xl:mt-4">
            <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full md:w-[90%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Choose among the suppliers based on the{' '}
                <span className="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
        </div>
      </div>
 
 <div className="text-center md:text-left bg-red-500 flex flex-col flex-wrap">
            <h2 className="text-orange-500 text-lg font-bold mb-4">
              Buyer <span className="text-gray-300">Supplier</span>
            </h2>
            <ul className="list-disc ml-6 space-y-2">
              <li>Post your requirements.</li>
              <li>Sit back for multiple suppliers to contact you.</li>
              <li>
                Choose among the suppliers based on the ratings and reviews.
              </li>
            </ul>
          </div>
 
md:text-left
 
https://www.youtube.com/embed/VIDEO_ID
 

import React from "react";

const ResponsiveSection = () => {
  return (
 

export default ResponsiveSection;
 
<div className="h-auto md:h-[523px] w-[90%] mx-auto flex bg-[#072F57] flex-wrap flex-col justify-center">
        <div className="w-full  lg:w-[90%] h-auto lg:h-[523px] flex flex-wrap mx-auto md:gap-0 md:flex-row lg:flex-row flex-col lg:gap-10">
          <div className="h-auto lg:w-[50%] w-full flex flex-wrap items-center justify-center">
            <iframe
              src={`https://www.youtube.com/embed/${videoId}`}
              alt=""
              className="w-full lg:w-[550px] lg:h-[310px] rounded-lg"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              title="YouTube video"
            ></iframe>
          </div>

          <div className="flex flex-col lg:mt-[100px] lg:ml-10">
            <div className="mb-4 flex flex-row md:gap-10 justify-center lg:justify-start">
              <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-[#EB7150]">
                Buyer
                <div className="md:w-[100px] lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
              <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-white">
                Supplier
                <div className="md:w-[100px] lg:w-[202px] mt-[10px] h-[0.5px]"></div>
              </h1>
            </div>

            <div className="flex flex-col gap-3 mt-4">
              <div className="flex items-start">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Post your requirements.
                </div>
              </div>
              <div className="flex items-start">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Sit back for multiple suppliers to contact you.
                </div>
              </div>
              <div className="flex items-start">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Choose among the suppliers based on the{' '}
                  <span className="block mt-2">rating and reviews.</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
 
<div className="h-auto md:h-[523px] w-[90%] mx-auto flex bg-[#072F57] flex-wrap flex-col justify-center">
        <div className="w-full  lg:w-[90%] h-auto lg:h-[523px] flex flex-wrap mx-auto md:gap-0 md:flex-row lg:flex-row flex-col lg:gap-10">
          <div className="h-auto lg:w-[50%] w-full flex flex-wrap items-center justify-center">
            <iframe
              src={`https://www.youtube.com/embed/${videoId}`}
              alt=""
              className="w-full lg:w-[550px] lg:h-[310px] rounded-lg"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              title="YouTube video"
            ></iframe>
          </div>

          <div className="flex flex-col lg:mt-[100px] lg:ml-10">
            <div className="mb-4 flex flex-row md:gap-10 justify-center lg:justify-start">
              <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-[#EB7150]">
                Buyer
                <div className="md:w-[100px] lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
              <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-white">
                Supplier
                <div className="md:w-[100px] lg:w-[202px] mt-[10px] h-[0.5px]"></div>
              </h1>
            </div>

            <div className="flex flex-col gap-3 mt-4">
              <div className="flex items-start">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Post your requirements.
                </div>
              </div>
              <div className="flex items-start">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Sit back for multiple suppliers to contact you.
                </div>
              </div>
              <div className="flex items-start">
                <img
                  src={check}
                  className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
                />
                <div className="flex-1 text-white text-[18px] font-[500]">
                  Choose among the suppliers based on the{' '}
                  <span className="block mt-2">rating and reviews.</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
 
 <div className="h-auto md:h-[523px] w-[90%] mx-auto flex bg-[#072F57] flex-wrap flex-col justify-center ">
        <div className="w-[90%] h-auto lg:h-[523px]  flex flex-wrap mx-auto md:flex-row lg:flex-row flex-col md:gap-10">
          <div className="h-auto lg:w-[50%] w-full flex flex-wrap items-center justify-center">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}`}
            alt=""
            style={{
              top: 0,
              left: 0,
              width: '550px',
              height: '310px',
              borderRadius: '5px',
            }}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            title="YouTube video"
          ></iframe>
          </div>
          <div className="flex flex-col mt-28">
          <div className="mb-4 flex flex-row md:gap-10 ">
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-[#EB7150]">
              Buyer
              <div className="md:w-[100px] lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-white">
              Supplier
              <div className="md:w-[100px] lg:w-[202px]  mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

            <div className="flex items-start mb-3 md:w-[80%] lg:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full md:w-[90%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Choose among the suppliers based on the{' '}
                <span className="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
      </div>
 
h-auto
 

          <div className="">
 

          </div>
 

          <div className="">
 

          </div>
 

          <div className="">
 
 w-full flex flex-wrap
 
bg-orange-600
 
bg-orange-300
 
gap-[40px]
 
 <div className="max-w-md h-auto md:h-[523px] flex-wrap mx-auto bg-[#072F57] rounded-xl shadow-md overflow-hidden md:max-w-[90%]">
        <div className="md:flex">
          <div className="md:shrink-0">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}`}
            alt=""
            style={{
              top: 0,
              left: 0,
              width: '550px',
              height: '310px',
              borderRadius: '5px',
            }}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            title="YouTube video"
          ></iframe>
          </div>
          <div className="p-8">
          <div className="mb-4 flex flex-row md:gap-10 ">
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-[#EB7150]">
              Buyer
              <div className="md:w-[100px] lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-white">
              Supplier
              <div className="md:w-[100px] lg:w-[202px]  mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div className="xl:mt-4">
            <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full md:w-[90%] xl:w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-[18px] font-[500]">
                Choose among the suppliers based on the{' '}
                <span className="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
          </div>
        </div>
      </div>
 
 <div className="uppercase tracking-wide text-sm text-indigo-500 font-semibold">
              Company retreats
            </div>
            <a
              href="#"
              className="block mt-1 text-lg leading-tight font-medium text-black hover:underline"
            >
              Incredible accommodation for your team
            </a>
            <p className="mt-2 text-slate-500">
              Looking to take your team away on a retreat to enjoy awesome food
              and take in some sunshine? We have a list of places to do just
              that.
            </p>
 
<img
              className="h-48 w-full object-cover md:h-full md:w-48"
              src="/img/building.jpg"
              alt="Modern building architecture"
            />
 
 <img
              className="h-48 w-full object-cover md:h-full md:w-48"
              src="/img/building.jpg"
              alt="Modern building architecture"
            />
 
class
 
bg-red-500
 
 bg-orange-400
 

        </div>
 
<div className="flex flex-col md:flex-row lg:flex-row flex-wrap md:gap-16 lg:gap-16 md:justify-center sm:justify-center">
 
flex flex-col gap-[7px] mt-[20px]
 
flex flex-col gap-[7px] mt-[20px]
 
 <div className="w-full px-4 flex flex-col md:flex-row flex-wrap bg-[#123557] text-white md:h-[212px] h-auto items-center  justify-center">
      <div className="w-full md:w-[1200px] flex flex-col md:flex-row flex-wrap justify-between md:px-2 bg-[gray] text-white lg:h-[150px]  h-auto border-t-[1px] border-b-[1px] border-solid border-[#FFFFFF33] ">
        <div className="flex flex-row flex-wrap gap-16 bg-orange-400">
          <div className="justify-center flex flex-col gap-2 mt-6">
            <img src={footerLogo} alt="logo" className="w-[206px]" />
            <p className="text-16px font-[300] leading-[32px] ml-3 mt">
              © R Singhania
            </p>
          </div>
          <div className="flex flex-col gap-[7px] mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">
              Company
            </h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">About</p>
              <p className="text-[14px] font-[300] leading-[25px]">FAQ</p>
            </div>
          </div>
          <div className="flex flex-col gap-[7px]  mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">Terms</h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">
                Data privacy
              </p>
              <p className="text-[14px] font-[300] leading-[25px]">Terms</p>
              <p className="text-[14px] font-[300] leading-[25px]">
                Accessibility
              </p>
            </div>
          </div>
          <div className="flex flex-col gap-[7px]  mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">
              Related
            </h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">
                Find Buyer
              </p>
              <p className="text-[14px] font-[300] leading-[25px]">Feedback</p>
            </div>
          </div>
        </div>

        <div className="flex flex-row flex-wrap gap-4 items-center pl-4 bg-red-500">
          <a href="#">
            <img src={linkdln} />
          </a>
          <a href="#">
            <img src={x} />
          </a>
          <a href="#">
            <img src={fb} />
          </a>
          <a href="#">
            <img src={instagram} />
          </a>
        </div>
      </div>
    </div>
 
 <div className="w-full px-4 flex flex-col md:flex-row flex-wrap bg-[#123557] text-white md:h-[212px] h-auto items-center  justify-center">
      <div className="w-full md:w-[1200px] flex flex-col md:flex-row flex-wrap justify-between md:px-2 bg-[gray] text-white lg:h-[150px]  h-auto border-t-[1px] border-b-[1px] border-solid border-[#FFFFFF33] ">
        <div className="flex flex-row flex-wrap gap-16 bg-orange-400">
          <div className="justify-center flex flex-col gap-2 mt-6">
            <img src={footerLogo} alt="logo" className="w-[206px]" />
            <p className="text-16px font-[300] leading-[32px] ml-3 mt">
              © R Singhania
            </p>
          </div>
          <div className="flex flex-col gap-[7px] mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">
              Company
            </h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">About</p>
              <p className="text-[14px] font-[300] leading-[25px]">FAQ</p>
            </div>
          </div>
          <div className="flex flex-col gap-[7px]  mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">Terms</h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">
                Data privacy
              </p>
              <p className="text-[14px] font-[300] leading-[25px]">Terms</p>
              <p className="text-[14px] font-[300] leading-[25px]">
                Accessibility
              </p>
            </div>
          </div>
          <div className="flex flex-col gap-[7px]  mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">
              Related
            </h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">
                Find Buyer
              </p>
              <p className="text-[14px] font-[300] leading-[25px]">Feedback</p>
            </div>
          </div>
        </div>

        <div className="flex flex-row flex-wrap gap-4 items-center pl-4 bg-red-500">
          <a href="#">
            <img src={linkdln} />
          </a>
          <a href="#">
            <img src={x} />
          </a>
          <a href="#">
            <img src={fb} />
          </a>
          <a href="#">
            <img src={instagram} />
          </a>
        </div>
      </div>
    </div>
 
 <div className="w-full px-4 flex flex-col md:flex-row flex-wrap bg-[#123557] text-white md:h-[212px] h-auto items-center  justify-center">
      <div className="w-full md:w-[1200px] flex flex-col md:flex-row flex-wrap justify-between md:px-2 bg-[gray] text-white lg:h-[150px]  h-auto border-t-[1px] border-b-[1px] border-solid border-[#FFFFFF33] ">
        <div className="flex flex-row flex-wrap gap-16 bg-orange-400">
          <div className="justify-center flex flex-col gap-2 mt-6">
            <img src={footerLogo} alt="logo" className="w-[206px]" />
            <p className="text-16px font-[300] leading-[32px] ml-3 mt">
              © R Singhania
            </p>
          </div>
          <div className="flex flex-col gap-[7px] mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">
              Company
            </h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">About</p>
              <p className="text-[14px] font-[300] leading-[25px]">FAQ</p>
            </div>
          </div>
          <div className="flex flex-col gap-[7px]  mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">Terms</h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">
                Data privacy
              </p>
              <p className="text-[14px] font-[300] leading-[25px]">Terms</p>
              <p className="text-[14px] font-[300] leading-[25px]">
                Accessibility
              </p>
            </div>
          </div>
          <div className="flex flex-col gap-[7px]  mt-[20px]">
            <h1 className="text-[15.13px] font-[700] leading-[24px]">
              Related
            </h1>
            <div className="flex flex-col gap-[2px]">
              <p className="text-[14px] font-[300] leading-[25px]">
                Find Buyer
              </p>
              <p className="text-[14px] font-[300] leading-[25px]">Feedback</p>
            </div>
          </div>
        </div>

        <div className="flex flex-row flex-wrap gap-4 items-center pl-4 bg-red-500">
          <a href="#">
            <img src={linkdln} />
          </a>
          <a href="#">
            <img src={x} />
          </a>
          <a href="#">
            <img src={fb} />
          </a>
          <a href="#">
            <img src={instagram} />
          </a>
        </div>
      </div>
    </div>
 
md:px-2
 
 border
 
mt-[20px]
 
d:px-12
 
bg-[#123557] text-white
 
md:px-12
 
border border-[1px solid black]
 
 <div className="flex flex-col gap-4">
          <h1 className="text-[15.13px] font-[700] leading-[24px]">Related</h1>
          <p className="text-[14px] font-[300] leading-[25px]">Find Buyer</p>
          <p className="text-[14px] font-[300] leading-[25px]">Feedback</p>
        </div>
 
        <div className="flex flex-col gap-[7px] mt-2">
          <h1 className="text-[15.13px] font-[700] leading-[24px]">Company</h1>
          <div className="flex flex-col gap-[2px]">
            <p className="text-[14px] font-[300] leading-[25px]">About</p>
            <p className="text-[14px] font-[300] leading-[25px]">FAQ</p>
          </div>
        </div>
 
<img src=" " alt="logo1"></img>
        <img src=" " alt="logo2"></img>
        <img src=" " alt="logo3"></img>
        <img src=" " alt="logo4"></img>
 

        <div className="">
          <h1>terms</h1>
          <p>p1</p>
        </div>
        <div className="">
          <h1>releted</h1>
          <p>p1</p>
        </div>
 
  <div className="w-full h-[200px] flex flex-col md:flex-row justify-between items-center bg-[#E8FBFF] md:pl-[100px] md:pr-[140px] px-4 py-4">
    <h1 className="text-[37px] font-[600] leading-[40px] text-center md:text-left">
      Let Suppliers Find You
    </h1>
    <button className="w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] mt-4 md:mt-0">
  Get Verified
</button>

  </div>
 
<button className="w-[216px] md:w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] mt-4 md:mt-0">
      Get Verified
    </button>
 
 <div className="w-full h-[200px] flex flex-wrap bg-[#E8FBFF] justify-between items-center md:pl-[100px] md:pr-[140px]">
      <h1 className="text-[37px] font-[600] leading-[40px]">
        Let Suppliers Find You
      </h1>
      <button className="w-[216px] h-[54px] rounded-[5px] bg-[#EB7150] ">
        Get Verified
      </button>
    </div>
 
px-24
 

      </div>
 

      <div className="flex flex-col justify-center items bg-orange-950 w-full md:w-[50%]">
 

      </div>
 

      <div className="flex flex-col justify-center items bg-orange-300 w-full md:w-[50%]">
 

      </div>
 

      <div className="flex flex-col justify-center items bg-orange-950 w-full md:w-[50%]">
 

      <div className="flex flex-col justify-center items bg-orange-300 w-full md:w-[50%]">
 
<h1 className="text-[37px] font-[600] leading-[40px] text-center">
          Let Suppliers Find You
        </h1>
 
text-center
 
 <div className="w-full h-[200px] flex flex-wrap flex-cols-2 bg-[#E8FBFF]">
      <div className="flex flex-wrap flex-col justify-center items bg-orange-300 w-[50%]">
        <h1 className="text-[37px] font-[600] leading-[40px]">
          Let Suppliers Find You
        </h1>
      </div>
      <div className="flex flex-wrap flex-col justify-center items bg-orange-950 w-[50%] ">
        <h1 className="text-[37px] font-[600] leading-[40px]">
          Let Suppliers Find You
        </h1>
      </div>
    </div>
 
border border-[5px solid gray]
 
md:bg-[#E8FBFF]
 
border border-[5px solid gray]
 
border border-[5px solid gray]
 
border border-[5px solid gray]
 
border border-[5px solid
 
border border-[5px solid gray]
 
Select Your Role and Sign Up
 

          <div className=" flex flex-wrap flex-col items-center  w-[350px] h-[224px] border border-[5px solid gray]">
            <p className="text-[20px] font-[500]">
              Select Your Role and Sign Up
            </p>
          </div>
          <div className=" flex flex-wrap flex-col items-center  w-[350px] h-[224px] border border-[5px solid gray]">
            Select Your Role and Sign Up
          </div>
          <div className=" flex flex-wrap flex-col items-center  w-[350px] h-[224px] border border-[5px solid gray]">
            Select Your Role and Sign Up
          </div>
          <div className=" flex flex-wrap flex-col items-center  w-[350px] h-[224px] border border-[5px solid gray]">
            Select Your Role and Sign Up
          </div>
          <div className=" flex flex-wrap flex-col items-center w-[350px] h-[224px] border border-[5px solid gray]">
            Select Your Role and Sign Up
          </div>
 
 Select Your Role and Sign Up
 
400px
 
Buyers Post
 
mb-12
 
mb-12
 
mb-12
 
justify-around
 
w-[400px]
 

                <div className=""></div>
 
text-lg
 
text-lg
 
lg
 

              style={{
                width: '18px',
                height:"18px"
              }}
 
bg-red-500
 
leading-7
 
leading-7
 
  <div className="w-[90%] h-auto md:h-[523px] mx-auto flex flex-col md:flex-row bg-[#072F57] p-4 md:p-10 md:gap-10 ">
        <div className="w-full lg:ml-4 md:w-1/2 flex justify-center items-center">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}`}
            alt=""
            style={{
              top: 0,
              left: 0,
              width: '530px',
              height: '295px',
              borderRadius: '5px',
            }}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            title="YouTube video"
          ></iframe>
        </div>

        <div className="w-full md:w-1/2 flex flex-col md:mt-20 xl:ml-[50px] ">
          <div className="mb-4 flex flex-row md:gap-10 ">
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-[#EB7150]">
              Buyer
              <div className="md:w-[100px] lg:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-white">
              Supplier
              <div className="md:w-[100px] lg:w-[202px]  mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div className="xl:mt-6">
          <div className="flex items-start mb-3 md:w-[80%] xl:w-full">
            <img
              src={check}
              className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
            />
            <div className="flex-1 text-white text-lg leading-6">
              Post your requirements.
            </div>
          </div>
          <div className="flex items-start mb-3 w-full md:w-[90%] xl:w-full">
            <img
              src={check}
              className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
            />
            <div className="flex-1 text-white text-lg leading-6">
              Sit back for multiple suppliers to contact you.
            </div>
          </div>
          <div className="flex items-start mb-3 w-full">
            <img
              src={check}
              className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
            />
            <div className="flex-1 text-white text-lg leading-6">
              Choose among the suppliers based on the{' '}
              <span className="block mt-2">rating and reviews.</span>
            </div>
          </div>
          </div>
        </div>
      </div>
 
bg-red-400
 
bg-red-400
 
justify-center
 

    //  screens: {
    //     'sm': '567px',   // For small mobile devices
    //     'md': '796px',   // For tablets
    //     'lg': '1024px',  // For laptops
    //     '2xl': '1023px', // For larger desktops
    //   },
 
w-[80px]
 
 <div className="w-full md:w-1/2 flex flex-col justify-center ">
          <div className="mb-4 flex flex-row gap-4">
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-[#EB7150]">
              Buyer
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-white">
              Supplier
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div className="flex items-start mb-3 w-full">
            <img
              src={check}
              className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
            />
            <div className="flex-1 text-white text-lg leading-6">
              Post your requirements.
            </div>
          </div>
          <div className="flex items-start mb-3 w-full">
            <img
              src={check}
              className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
            />
            <div className="flex-1 text-white text-lg leading-6">
              Sit back for multiple suppliers to contact you.
            </div>
          </div>
          <div className="flex items-start mb-3 w-full">
            <img
              src={check}
              className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
            />
            <div className="flex-1 text-white text-lg leading-6">
              Choose among the suppliers based on the{' '}
              <span className="block mt-2">rating and reviews.</span>
            </div>
          </div>
        </div>
 
 <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-[#EB7150]">
              Buyer
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] text-center md:text-[26px] font-[700] leading-[32px] text-white">
              Supplier
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
            </h1>
 
 <div className="w-[90%] h-[523px] mx-auto flex flex-col md:flex-row bg-[#072F57] p-4 md:p-10 gap-6">
 
p-4 md:p-10 
 
<iframe
      src={`https://www.youtube.com/embed/${videoId}`}
      alt=""
      className="w-full h-[295px] md:h-[523px] rounded-[5px]"
      frameBorder="0"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
      allowFullScreen
      title="YouTube video"
    ></iframe>
 
<div className="space-y-4 text-lg leading-6">
      <p className="flex items-start text-white">
        <img
          src={check}
          className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
        />
        Post your requirements.
      </p>
      <p className="flex items-start text-white">
        <img
          src={check}
          className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
        />
        Sit back for multiple suppliers to contact you.
      </p>
      <p className="flex items-start text-white">
        <img
          src={check}
          className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
        />
        Choose among the suppliers based on the 
        <span className="block mt-2">rating and reviews.</span>
      </p>
    </div>
 
 <div className="mb-4">
      <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-[#EB7150]">
        Buyer
        <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
      </h1>
      <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-white">
        Supplier
        <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
      </h1>
    </div>
 
 <div className="w-[90%] flex-col  mx-auto md:h-[523px] bg-[#072F57]  md:mt-10 md:flex-row flex">
        <div className="md:pl-[60px] md:pt-[100px] sm:px-4 sm:pt-6 sm:items-center ">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}`}
            alt=""
            style={{
              top: 0,
              left: 0,
              width: '530px',
              height: '295px',
              borderRadius: '5px',
            }}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            title="YouTube video"
          ></iframe>
        </div>

        <div className="md:px-12 md:pt-28 md-full">
          <div className="flex flex-col md:flex-row items-center bg-red-500 md:items-start md:gap-[40px]">
            <h1 className="text-[20px] md:text-[26px] font-[700]  leading-[32px] text-center text-[#EB7150]">
              Buyer
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
              Supplier
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div className="flex flex-col gap-1 mt-8 bg-lime-400">
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Choose among the suppliers based on the{' '}
                <span className="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
      </div>
 
  <div className="md:px-12 md:pt-28 md-full">
          <div className="flex flex-col md:flex-row items-center bg-red-500 md:items-start md:gap-[40px]">
            <h1 className="text-[20px] md:text-[26px] font-[700]  leading-[32px] text-center text-[#EB7150]">
              Buyer
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
              Supplier
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div className="flex flex-col gap-1 mt-8 bg-lime-400">
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Choose among the suppliers based on the{' '}
                <span className="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
 
<div className="md:w-[90%]  mx-auto md:h-[523px] bg-[#072F57]  md:mt-10 md:flex-row flex">
 
  <div className="md:w-[90%]  mx-auto md:h-[523px] bg-[#072F57]  md:mt-10 md:flex-row flex">
        <div className="md:pl-[60px] md:pt-[100px] sm:px-4 sm:pt-6 sm:items-center ">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}`}
            alt=""
            style={{
              top: 0,
              left: 0,
              width: '530px',
              height: '295px',
              borderRadius: '5px',
            }}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            title="YouTube video"
          ></iframe>
        </div>

        <div className="md:px-12 md:pt-28 md-full">
          <div className="flex flex-col md:flex-row items-center bg-red-500 md:items-start md:gap-[40px]">
            <h1 className="text-[20px] md:text-[26px] font-[700]  leading-[32px] text-center text-[#EB7150]">
              Buyer
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
              Supplier
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div className="flex flex-col gap-1 mt-8 bg-lime-400">
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Choose among the suppliers based on the{' '}
                <span className="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
      </div>
 

      </div>
 
<div className="md:w-[90%]  mx-auto md:h-[523px] bg-[#072F57]  md:mt-10 md:flex-row flex flex-col">
        <div className="md:pl-[60px] md:pt-[100px] sm:px-4 sm:pt-6 sm:items-center ">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}`}
            alt=""
            style={{
              top: 0,
              left: 0,
              width: '530px',
              height: '295px',
              borderRadius: '5px',
            }}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            title="YouTube video"
          ></iframe>
        </div>

        <div className="md:px-12 md:pt-28 w-full">
          <div className="flex flex-col md:flex-row items-center bg-red-500 md:items-start md:gap-[40px]">
            <h1 className="text-[20px] md:text-[26px] font-[700]  leading-[32px] text-center text-[#EB7150]">
              Buyer
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
              Supplier
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div className="flex flex-col gap-1 mt-8 bg-lime-400">
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Post your requirements.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div className="flex items-start mb-3 w-full">
              <img
                src={check}
                className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div className="flex-1 text-white text-lg leading-6">
                Choose among the suppliers based on the{' '}
                <span className="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
 
mx-auto
 
mx-auto
 
    <div className="md:w-[90%] md:h-[523px] bg-[#072F57] mx-auto md:mt-10 md:flex-row flex flex-col">
 
bg-[#072F57] 
 
<div className="md:pl-[60px] md:pt-[100px] px-4 pt-6 items-center w-full">
      <iframe
        src={`https://www.youtube.com/embed/${videoId}`}
        alt=""
        className="w-full h-[295px] md:h-[523px] rounded-[5px]"
        frameBorder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowFullScreen
        title="YouTube video"
      ></iframe>
    </div>
 
 <div>
      <div className="w-[90%] md:h-[523px] bg-[#072F57] mx-auto md:mt-10 md:flex-row flex flex-col">
        

        <div className="md:px-12 md:pt-28 w-full">
  <div className="flex flex-col md:flex-row items-center md:items-start md:gap-[40px]">
    <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
      Buyer
      <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
    </h1>
    <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
      Supplier
      <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
    </h1>
  </div>

  <div className="flex flex-col gap-1 mt-8">
    <div className="flex items-start mb-3 w-full">
      <img src={check} className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0" />
      <div className="flex-1 text-white text-lg leading-6">Post your requirements.</div>
    </div>
    <div className="flex items-start mb-3 w-full">
      <img src={check} className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0" />
      <div className="flex-1 text-white text-lg leading-6">Sit back for multiple suppliers to contact you.</div>
    </div>
    <div className="flex items-start mb-3 w-full">
      <img src={check} className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0" />
      <div className="flex-1 text-white text-lg leading-6">
        Choose among the suppliers based on the <span className="block mt-2">rating and reviews.</span>
      </div>
    </div>
  </div>
</div>

      </div>
    </div>
 
 <div className="w-[90%] md:h-[523px] bg-[#072F57] mx-auto md:mt-10 md:flex-row flex flex-col">
        

        <div className="md:px-12 md:pt-28 w-full">
  <div className="flex flex-col md:flex-row items-center md:items-start md:gap-[40px]">
    <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
      Buyer
      <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
    </h1>
    <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
      Supplier
      <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
    </h1>
  </div>

  <div className="flex flex-col gap-1 mt-8">
    <div className="flex items-start mb-3 w-full">
      <img src={check} className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0" />
      <div className="flex-1 text-white text-lg leading-6">Post your requirements.</div>
    </div>
    <div className="flex items-start mb-3 w-full">
      <img src={check} className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0" />
      <div className="flex-1 text-white text-lg leading-6">Sit back for multiple suppliers to contact you.</div>
    </div>
    <div className="flex items-start mb-3 w-full">
      <img src={check} className="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0" />
      <div className="flex-1 text-white text-lg leading-6">
        Choose among the suppliers based on the <span className="block mt-2">rating and reviews.</span>
      </div>
    </div>
  </div>
</div>

      </div>
 
 <div className="md:px-12 md:pt-28 md:w-[100%] ">
          <div className="flex flex-col md:flex-row items-center md:items-start md:gap-[40px]">
            <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
              Buyer
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
              Supplier
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div class="flex md:flex-col md:gap-1 md:mt-8">
            <div class="flex items-start mb-3 w-full">
              <img
                src={check}
                class="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div class="flex-1 text-white text-lg leading-6">
                Post your requirements.
              </div>
            </div>
            <div class="flex items-start mb-3 w-full">
              <img
                src={check}
                class="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div class="flex-1 text-white text-lg leading-6">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div class="flex items-start mb-3 w-full">
              <img
                src={check}
                class="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div class="flex-1 text-white text-lg leading-6">
                Choose among the suppliers based on the{' '}
                <span class="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
 
<div className="w-[90%] md:h-[523px] bg-[#072F57] mx-auto md:mt-10 md:flex-row flex sm:flex-col">
 
 <div className="w-[90%] md:h-[523px] bg-[#072F57] mx-auto md:mt-10 md:flex-row flex sm:flex-col">
        <div className="md:pl-[60px] md:pt-[100px] sm:px-4 sm:pt-6 sm:items-center ">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}`}
            alt=""
            style={{
              top: 0,
              left: 0,
              width: '530px',
              height: '295px',
              borderRadius: '5px',
            }}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            title="YouTube video"
          ></iframe>
        </div>

        <div className="md:px-12 md:pt-28 md:w-[100%] ">
          <div className="flex flex-col md:flex-row items-center md:items-start md:gap-[40px]">
            <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
              Buyer
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
              Supplier
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div class="flex md:flex-col md:gap-1 md:mt-8">
            <div class="flex items-start mb-3 w-full">
              <img
                src={check}
                class="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div class="flex-1 text-white text-lg leading-6">
                Post your requirements.
              </div>
            </div>
            <div class="flex items-start mb-3 w-full">
              <img
                src={check}
                class="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div class="flex-1 text-white text-lg leading-6">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div class="flex items-start mb-3 w-full">
              <img
                src={check}
                class="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div class="flex-1 text-white text-lg leading-6">
                Choose among the suppliers based on the{' '}
                <span class="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
      </div>
 
      <div className="w-[90%] md:h-[523px] bg-[#072F57] mx-auto md:mt-10 md:flex-row flex sm:flex-col">
        <div className="md:pl-[60px] md:pt-[100px] sm:px-4 sm:pt-6 sm:items-center ">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}`}
            alt=""
            style={{
              top: 0,
              left: 0,
              width: '530px',
              height: '295px',
              borderRadius: '5px',
            }}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            title="YouTube video"
          ></iframe>
        </div>

        <div className="md:px-12 md:pt-28 md:w-[100%] ">
          <div className="flex flex-col md:flex-row items-center md:items-start md:gap-[40px]">
            <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
              Buyer
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
            </h1>
            <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
              Supplier
              <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px]"></div>
            </h1>
          </div>

          <div class="flex md:flex-col md:gap-1 md:mt-8">
            <div class="flex items-start mb-3 w-full">
              <img
                src={check}
                class="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div class="flex-1 text-white text-lg leading-6">
                Post your requirements.
              </div>
            </div>
            <div class="flex items-start mb-3 w-full">
              <img
                src={check}
                class="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div class="flex-1 text-white text-lg leading-6">
                Sit back for multiple suppliers to contact you.
              </div>
            </div>
            <div class="flex items-start mb-3 w-full">
              <img
                src={check}
                class="text-green-500 text-xl mr-2 mt-1.5 flex-shrink-0"
              />
              <div class="flex-1 text-white text-lg leading-6">
                Choose among the suppliers based on the{' '}
                <span class="block mt-2">rating and reviews.</span>
              </div>
            </div>
          </div>
        </div>
      </div>
 
g-orange-400 
 
bg-red-800
 
<div className="flex md:flex-col md:gap-1 mt-[30px] md:text-left bg-blue-600 md:w-[461px] md:h-[156px]">
            <div className="flex md:flex-col md:gap-1 mt-[30px] md:text-left bg-blue-600 md:w-[461px] md:h-[156px]">
              <div className="flex items-center space-x-2">
                <img src={check} alt="check icon" className="w-5 h-5" />{' '}
                {/* Adjust the size with w-5 h-5 */}
                <p className="md:text-[16.75px] text-white md:font-[500] md:leading-[36px]">
                  Post your requirements.
                </p>
              </div>

              <div className="flex items-center space-x-2">
                <img src={check} alt="check icon" className="w-5 h-5" />{' '}
                {/* Adjust the size with w-5 h-5 */}
                <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                  Sit back for multiple suppliers to contact you.
                </p>
              </div>

              <div className="flex items-center space-x-2">
                <img src={check} alt="check icon" className="w-5 h-5" />{' '}
                {/* Adjust the size with w-5 h-5 */}
                <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                  Choose among the suppliers based on the ratings and reviews.
                </p>
              </div>
            </div>
          </div>
 
<div className="flex md:flex-col md:gap-1 mt-[30px] md:text-left bg-blue-600 md:w-[461px] md:h-[156px]">
            <div className="flex md:flex-col md:gap-1 mt-[30px] md:text-left bg-blue-600 md:w-[461px] md:h-[156px]">
              <div className="flex items-center space-x-2">
                <img src={check} alt="check icon" className="w-5 h-5" />{' '}
                {/* Adjust the size with w-5 h-5 */}
                <p className="md:text-[16.75px] text-white md:font-[500] md:leading-[36px]">
                  Post your requirements.
                </p>
              </div>

              <div className="flex items-center space-x-2">
                <img src={check} alt="check icon" className="w-5 h-5" />{' '}
                {/* Adjust the size with w-5 h-5 */}
                <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                  Sit back for multiple suppliers to contact you.
                </p>
              </div>

              <div className="flex items-center space-x-2">
                <img src={check} alt="check icon" className="w-5 h-5" />{' '}
                {/* Adjust the size with w-5 h-5 */}
                <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                  Choose among the suppliers based on the ratings and reviews.
                </p>
              </div>
            </div>
          </div>
 

          import check from "../Assets/checked.png";  // Make sure the path is correct
 
<p className="md:text-[16.75px] text-white md:font-[500] md:leading-[36px]">
              Post your requirements.
            </p>
            <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
              Sit back for multiple suppliers to contact you.
            </p>
            <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
              Choose among the suppliers based on the ratings and reviews.
            </p>
 

          import check from "../Assets/checked.png";  // Ensure the path is correct
 
<p className="md:text-[16.75px] text-white md:font-[500] md:leading-[36px]">
              Post your requirements.
            </p>
            <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
              Sit back for multiple suppliers to contact you.
            </p>
            <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
              Choose among the suppliers based on the ratings and reviews.
            </p>
 
<p className="md:text-[16.75px] text-white md:font-[500] md:leading-[36px]">
              Post your requirements.
            </p>
            <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
              Sit back for multiple suppliers to contact you.
            </p>
            <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
              Choose among the suppliers based on the ratings and reviews.
            </p>
 
<div className="flex md:flex-col md:gap-1 mt-[30px] md:text-left bg-blue-600 md:w-[461px] md:h-[156px]">
            <p className="md:text-[16.75px] text-white md:font-[500] md:leading-[36px]">
              Post your requirements.
            </p>
            <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
              Sit back for multiple suppliers to contact you.
            </p>
            <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
              Choose among the suppliers based on the ratings and reviews.
            </p>
          </div>
 
border-b-4 border-[#EB7150]
 
sm:px-4 sm:pt-6
 

          <p className="text-white"></p>
 
Text content goes here
 

          position: 'absolute',
 
 <YtEmbed videoId={videoId} />
 
-cols-2 sm:flex-col md:flex-wra
 
md:flex-row grid-cols-1 md:grid
 
grid 
 
<div className="md:w-[90%] md:h-[523px] bg-[#072F57] mx-auto md:mt-10 grid md:grid-cols-2 sm:flex-col">
        <div className="bg-orange-400 md:pl-[60px] md:pt-[100px]">
            <YtEmbed videoId={videoId} />
        </div>
        <div className="bg-red-800">text content</div>
      </div>
 
 <div className="md:w-[90%] md:h-[523px] bg-[#072F57] mx-auto md:mt-10 grid md:grid-cols-2 sm:flex-col">
        <div className="bg-orange-400 md:pl-[60px] md:pt-[100px]">
            <YtEmbed videoId={videoId} />
        </div>
        <div className="bg-red-800">text content</div>
      </div>
    </div>
 
youtube container
 
 <div className="w-full min-h-screen bg-[] flex justify-center items-center">
        <div className=" bg-gray-500 w-[90%] h-[700px] md:h-[523px] flex flex-col md:flex-row">
          {/* <!-- Left Section (YouTube Section) --> */}
          <div className="w-full md:w-[50%] flex mb-6 md:mb-0 md:px-[50px] md:py-[110px] px-4 py-4">
            <iframe
              src={`https://www.youtube.com/embed/${videoId}`}
              alt="YouTube video"
              className="w-full md:w-[550px] md:h-[290px] h-[260px] rounded-lg"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              title="YouTube video"
              width="90%"
              height="350px"
            ></iframe>
          </div>

          {/* <!-- Right Section --> */}
          
        </div>
      </div>
 
-h-screen bg-[#072F57] flex justify-center items-center
 
flex justify-center items-center
 
 <div className=" bg-gray-500 w-[90%] h-[700px] md:h-[523px] flex flex-col md:flex-row">
          {/* <!-- Left Section (YouTube Section) --> */}
          <div className="w-full md:w-[50%] flex mb-6 md:mb-0 md:px-[50px] md:py-[110px] px-4 py-4">
            <iframe
              src={`https://www.youtube.com/embed/${videoId}`}
              alt="YouTube video"
              className="w-full md:w-[550px] md:h-[290px] h-[260px] rounded-lg"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              title="YouTube video"
              width="90%"
              height="350px"
            ></iframe>
          </div>

          {/* <!-- Right Section --> */}
          
        </div>
 
<div className="w-full md:w-[36%] space-y-4 md:py-[110px]">
            {/* <!-- Headings --> */}
            <div className="flex bg-red-400 flex-col md:flex-row items-center md:items-start md:gap-[50px]  ">
              <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
                Buyer
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
              <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
                Buyer
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
            </div>

            <div className="flex bg-blue-400 flex-col px-4 gap-4 md:gap-5 mt-[30px]  md:text-left">
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Post your requirements.
              </p>
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Sit back for multiple suppliers to contact you.
              </p>
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Choose among the suppliers based on the ratings and reviews.
              </p>
            </div>
          </div>
 
  <div className="w-full min-h-screen bg-[#072F57] flex justify-center items-center">
        <div className=" bg-gray-500 w-[90%] h-[700px] md:h-[523px] flex flex-col md:flex-row">
          {/* <!-- Left Section (YouTube Section) --> */}
          <div className="w-full md:w-[50%] flex mb-6 md:mb-0 md:px-[50px] md:py-[110px] px-4 py-4">
            <iframe
              src={`https://www.youtube.com/embed/${videoId}`}
              alt="YouTube video"
              className="w-full md:w-[550px] md:h-[290px] h-[260px] rounded-lg"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              title="YouTube video"
              width="90%"
              height="350px"
            ></iframe>
          </div>

          {/* <!-- Right Section --> */}
          <div className="w-full md:w-[36%] space-y-4 md:py-[110px] ">
            {/* <!-- Headings --> */}
            <div className="flex bg-red-400 flex-col md:flex-row items-center md:items-start md:gap-[50px]  ">
              <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
                Buyer
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
              <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
                Buyer
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
            </div>

            <div className="flex bg-blue-400 flex-col px-4 gap-4 md:gap-5 mt-[30px]  md:text-left">
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Post your requirements.
              </p>
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Sit back for multiple suppliers to contact you.
              </p>
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Choose among the suppliers based on the ratings and reviews.
              </p>
            </div>
          </div>
        </div>
      </div>
 
uTube
 
{check}
 
 <div className="w-full min-h-screen bg-[#072F57] flex justify-center items-center">
        <div className=" bg-gray-500 w-[90%] h-[700px] md:h-[523px] flex flex-col md:flex-row">
          {/* <!-- Left Section (YouTube Section) --> */}
          <div className="w-full md:w-[50%] flex mb-6 md:mb-0 md:px-[50px] md:py-[110px] px-4 py-4">
            <iframe
              src={`https://www.youtube.com/embed/${videoId}`}
              alt="YouTube video"
              className="w-full md:w-[550px] md:h-[290px] h-[260px] rounded-lg"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              title="YouTube video"
              width="90%"
              height="350px"
            ></iframe>
          </div>

          {/* <!-- Right Section --> */}
          <div className="w-full md:w-[36%] space-y-4 md:py-[110px] ">
            {/* <!-- Headings --> */}
            <div className="flex bg-red-400 flex-col md:flex-row items-center md:items-start md:gap-[50px]  ">
              <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
                Buyer
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
              <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
                Buyer
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
            </div>

            <div className="flex bg-blue-400 flex-col px-4 gap-4 md:gap-5 mt-[30px]  md:text-left">
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Post your requirements.
              </p>
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Sit back for multiple suppliers to contact you.
              </p>
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Choose among the suppliers based on the ratings and reviews.
              </p>
            </div>
          </div>
        </div>
      </div>
 
{check}
 
 <div className="w-full min-h-screen bg-[#072F57] flex justify-center items-center">
        <div className=" bg-gray-500 w-[90%] h-[700px] md:h-[523px] flex flex-col md:flex-row">
          {/* <!-- Left Section (YouTube Section) --> */}
          <div className="w-full md:w-[50%] flex mb-6 md:mb-0 md:px-[50px] md:py-[110px] px-4 py-4">
            <iframe
              src={`https://www.youtube.com/embed/${videoId}`}
              alt="YouTube video"
              className="w-full md:w-[550px] md:h-[290px] h-[260px] rounded-lg"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              title="YouTube video"
              width="90%"
              height="350px"
            ></iframe>
          </div>

          {/* <!-- Right Section --> */}
          <div className="w-full md:w-[36%] space-y-4 md:py-[110px] ">
            {/* <!-- Headings --> */}
            <div className="flex bg-red-400 flex-col md:flex-row items-center md:items-start md:gap-[50px]  ">
              <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
                Buyer
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
              <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
                Buyer
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
            </div>

            <div className="flex bg-blue-400 flex-col px-4 gap-4 md:gap-5 mt-[30px]  md:text-left">
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Post your requirements.
              </p>
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Sit back for multiple suppliers to contact you.
              </p>
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Choose among the suppliers based on the ratings and reviews.
              </p>
            </div>
          </div>
        </div>
      </div>
 
  <div className="w-full md:w-[36%] space-y-4 md:py-[110px] ">
            {/* <!-- Headings --> */}
            <div className="flex bg-red-400 flex-col md:flex-row items-center md:items-start md:gap-[50px]  ">
              <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
                Buyer
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
              <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
                Buyer
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
            </div>

            <div className="flex bg-blue-400 flex-col px-4 gap-4 md:gap-5 mt-[30px]  md:text-left">
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Post your requirements.
              </p>
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Sit back for multiple suppliers to contact you.
              </p>
              <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
                Choose among the suppliers based on the ratings and reviews.
              </p>
            </div>
          </div>
 
 <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
                Supplier
                <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
              </h1>
 
text-center
 
items-center
 
text-center
 
items-center
 
md:w-1/2
 
items-center
 
h-[60vh]
 
space-y-4
 
 <div className="space-y-2">
              <h2 className="text-white text-2xl font-bold text-center md:text-left">
                Heading 1
              </h2>
              <h3 className="text-white text-xl font-semibold text-center md:text-left">
                Heading 2
              </h3>
            </div>

            {/* <!-- Paragraphs --> */}
            <div className="space-y-4">
              <p className="text-white text-base text-center md:text-left">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque
                at libero id lectus feugiat tempus.
              </p>
              <p className="text-white text-base text-center md:text-left">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                Curabitur ac risus augue. Integer at ligula ante.
              </p>
            </div>
 
 <div className="w-full md:w-1/2 space-y-4">
            {/* <!-- Headings --> */}
            <div className="space-y-2">
              <h2 className="text-white text-2xl font-bold text-center md:text-left">
                Heading 1
              </h2>
              <h3 className="text-white text-xl font-semibold text-center md:text-left">
                Heading 2
              </h3>
            </div>

            {/* <!-- Paragraphs --> */}
            <div className="space-y-4">
              <p className="text-white text-base text-center md:text-left">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque
                at libero id lectus feugiat tempus.
              </p>
              <p className="text-white text-base text-center md:text-left">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                Curabitur ac risus augue. Integer at ligula ante.
              </p>
            </div>
          </div>
 
py-8 px-4
 
justify-between items-center
 
justify-between items-center
 
w-1/2
 

            </div>
 

            <div className=">
 
"bg-white p-4 shadow-md
 
rounded-lg
 
<iframe
                className="w-full h-60"
                src="https://www.youtube.com/embed/dQw4w9WgXcQ"
                frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen
              ></iframe>
 
class
 
 <div className="w-[90%] md:h-[523px] h-auto mx-auto bg-[#072F57] flex flex-col md:flex-row items-center md:items-start">
      {/* YouTube Section */}
      <div className="w-full md:w-[50%] px-4 md:px-[55px] py-[40px] md:py-[110px] flex justify-center">
      <iframe
          src={`https://www.youtube.com/embed/${videoId}`}
          alt="YouTube video"
          className="w-full md:w-[530px] h-[280px] rounded-lg"
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
          title="YouTube video"
        ></iframe>
      </div>

      {/* Right Section */}
      <div className="flex flex-col items-center md:items-start px-4 md:px-[35px] pt-[40px] md:pt-[120px]">
      <div className="flex flex-row gap-[100px] md:flex-row items-center md:items-start md:gap-[30px]">
          <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
            Buyer
            <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
          </h1>
          <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
            Supplier
          </h1>
        </div>

        <div className="flex flex-col gap-4 md:gap-5 mt-[30px] text-left md:text-left">
          <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
            Post your requirements.
          </p>
          <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
            Sit back for multiple suppliers to contact you.
          </p>
          <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
            Choose among the suppliers based on the ratings and reviews.
          </p>
        </div>
      </div>
    </div>
 
 <div className="w-[90%] md:h-[523px] h-auto mx-auto bg-[#072F57] flex flex-col md:flex-row items-center md:items-start">
      {/* YouTube Section */}
      <div className="w-full md:w-[50%] px-4 md:px-[55px] py-[40px] md:py-[110px] flex justify-center">
      <iframe
          src={`https://www.youtube.com/embed/${videoId}`}
          alt="YouTube video"
          className="w-full md:w-[530px] h-[280px] rounded-lg"
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
          title="YouTube video"
        ></iframe>
      </div>

      {/* Right Section */}
      <div className="flex flex-col items-center md:items-start px-4 md:px-[35px] pt-[40px] md:pt-[120px]">
      <div className="flex flex-row gap-[100px] md:flex-row items-center md:items-start md:gap-[30px]">
          <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
            Buyer
            <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
          </h1>
          <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
            Supplier
          </h1>
        </div>

        <div className="flex flex-col gap-4 md:gap-5 mt-[30px] text-left md:text-left">
          <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
            Post your requirements.
          </p>
          <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
            Sit back for multiple suppliers to contact you.
          </p>
          <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
            Choose among the suppliers based on the ratings and reviews.
          </p>
        </div>
      </div>
    </div>
 
 <div className="w-[90%] md:h-[523px] h-auto mx-auto bg-[#072F57] flex flex-col md:flex-row items-center md:items-start">
      {/* YouTube Section */}
      <div className="w-full md:w-[50%] px-4 md:px-[55px] py-[40px] md:py-[110px] flex justify-center">
      <iframe
          src={`https://www.youtube.com/embed/${videoId}`}
          alt="YouTube video"
          className="w-full md:w-[530px] h-[280px] rounded-lg"
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
          title="YouTube video"
        ></iframe>
      </div>

      {/* Right Section */}
      <div className="flex flex-col items-center md:items-start px-4 md:px-[35px] pt-[40px] md:pt-[120px]">
      <div className="flex flex-row gap-[100px] md:flex-row items-center md:items-start md:gap-[30px]">
          <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-[#EB7150]">
            Buyer
            <div className="w-[120px] md:w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
          </h1>
          <h1 className="text-[20px] md:text-[26px] font-[700] leading-[32px] text-center text-white">
            Supplier
          </h1>
        </div>

        <div className="flex flex-col gap-4 md:gap-5 mt-[30px] text-left md:text-left">
          <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
            Post your requirements.
          </p>
          <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
            Sit back for multiple suppliers to contact you.
          </p>
          <p className="text-[14px] md:text-[16.75px] text-white font-[500] leading-[39px]">
            Choose among the suppliers based on the ratings and reviews.
          </p>
        </div>
      </div>
    </div>
 
 <div className="w-[90%] md:h-[523px] mx-auto bg-[#072F57] flex flex-wrap flex-col md:flex-row">
      {/* youtube section */}
      <div className="w-[50%] px-[55px] py-[110px] flex flex-wrap md:flex-row flex-col">
        <iframe
          src={`https://www.youtube.com/embed/${videoId}`}
          alt=""
          style={{
            top: 0,
            left: 0,
            width: '530px',
            height: '280px',
            borderRadius: '5px',
          }}
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
          title="YouTube video"
        ></iframe>
      </div>

      {/* Right Section */}
      <div className="flex flex-col flex-wrap px-[35px] pt-[120px]">
        <div className="flex flex-row flex-wrap gap-[30px] ">
          <h1 className="text-[26px] font-[700] leading-[32px] w-[202px] text-center text-[#EB7150]">
            Buyer
            <div className="w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
          </h1>
          <h1 className="text-[26px] font-[700] leading-[32px] w-[202px] text-center text-white">
            Supplier
          </h1>
        </div>

        <div className="flex flex-col gap-5 flex-wrap mt-[30px]">
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Post your requirements.
          </p>
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Sit back for multiple suppliers to contact you.
          </p>
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Choose among the suppliers based on the ratings and reviews.
          </p>
        </div>
      </div>
    </div>
 
 <div className="w-[90%] md:h-[523px] mx-auto bg-[#072F57] flex flex-wrap flex-col md:flex-row">
      {/* youtube section */}
      <div className="w-[50%] px-[55px] py-[110px] flex flex-wrap md:flex-row flex-col">
        <iframe
          src={`https://www.youtube.com/embed/${videoId}`}
          alt=""
          style={{
            top: 0,
            left: 0,
            width: '530px',
            height: '280px',
            borderRadius: '5px',
          }}
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
          title="YouTube video"
        ></iframe>
      </div>

      {/* Right Section */}
      <div className="flex flex-col flex-wrap px-[35px] pt-[120px]">
        <div className="flex flex-row flex-wrap gap-[30px] ">
          <h1 className="text-[26px] font-[700] leading-[32px] w-[202px] text-center text-[#EB7150]">
            Buyer
            <div className="w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
          </h1>
          <h1 className="text-[26px] font-[700] leading-[32px] w-[202px] text-center text-white">
            Supplier
          </h1>
        </div>

        <div className="flex flex-col gap-5 flex-wrap mt-[30px]">
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Post your requirements.
          </p>
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Sit back for multiple suppliers to contact you.
          </p>
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Choose among the suppliers based on the ratings and reviews.
          </p>
        </div>
      </div>
    </div>
 

          position: 'absolute',
 
allowFullScreen
 
<YtEmbed videoId={videoId}></YtEmbed>
 
 <div style={{ position: 'relative', paddingBottom: '50.25%', height: 50 }}>
      <iframe
        src={`https://www.youtube.com/embed/${videoId}`}
        alt=""
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '530px',
          height: '295px',
          borderRadius:"5px"
        }}
        frameBorder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowFullScreen
        title="YouTube video"
      ></iframe>
    </div>
 
<div className="w-[90%] md:h-[523px] mx-auto bg-[#072F57] flex flex-wrap flex-row">
      {/* youtube section */}
      <div className="w-[50%] px-[55px] py-[110px] flex flex-wrap">
        <YtEmbed videoId={videoId}></YtEmbed>
      </div>

      {/* Right Section */}
      <div className="flex flex-col flex-wrap px-[35px] pt-[120px]">
        <div className="flex flex-row flex-wrap gap-[30px] ">
          <h1 className="text-[26px] font-[700] leading-[32px] w-[202px] text-center text-[#EB7150]">
            Buyer
            <div className="w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
          </h1>
          <h1 className="text-[26px] font-[700] leading-[32px] w-[202px] text-center text-white">
            Supplier
          </h1>
        </div>

        <div className="flex flex-col gap-5 flex-wrap mt-[30px]">
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Post your requirements.
          </p>
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Sit back for multiple suppliers to contact you.
          </p>
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Choose among the suppliers based on the ratings and reviews.
          </p>
        </div>
      </div>
    </div>
 
<div className="w-[90%] md:h-[523px] mx-auto bg-[#072F57] flex flex-wrap flex-row">
      {/* youtube section */}
      <div className="w-[50%] px-[55px] py-[110px] flex flex-wrap">
        <YtEmbed videoId={videoId}></YtEmbed>
      </div>

      {/* Right Section */}
      <div className="flex flex-col flex-wrap px-[35px] pt-[120px]">
        <div className="flex flex-row flex-wrap gap-[30px] ">
          <h1 className="text-[26px] font-[700] leading-[32px] w-[202px] text-center text-[#EB7150]">
            Buyer
            <div className="w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
          </h1>
          <h1 className="text-[26px] font-[700] leading-[32px] w-[202px] text-center text-white">
            Supplier
          </h1>
        </div>

        <div className="flex flex-col gap-5 flex-wrap mt-[30px]">
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Post your requirements.
          </p>
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Sit back for multiple suppliers to contact you.
          </p>
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Choose among the suppliers based on the ratings and reviews.
          </p>
        </div>
      </div>
    </div>
 
<div className="w-[90%] md:h-[523px] mx-auto bg-[#072F57] flex flex-wrap flex-row">
      {/* youtube section */}
      <div className="w-[50%] px-[55px] py-[110px] flex flex-wrap">
        <YtEmbed videoId={videoId}></YtEmbed>
      </div>

      {/* Right Section */}
      <div className="flex flex-col flex-wrap px-[35px] pt-[120px]">
        <div className="flex flex-row flex-wrap gap-[30px] ">
          <h1 className="text-[26px] font-[700] leading-[32px] w-[202px] text-center text-[#EB7150]">
            Buyer
            <div className="w-[202px] mt-[10px] h-[0.5px] border-b-4 border-[#EB7150]"></div>
          </h1>
          <h1 className="text-[26px] font-[700] leading-[32px] w-[202px] text-center text-white">
            Supplier
          </h1>
        </div>

        <div className="flex flex-col gap-5 flex-wrap mt-[30px]">
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Post your requirements.
          </p>
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Sit back for multiple suppliers to contact you.
          </p>
          <p className="text-[16.75px] text-[white] font-[500] leading-[39px]">
            Choose among the suppliers based on the ratings and reviews.
          </p>
        </div>
      </div>
    </div>
 
yellow-300
 

    </div>
 

    <div className="px-[60px]">
 
bg-yellow-300
 
 bg-orange-300
 
text-[] sm:text-base
 
<div className="w-full grid lg:grid-cols-2 ">
      {/* left div */}
      <div className="w-full h-full flex flex-col gap-6 items-start px-6 md:px-[60px] py-6 md:py-[60px]">
        <h1 className="text-2xl sm:text-3xl lg:text-4xl font-[700] leading-tight text-black">
          Ready to dive into <span className="text-[#271555]">HABOT?</span>
        </h1>
        <p className="text-sm sm:text-base lg:text-lg font-light text-[#000000] text-justify w-full sm:w-[500px] md:w-[540px]">
          Signing up with HABOT opens the door to a world of new opportunities
          and potential for business growth. Gain access to a vibrant community
          of like-minded individuals, unlock valuable resources, and take the
          first step towards realizing your entrepreneurial dreams.
        </p>
        <button className="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center">
          Sign up Today!
        </button>
      </div>

      {/* Right Div */}

      <div className="w-full h-full flex flex-wrap gap-4 px-4 md:px-[76px] py-4 md:py-[78px] justify-center">
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Abu Dhabi
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Sharjah & Ajman
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Dubai
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Fujairah
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Ras Al Khaimah
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Umm Al Quwain
        </button>
      </div>
    </div>
 
<div className="w-full grid lg:grid-cols-2 ">
      {/* left div */}
      <div className="w-full h-full flex flex-col gap-6 items-start px-6 md:px-[60px] py-6 md:py-[60px]">
        <h1 className="text-2xl sm:text-3xl lg:text-4xl font-[700] leading-tight text-black">
          Ready to dive into <span className="text-[#271555]">HABOT?</span>
        </h1>
        <p className="text-sm sm:text-base lg:text-lg font-light text-[#000000] text-justify w-full sm:w-[500px] md:w-[540px]">
          Signing up with HABOT opens the door to a world of new opportunities
          and potential for business growth. Gain access to a vibrant community
          of like-minded individuals, unlock valuable resources, and take the
          first step towards realizing your entrepreneurial dreams.
        </p>
        <button className="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center">
          Sign up Today!
        </button>
      </div>

      {/* Right Div */}

      <div className="w-full h-full flex flex-wrap gap-4 px-4 md:px-[76px] py-4 md:py-[78px] justify-center">
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Abu Dhabi
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Sharjah & Ajman
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Dubai
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Fujairah
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Ras Al Khaimah
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Umm Al Quwain
        </button>
      </div>
    </div>
 
<div className="w-full grid lg:grid-cols-2 ">
      {/* left div */}
      <div className="w-full h-full flex flex-col gap-6 items-start px-6 md:px-[60px] py-6 md:py-[60px]">
        <h1 className="text-2xl sm:text-3xl lg:text-4xl font-[700] leading-tight text-black">
          Ready to dive into <span className="text-[#271555]">HABOT?</span>
        </h1>
        <p className="text-sm sm:text-base lg:text-lg font-light text-[#000000] text-justify w-full sm:w-[500px] md:w-[540px]">
          Signing up with HABOT opens the door to a world of new opportunities
          and potential for business growth. Gain access to a vibrant community
          of like-minded individuals, unlock valuable resources, and take the
          first step towards realizing your entrepreneurial dreams.
        </p>
        <button className="w-full sm:w-[240px] lg:w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-white font-[700] text-lg leading-[24px] text-center">
          Sign up Today!
        </button>
      </div>

      {/* Right Div */}

      <div className="w-full h-full flex flex-wrap gap-4 px-4 md:px-[76px] py-4 md:py-[78px] justify-center">
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Abu Dhabi
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Sharjah & Ajman
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Dubai
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Fujairah
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Ras Al Khaimah
        </button>
        <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
          Umm Al Quwain
        </button>
      </div>
    </div>
 
bg-slate-900
 
h-[50vh]
 
 bg-blue-500
 
 bg-orange-500
 
 bg-gray-500
 
 <div className="w-[100%] h-full bg-blue-500">
        <div className="flex flex-wrap gap-x-[15px] px-[76px] py-[78px] ">
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Abu Dhabi
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Sharjah & Ajman
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Dubai
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Fujairah
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Ras Al Khaimah
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Umm Al Quwain
          </button>
        </div>
      </div>
 
 <div className="w-[100%] h-full bg-orange-500 flex flex-col gap-6 items-start px-[60px] py-[60px]">
        <h1 className="text-[37px] font-[700] leading-[40px]">
          Ready to dive into <span className="text-[#271555]">HABOT?</span>
        </h1>
        <p className="text-[17px] font-[300] leading-[28px] text-[#000000] w-[540px] h-[120px] text-justify">
          Signing up with HABOT opens the door to a world of new opportunities
          and potential for business growth. Gain access to a vibrant community
          of like-minded individuals, unlock valuable resources, and take the
          first step towards realizing your entrepreneurial dreams.
        </p>
        <button className="w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-[white] font-[700] text-[18px] leading-[24px] text-center">
          Sign up Today !
        </button>
      </div>
 
w-[100%] h-[70vh] bg-gray-500 grid lg:grid-cols-2
 
<div className="w-[100%] h-[70vh] bg-gray-500 grid lg:grid-cols-2">
      {/* left div */}
      <div className="w-[100%] h-full bg-orange-500 flex flex-col gap-6 items-start px-[60px] py-[60px]">
        <h1 className="text-[37px] font-[700] leading-[40px]">
          Ready to dive into <span className="text-[#271555]">HABOT?</span>
        </h1>
        <p className="text-[17px] font-[300] leading-[28px] text-[#000000] w-[540px] h-[120px] text-justify">
          Signing up with HABOT opens the door to a world of new opportunities
          and potential for business growth. Gain access to a vibrant community
          of like-minded individuals, unlock valuable resources, and take the
          first step towards realizing your entrepreneurial dreams.
        </p>
        <button className="w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-[white] font-[700] text-[18px] leading-[24px] text-center">
          Sign up Today !
        </button>
      </div>
      {/* Right Div */}

      <div className="w-[100%] h-full bg-blue-500">
        <div className="flex flex-wrap gap-x-[15px] px-[76px] py-[78px] ">
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Abu Dhabi
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Sharjah & Ajman
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Dubai
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Fujairah
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Ras Al Khaimah
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Umm Al Quwain
          </button>
        </div>
      </div>
    </div>
 
<div className="w-[100%] h-[70vh] bg-gray-500 grid lg:grid-cols-2">
      {/* left div */}
      <div className="w-[100%] h-full bg-orange-500 flex flex-col gap-6 items-start px-[60px] py-[60px]">
        <h1 className="text-[37px] font-[700] leading-[40px]">
          Ready to dive into <span className="text-[#271555]">HABOT?</span>
        </h1>
        <p className="text-[17px] font-[300] leading-[28px] text-[#000000] w-[540px] h-[120px] text-justify">
          Signing up with HABOT opens the door to a world of new opportunities
          and potential for business growth. Gain access to a vibrant community
          of like-minded individuals, unlock valuable resources, and take the
          first step towards realizing your entrepreneurial dreams.
        </p>
        <button className="w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-[white] font-[700] text-[18px] leading-[24px] text-center">
          Sign up Today !
        </button>
      </div>
      {/* Right Div */}

      <div className="w-[100%] h-full bg-blue-500">
        <div className="flex flex-wrap gap-x-[15px] px-[76px] py-[78px] ">
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Abu Dhabi
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Sharjah & Ajman
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Dubai
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Fujairah
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Ras Al Khaimah
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Umm Al Quwain
          </button>
        </div>
      </div>
    </div>
 
<div className="w-[100%] h-[70vh] bg-gray-500 grid lg:grid-cols-2">
      {/* left div */}
      <div className="w-[100%] h-full bg-orange-500 flex flex-col gap-6 items-start px-[60px] py-[60px]">
        <h1 className="text-[37px] font-[700] leading-[40px]">
          Ready to dive into <span className="text-[#271555]">HABOT?</span>
        </h1>
        <p className="text-[17px] font-[300] leading-[28px] text-[#000000] w-[540px] h-[120px] text-justify">
          Signing up with HABOT opens the door to a world of new opportunities
          and potential for business growth. Gain access to a vibrant community
          of like-minded individuals, unlock valuable resources, and take the
          first step towards realizing your entrepreneurial dreams.
        </p>
        <button className="w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-[white] font-[700] text-[18px] leading-[24px] text-center">
          Sign up Today !
        </button>
      </div>
      {/* Right Div */}

      <div className="w-[100%] h-full bg-blue-500">
        <div className="flex flex-wrap gap-x-[15px] px-[76px] py-[78px] ">
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Abu Dhabi
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Sharjah & Ajman
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Dubai
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Fujairah
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Ras Al Khaimah
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Umm Al Quwain
          </button>
        </div>
      </div>
    </div>
 
 <div className="w-[100%] h-full bg-blue-500">
        <div className="flex flex-wrap gap-x-[15px] px-[76px] py-[78px] ">
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Abu Dhabi
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Sharjah & Ajman
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Dubai
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Fujairah
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Ras Al Khaimah
          </button>
          <button className="w-[240px] h-[60px] rounded-[5px] border-[1px] border-[#E7760D] mb-4">
            Umm Al Quwain
          </button>
        </div>
      </div>
 
<div className="w-[100%] h-full bg-orange-500 flex flex-col gap-6 items-start px-[60px] py-[60px]">
        <h1 className="text-[37px] font-[700] leading-[40px]">
          Ready to dive into <span className="text-[#271555]">HABOT?</span>
        </h1>
        <p className="text-[17px] font-[300] leading-[28px] text-[#000000] w-[540px] h-[120px] text-justify">
          Signing up with HABOT opens the door to a world of new opportunities
          and potential for business growth. Gain access to a vibrant community
          of like-minded individuals, unlock valuable resources, and take the
          first step towards realizing your entrepreneurial dreams.
        </p>
        <button className="w-[317px] h-[54px] rounded-[5px] border border-[#00732F] bg-[#00732F] text-[white] font-[700] text-[18px] leading-[24px] text-center">
          Sign up Today !
        </button>
      </div>
 
48%
 
<div className="flex">
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Abu Dhabi</button>
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Sharjah & Ajman</button>
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Dubai</button>
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Fujairah</button>
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Ras Al Khaimah</button>
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Umm Al Quwain</button>
        </div>
 
gap-y-0 gap-x-0
 
<div className="grid grid-cols-2 gap-y-[25px] gap-x-[0px] max-w-xl mx-auto mt-[85px]">
          <button className="w-[240px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Abu Dhabi
          </button>
          <button className="w-[240px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Sharjah & Ajman
          </button>
          <button className="w-[240px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Dubai
          </button>
          <button className="w-[240px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Fujairah
          </button>
          <button className="w-[240px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Ras Al Khaimah
          </button>
          <button className="w-[240px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Umm Al Quwain
          </button>
        </div>
 
 <div className="grid grid-cols-2 gap-y-6 gap-x-4 p-6 max-w-md mx-auto">
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Abu Dhabi
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Sharjah & Ajman
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Dubai
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Fujairah
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Ras Al Khaimah
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Umm Al Quwain
          </button>
        </div>
 
grid grid-cols-2 gap-4 max-w-md mx-auto
 
px-4 py-3
 
px-4 py-3
 
  <div className="grid grid-cols-2 gap-y-6 gap-x-4 p-6 max-w-md mx-auto">
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Abu Dhabi
          </button>
          <button className="w-[260px] h-[65px] border-2 border-orange-400 rounded px-4 py-3 text-center hover:bg-orange-200">
            Sharjah & Ajman
          </button>
          <button className="w-[260px] h-[65px] border-2 border-orange-400 rounded px-4 py-3 text-center hover:bg-orange-200">
            Dubai
          </button>
          <button className="w-[260px] h-[65px] border-2 border-orange-400 rounded px-4 py-3 text-center hover:bg-orange-200">
            Fujairah
          </button>
          <button className="w-[260px] h-[65px] border-2 border-orange-400 rounded px-4 py-3 text-center hover:bg-orange-200">
            Ras Al Khaimah
          </button>
          <button className="w-[260px] h-[65px] border-2 border-orange-400 rounded px-4 py-3 text-center hover:bg-orange-200">
            Umm Al Quwain
          </button>
        </div>
 
w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]
 
w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]
 
w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]
 
"w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]
 
rounded-[5px] border-[1px] border-[#E7760D]
 
        <div className="grid grid-cols-2">
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Abu Dhabi
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Sharjah & Ajman
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Dubai
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Fujairah
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Ras Al Khaimah
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Umm Al Quwain
          </button>
        </div>
 
grid grid-cols-2 gap-0
 
 bg-gray-500
 
 bg-blue-500
 
<div className="grid grid-cols-2 gap-0">
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Abu Dhabi
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Sharjah & Ajman
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Dubai
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Fujairah
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Ras Al Khaimah
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Umm Al Quwain
          </button>
        </div>
 
<div className="grid grid-cols-2 gap-0">
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Abu Dhabi
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Sharjah & Ajman
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Dubai
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Fujairah
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Ras Al Khaimah
          </button>
          <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">
            Umm Al Quwain
          </button>
        </div>
 
<div className="grid grid-cols-2">
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Abu Dhabi</button>
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Sharjah & Ajman</button>
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Dubai</button>
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Fujairah</button>
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Ras Al Khaimah</button>
            <button className="w-[260px] h-[65px] rounded-[5px] border-[1px] border-[#E7760D]">Umm Al Quwain</button>
        </div>
 
gap-x-0
 
space-y-4
 
ml-4
 
px-[60px] py-[75px]
 
gap-4 flex flex-col items-center
 
#00732F
 

            border: 1px solid 
 
border
 
border-[1px solid]
 
bg-gray-500
 
 bg-orange-500
 
border-[1px solid]
 
<div className="w-[100%] h-[70vh] bg-gray-500 grid lg:grid-cols-1">
      <div className="w-[50%] bg-orange-500"></div>
      <div className="w-[50%] bg-orange-500"></div>
    </div>
 
md:grid-flow-row
 
<div className="grid justify-items-center flex-col">
          <h1 className="text-[28px] md:text-[55px] font-[700] leading-[66px] text-center">
            Are You a Supplier?
          </h1>
          <span className="text-[22px] md:text-[55px] lg:text-[55px] font-[400] leading-[66px]  text-center">
            Explore Matching Opportunities.
          </span>
        </div>

 
md:gap-1
 
md-mb-0
 

        <div className="grid justify-items-center flex-col ">
          <h1 className="text-[28px] md:text-[55px] font-[700] leading-[66px] text-center">
            Are You a Supplier?
          </h1>
          <span className="text-[22px] md:text-[55px] lg:text-[55px] font-[400] leading-[66px] text-center">
            Explore Matching Opportunities.
          </span>
        </div>
 
lg:text-[55px]
 
m:text-[18px]
 
sm:text-[18px]
 
sm:text-left
 
sm:justify-center
 
lg:w-[400px]
 
lg:w-[400px]
 
sm:flex-row
 
sm:w-[400px]
 
sm:w-[400px]
 
sm:text-[35px] 
 
sm:text-[53px]
 
 <div
        className="min-h-[490px] bg-cover bg-center flex flex-col gap-[35px] text-[white] items-center justify-center"
        style={{
          backgroundImage: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)), url(${heroImage})`,
        }}
      >
        <div className="grid justify-items-center flex-col ">
          <h1 className="text-[28px] sm:text-[53px] font-[700]  leading-[66px] text-center">
            Are You a Supplier?
          </h1>
          <span class="text-[22px] sm:text-[55px] font-[400] leading-[66px] text-center">
            Explore Matching Opportunities.
          </span>
        </div>

        <div className="flex flex-col gap-[10px] items-center justify-center md:flex-row">
          <input
            type="text"
            placeholder="Search your required service here"
            class="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center]  sm:w-[400px] "
            style={{
              height: '52px',
            }}
          />
          <input
            type="text"
            placeholder="Search your required service here"
            className="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center] sm:w-[400px]"
            style={{
              height: '52px',
            }}
          />
          <button className="w-[115px] h-[54px] bg-[#00732f] rounded-[5px] text-[15px] font-[700]">
            Search
          </button>
        </div>

        <div class="flex flex-col sm:flex-row gap-2 items-center sm:justify-center text-center sm:text-left">
          <b class="text-lg sm:text-[18px] font-semibold"> Are you a buyer? </b>
          <span class="underline text-[14px] sm:text-[18px]">
            Click here if you are looking to post a requirement
          </span>
        </div>
      </div>
 
 <div
        className="min-h-[490px] bg-cover bg-center flex flex-col gap-[35px] text-[white] items-center justify-center"
        style={{
          backgroundImage: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)), url(${heroImage})`,
        }}
      >
        <div className="grid justify-items-center flex-col ">
          <h1 className="text-[28px] sm:text-[53px] font-[700]  leading-[66px] text-center">
            Are You a Supplier?
          </h1>
          <span class="text-[22px] sm:text-[55px] font-[400] leading-[66px] text-center">
            Explore Matching Opportunities.
          </span>
        </div>

        <div className="flex flex-col gap-[10px] items-center justify-center md:flex-row">
          <input
            type="text"
            placeholder="Search your required service here"
            class="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center]  sm:w-[400px] "
            style={{
              height: '52px',
            }}
          />
          <input
            type="text"
            placeholder="Search your required service here"
            className="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center] sm:w-[400px]"
            style={{
              height: '52px',
            }}
          />
          <button className="w-[115px] h-[54px] bg-[#00732f] rounded-[5px] text-[15px] font-[700]">
            Search
          </button>
        </div>

        <div class="flex flex-col sm:flex-row gap-2 items-center sm:justify-center text-center sm:text-left">
          <b class="text-lg sm:text-[18px] font-semibold"> Are you a buyer? </b>
          <span class="underline text-[14px] sm:text-[18px]">
            Click here if you are looking to post a requirement
          </span>
        </div>
      </div>
 
 <div
        className="min-h-[490px] bg-cover bg-center flex flex-col gap-[35px] text-[white] items-center justify-center"
        style={{
          backgroundImage: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)), url(${heroImage})`,
        }}
      >
        <div className="grid justify-items-center flex-col ">
          <h1 className="text-[28px] sm:text-[53px] font-[700]  leading-[66px] text-center">
            Are You a Supplier?
          </h1>
          <span class="text-[22px] sm:text-[55px] font-[400] leading-[66px] text-center">
            Explore Matching Opportunities.
          </span>
        </div>

        <div className="flex flex-col gap-[10px] items-center justify-center md:flex-row">
          <input
            type="text"
            placeholder="Search your required service here"
            class="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center]  sm:w-[400px] "
            style={{
              height: '52px',
            }}
          />
          <input
            type="text"
            placeholder="Search your required service here"
            className="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center] sm:w-[400px]"
            style={{
              height: '52px',
            }}
          />
          <button className="w-[115px] h-[54px] bg-[#00732f] rounded-[5px] text-[15px] font-[700]">
            Search
          </button>
        </div>

        <div class="flex flex-col sm:flex-row gap-2 items-center sm:justify-center text-center sm:text-left">
          <b class="text-lg sm:text-[18px] font-semibold"> Are you a buyer? </b>
          <span class="underline text-[14px] sm:text-[18px]">
            Click here if you are looking to post a requirement
          </span>
        </div>
      </div>
 
sm:
 
flex-row
 
sm:flex-row
 
 rounded-[5px] border border-transparent bg-white text-black bg-no-repeat  bg-[position:15px_center]
 
[length:18px]
 
pl-[45px] pr-[20px]
 
sm:w-[400px]
 
sm:flex-col
 
flex flex-col
 
 <div
        className="min-h-[490px] bg-cover bg-center flex flex-col gap-[35px] text-[white] items-center justify-center"
        style={{
          backgroundImage: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)), url(${heroImage})`,
        }}
      >
        <div className="grid justify-items-center flex-col">
          <h1 className="text-[28px] sm:text-[53px] font-[700]  leading-[66px] text-center">
            Are You a Supplier?
          </h1>
          <span class="text-[22px] sm:text-[55px] font-[400] leading-[66px] text-center">
            Explore Matching Opportunities.
          </span>
        </div>

        <div className="flex flex-col sm:flex-row sm:justify-center sm:items-center gap-[10px] items-center justify-center  ">
          <input
            type="text"
            placeholder="Search your required service here"
            class="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center]  sm:w-[400px] "
            style={{
              height: '52px',
            }}
          />
          <input
            type="text"
            placeholder="Search your required service here"
            className="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center] sm:w-[400px]"
            style={{
              height: '52px',
            }}
          />
          <button className="w-[115px] h-[54px] bg-[#00732f] rounded-[5px] text-[15px] font-[700]">
            Search
          </button>
        </div>

        <div class="flex flex-col sm:flex-row gap-2 items-center sm:justify-center text-center sm:text-left">
          <b class="text-lg sm:text-[18px] font-semibold"> Are you a buyer? </b>
          <span class="underline text-[14px] sm:text-[18px]">
            Click here if you are looking to post a requirement
          </span>
        </div>
      </div>
 
<div className="flex flex-col sm:flex-row sm:justify-center sm:items-center gap-[10px] items-center justify-center ">
          <input
            type="text"
            placeholder="Search your required service here"
            class="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center]  sm:w-[400px] "
            style={{
              height: '52px',
            }}
          />
          <input
            type="text"
            placeholder="Search your required service here"
            className="pl-[45px] pr-[20px] rounded-[5px] border border-transparent bg-white text-black bg-no-repeat bg-[length:18px] bg-[position:15px_center] sm:w-[400px]"
            style={{
              height: '52px',
            }}
          />
          <button className="w-[115px] h-[54px] bg-[#00732f] rounded-[5px] text-[15px] font-[700]">
            Search
          </button>
        </div>
 
style={{ width: '52px' }}
 
style={{ width: '52px' }}
 
w-[52px] 
 
<button className="w-[52px] h-[54px] bg-[#00732f] rounded-[5px] text-[15px] font-[700]">
            Search
          </button>
 
w-[]
 
w-full
 
w-full
 
w-full
 

              width:"100%"
 
leading-snug
 
ld
 
font-extrabold
 
<button className="w-[117px] h-[54px] bg-[#00732f] rounded-[5px] text-[15px] font-[700]">
            Search
          </button>
 
w-2/4
 
gap-[0px]
 
90%
 
pt-[35px]
 
sm-[55px]
 
sm-[55px]
 
style="height: 52px"
 

          style="
            /* padding: 0 20px; */
            /* border-radius: 5px;
            border: none;
            cursor: pointer;
            background-color: #00732f;
            font-size: 15.13px;
            font-weight: 700;
            line-height: 24px;
            align-items: center;
            color: white; */
          "
 

          backgroundSize: 'cover',
          backgroundPosition: 'center bottom' // Align background image to bottom
 
<div
        className="min-h-[523px] bg-cover bg-center flex flex-col gap-[10px] text-[white] items-center justify-center"
        style={{
          backgroundImage: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)), url(${heroImage})`,
        }}
      ></div>
 
 <div 
      className="min-h-[523px] bg-[linear-gradient(356.01deg,rgba(7,47,87,0.75)_50.8%,rgba(7,47,87,0)_94.58%),linear-gradient(0deg,rgba(7,47,87,0.45),rgba(7,47,87,0.45))] bg-cover bg-center flex flex-col gap-[10px] text-[white] items-center justify-center"
      style={{ backgroundImage: `url(${heroImage})` }} // Dynamically set background image
    >
 
<div
        className="min-h-[523px] bg-[linear-gradient(356.01deg,rgba(7,47,87,0.75)_50.8%,rgba(7,47,87,0)_94.58%),linear-gradient(0deg,rgba(7,47,87,0.45),rgba(7,47,87,0.45))] bg-cover bg-center flex flex-col gap-[10px] text-[white] items-center justify-center"
        style={{ backgroundImage: `url(${heroImage})` }}
      ></div>
 
<div className="min-h-[523px] bg-[linear-gradient(356.01deg,rgba(7,47,87,0.75)_50.8%,rgba(7,47,87,0)_94.58%),linear-gradient(0deg,rgba(7,47,87,0.45),rgba(7,47,87,0.45)),url(${heroImage})] bg-cover bg-center flex  flex-col gap-[10px] text-[white] items-center justify-center">
 
<div className="min-h-[523px] bg-[linear-gradient(356.01deg,rgba(7,47,87,0.75)_50.8%,rgba(7,47,87,0)_94.58%),linear-gradient(0deg,rgba(7,47,87,0.45),rgba(7,47,87,0.45)),url(${heroImage})] bg-cover bg-center flex  flex-col gap-[10px] text-[white] items-center justify-center">
 
  <div
      className="bg-cover bg-center flex items-center justify-center flex-col gap-8 text-white"
      style={{
        backgroundImage: `linear-gradient(356.01deg, rgba(7,47,87,0.75) 50.8%, rgba(7,47,87,0) 94.58%), linear-gradient(0deg, rgba(7,47,87,0.45), rgba(7,47,87,0.45)), url(${heroImage})`,
        height:"409px"
      }}
    >
    </div>
 
<div
      className="bg-cover bg-center flex items-center justify-center flex-col gap-8 text-white"
      style={{
        backgroundImage: `linear-gradient(356.01deg, rgba(7,47,87,0.75) 50.8%, rgba(7,47,87,0) 94.58%), linear-gradient(0deg, rgba(7,47,87,0.45), rgba(7,47,87,0.45)), url(${heroImage})`,
        height:"409px"
      }}
    >
 
<div
      className="bg-cover bg-center flex items-center justify-center flex-col gap-8 text-white"
      style={{
        backgroundImage: `linear-gradient(356.01deg, rgba(7,47,87,0.75) 50.8%, rgba(7,47,87,0) 94.58%), linear-gradient(0deg, rgba(7,47,87,0.45), rgba(7,47,87,0.45)), url(${heroImage})`,
        height:"409px"
      }}
    >
    </div>
 
min-h-[523px]
 
../Asessts/hero.png
 

    </div>
 
<div className="min-h-[523px] bg-[linear-gradient(356.01deg,rgba(7,47,87,0.75)_50.8%,rgba(7,47,87,0)_94.58%),linear-gradient(0deg,rgba(7,47,87,0.45),rgba(7,47,87,0.45)),url(${heroImage})] bg-cover bg-center flex items-center justify-center flex-col gap-8 text-white">

 
../Hero.js
 
Asessts
 
D:\05.Git\35.New habot\habot-project\habot\src\Pages
 
 <section className="bg-orange-700 text-white">
        <div className="flex flex-col pt-20 px-5 gap-4 laptop:items-center">
          {/* Header div */}
          <div className="flex gap-4 flex-col items-center">
            <h1 className="text-3xl sm:text-4xl font-bold text-center sm:text-left text-white ">
              Are You a Supplier?
            </h1>
            <h2 className="text-2xl sm:text-4xl font-normal text-center sm:text-left text-white">
              Explore Matching Opportunities.
            </h2>
          </div>
          {/* inputs div */}

          <div className="flex flex-col laptop:items-center laptop:flex-row mobile:items-center gap-4">
            <input
              className="h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your required service here"
              style={{
                width:"400px",
                height: "50px",
                backgroundImage: `url(${sent})`,
                backgroundSize: "20px 20px", // Adjust the size of the icon
                backgroundPosition: "left 10px center", // Position the icon on the left, adjust spacing
                backgroundRepeat: "no-repeat",
                paddingLeft: "35px", // Adjust this so text doesn't overlap the icon
              }}
            />
            <input
              className=" h-12 px-6 py-6 rounded-lg border border-black text-black"
              placeholder="Search your required service here"
              style={{
                width:"400px",
                height: "50px",
                backgroundImage: `url(${address})`,
                backgroundSize: "20px 20px", // Adjust the size of the icon
                backgroundPosition: "left 10px center", // Position the icon on the left, adjust spacing
                backgroundRepeat: "no-repeat",
                paddingLeft: "35px", // Adjust this so text doesn't overlap the icon
              }}
            />
            <button
              className=" h-12 bg-[#00732f] text-white font-bold rounded-lg border border-black mobile:w-full"
              style={{ height: "54px",width:"117px" }}
            >
              Search
            </button>
          </div>

          {/* footer div */}
          <div className="hero-footer ">
            <b>Are you a buyer?</b>
            <a>Click here if you are looking to post a requirements</a>
          </div>
        </div>
      </section>
 
elf-start
 
sm:w-[45%]
 
sm:w-[45%]
 
sm:w-[15%]
 
sm:justify-center
 
 screens: {
        "tablets": "690px", // Custom breakpoint set to 777px
      },
 
<div>
            <b>Are you a buyer?</b>
            <span>Click here if you are looking to post a requirements</span>
          </div>
 

    // Hero section
    // <main>
    //   <div
    //     id="hero"
    //     className="flex flex-col justify-center items-center"
    //     style={{
    //       width: "100%",
    //       height: "60vh", // Set a fixed height for the hero section
    //       background: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%),
    //              linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)),
    //              url(${heroImage})`,
    //       backgroundSize: "cover", // Ensure the background image covers the entire section
    //       backgroundPosition: "center", // Keep the image centered
    //     }}
    //   >
    //     <div
    //       id="hero-container"
    //       className="max-w-4xl mx-auto px-6 pb-32 flex flex-col sm:items-start sm:text-left md:hidden justify-center gap-8"
    //       style={{
    //         marginTop: "120px",
    //       }}
    //     >
    //       {/* Heading Section */}
    //       <div className="flex gap-4 flex-col">
    //         <h1 className="text-3xl sm:text-4xl font-bold text-center sm:text-left text-white">
    //           Are You a Supplier?
    //         </h1>
    //         <h2 className="text-2xl sm:text-4xl font-normal text-center sm:text-left text-white">
    //           Explore Matching Opportunities.
    //         </h2>
    //       </div>

    //       {/* Input and Button Section */}
    //       <div className="flex flex-col sm:flex-row sm:justify-center sm:items-center gap-4">
    //         <input
    //           className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
    //           placeholder="Search your required service here"
    //           style={{
    //             height: "50px",
    //             backgroundImage: `url(${sent})`,
    //             backgroundSize: "20px 20px", // Adjust the size of the icon
    //             backgroundPosition: "left 10px center", // Position the icon on the left, adjust spacing
    //             backgroundRepeat: "no-repeat",
    //             paddingLeft: "35px", // Adjust this so text doesn't overlap the icon
    //           }}
    //         />
    //         <input
    //           className="w-full sm:w-[45%] h-12 px-6 py-6 rounded-lg border border-black text-black"
    //           placeholder="Search your required service here"
    //           style={{
    //             height: "50px",
    //             backgroundImage: `url(${address})`,
    //             backgroundSize: "20px 20px", // Adjust the size of the icon
    //             backgroundPosition: "left 10px center", // Position the icon on the left, adjust spacing
    //             backgroundRepeat: "no-repeat",
    //             paddingLeft: "35px", // Adjust this so text doesn't overlap the icon
    //           }}
    //         />
    //         <button
    //           className="w-full sm:w-[15%] h-12 bg-[#00732f] text-white font-bold rounded-lg border border-black"
    //           style={{ height: "54px" }}
    //         >
    //           Search
    //         </button>
    //       </div>

    //       <div className="hero-footer">
    //         <b>Are you a buyer?</b>
    //         <a>Click here if you are looking to post a requirements</a>
    //       </div>
    //     </div>
    //   </div>
    // </main>
 
 //
 
<div className="flex flex-col gap-3">
            <input placeholder="Search your required service here"></input>
            <input placeholder="Search your required service here"></input>
            <button>search</button>
          </div>
 
 <div className="flex flex-col gap-3">
            <h1>Are You a Supplier?</h1>
            <h2>Explore Matching Opportunities.</h2>
          </div>
 
module.export = {
  plugins: ["prettier-plugin-tailwindcss"],
}
 
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["*"],
  theme: {
    extend: {
      screens: {
        custom: "777px", // Custom breakpoint set to 777px
      },
      fontSize: {
        'sm': '0.75rem',   // Small size 12
        'base': '0.875rem', // Base size 14
        'md': '1rem',      // Medium size 16
        'lg': '1.25rem',  // Large size (you can adjust as needed) 20
        'xl': '1.5rem',   // Extra large size (you can adjust as needed) 24
        '2xl': '1.75rem',   // 2x large size (you can adjust as needed) 28
        '3xl': '2.25rem', // 3x large size (you can adjust as needed) 36
      },
    },
  },
  fontFamily: {
    display: ["Poppins", "sans-serif"], // Ensure this is correct
    body: ["Inter", "sans-serif"],      // Ensure this is correct
  },
  plugins: [require("tailwindcss"), require("autoprefixer")],
};

 
./dist/input.css
 
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["*"],
  theme: {
    extend: {
      screens: {
        custom: "777px", // Custom breakpoint set to 777px
      },
      fontSize: {
        'sm': '0.75rem',   // Small size
        'base': '0.875rem', // Base size
        'md': '1rem',      // Medium size
        'lg': '1.125rem',  // Large size (you can adjust as needed)
        'xl': '1.25rem',   // Extra large size (you can adjust as needed)
        '2xl': '1.75rem',   // 2x large size (you can adjust as needed)
        '3xl': '2.25rem', // 3x large size (you can adjust as needed)
      },
    },
  },
  fontFamily: {
    display: ["Poppins", "sans-serif"],
    body: ["Inter", "sans-serif"],
  },
  plugins: [require("tailwindcss"), require("autoprefixer")],
};

 
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["*"],
  theme: {
    extend: {
      screens: {
        custom: "680px", // Custom breakpoint 777px par set kiya
      },
      fontSize:{
        'sm': '0.75rem',
        "base":".875rem",
        "md":"1rem",
        'lg': '',
        'xl': '',
        '2xl': '',
        '3xl': '',
        },
      }
    },
  },
  fontFamily: {
    display: ["Poppins", "sans-serif"],
    body: ["Inter", "sans-serif"],
  },
  plugins: [require("tailwindcss"), require("autoprefixer")],
};

 

  fontFamily: {
    display: ["Poppins", "sans-serif"],
    body: ["Inter", "sans-serif"],
  },
 

        'xl': '18px',
        '2xl': '20px',
        '3xl': '24px',
        '4xl': '28px',
        '5xl': '32px',
        '6xl': '36px',
        '7xl': '40px',
 
./index.css
 

      marginLeft: "auto", // Align the div centrally
 
 {/* Mobile navigation menu (only shown when isMenuOpen is true) */}
      {isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden"
          style={{
            height: "20vh",
            width: "94%",
            marginLeft: "20px",
            marginTop: "65px",
            borderRadius: "20px", // Rounded corners
            backgroundColor: "white", // White background
            border: "1px solid rgba(0, 0, 0, 0.1)", // Light border with a soft color
            boxShadow: "0 4px 8px rgba(0, 0, 0, 0.3)", // Soft shadow effect
            padding: "25px", // Padding inside the box
          }}
        >
          <div id="nav-bar" className="flex justify-between items-center">
            {/* Left: Logo */}
            {/* <a href="#" className="flex gap-2 items-center">
              <img
                alt="Habot Logo"
                src={logo} // Update with actual logo path
                style={{
                  width: "100px",
                  height: "auto",
                }}
              />
            </a> */}

            {/* Right: Button to close menu */}
            {/* <button className="p-2 md:hidden" onClick={handleMenu}>
              <FontAwesomeIcon icon={faXmark} style={{ height: "25px" }} />
            </button> */}
          </div>

          {/* Mobile menu content */}
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? "page" : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === "Find Service Tags" && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: "7px",
                      cursor: "pointer",
                    }}
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black"
              style={{
                width: "193px",
                height: "50px",
                borderRadius: "5px",
                border: "1px solid #00732F",
                color: "#00732F",
                fontSize: "15px",
                fontWeight: "700",
                lineHeight: "24px",
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
 
<div
          id="nav-dailoge"
          className="fixed inset-0 px-6 md:hidden"
          style={{
            height: "20vh",
            width: "35%",
            marginLeft: "20px",
            marginTop: "65px",
            borderRadius: "20px", // Rounded corners
            backgroundColor: "white", // White background
            border: "1px solid rgba(0, 0, 0, 0.1)", // Light border with a soft color
            boxShadow: "0 4px 8px rgba(0, 0, 0, 0.3)", // Soft shadow effect
            padding: "25px", // Padding inside the box
          }}
        >
 
<div
          id="nav-dailoge"
          className="fixed bg-red-400 inset-0 px-6 md:hidden"
          style={{
            height: "20vh",
            width: "90%",
            marginLeft: "20px",
            marginTop: "65px",
            borderRadius: "20px",
            border: "1px solid black 0 1px 2px 0 rgb(0 0 0 / 0.05);",
            padding: "20px",
          }}
        >
 
 border:"1px solid black 0 1px 2px 0 rgb(0 0 0 / 0.05);",
 

          margin:"auto 0"
 
 <div
        id="hero"
        className="flex flex-col justify-center items-center"
        style={{
          width: "100%",
          height: "60vh", // Set a fixed height for the hero section
          background: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), 
                 linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)),
                 url(${heroImage})`,
          backgroundSize: "cover", // Ensure the background image covers the entire section
          backgroundPosition: "center", // Keep the image centered
        }}
      >
        <div
          id="hero-container"
          className="max-w-4xl mx-auto px-6 pb-32 flex flex-col sm:items-start sm:text-left md:hidden justify-center gap-8"
          style={{
            marginTop: "120px",
          }}
        >
          {/* Heading Section */}
          <div className="flex gap-4 flex-col">
            <h1 className="text-3xl sm:text-4xl font-bold text-center sm:text-left text-white">
              Are You a Supplier?
            </h1>
            <h2 className="text-2xl sm:text-4xl font-normal text-center sm:text-left text-white">
              Explore Matching Opportunities.
            </h2>
          </div>

          {/* Input and Button Section */}
          <div className="flex flex-col sm:flex-row sm:justify-center sm:items-center gap-4">
            <input
              className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your required service here"
              style={{
                height: "50px",
                backgroundImage: `url(${sent})`,
                backgroundSize: "20px 20px", // Adjust the size of the icon
                backgroundPosition: "left 10px center", // Position the icon on the left, adjust spacing
                backgroundRepeat: "no-repeat",
                paddingLeft: "35px", // Adjust this so text doesn't overlap the icon
              }}
            />
            <input
              className="w-full sm:w-[45%] h-12 px-8 py-6 rounded-lg border border-black text-black"
              placeholder="Search your required service here"
              style={{
                height: "50px",
                backgroundImage: `url(${address})`,
                backgroundSize: "20px 20px", // Adjust the size of the icon
                backgroundPosition: "left 10px center", // Position the icon on the left, adjust spacing
                backgroundRepeat: "no-repeat",
                paddingLeft: "35px", // Adjust this so text doesn't overlap the icon
              }}
            />
            <button
              className="w-full sm:w-[15%] h-12 bg-[#00732f] text-white font-bold rounded-lg border border-black"
              style={{ height: "54px" }}
            >
              Search
            </button>
          </div>

          <div className="hero-footer">
            <b>Are you a buyer?</b>
            <a>Click here if you are looking to post a requirements</a>
          </div>
        </div>
      </div>
 

                padding:"4px"
 

              style={{}}
 
placeholder 1.png
 
<input
              className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your desired location here"
              style={{ height: "50px" }}
            />
 
<input
              className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your required service here"
              style={{ height: "50px" }}
            />
 
<div className="relative w-full sm:w-[45%]">
              <input
                className="w-full h-12 px-8 py-3 rounded-lg border border-black text-black pl-12"
                placeholder="Search your required service here"
                style={{
                  backgroundImage: `url(${sent})`,
                  backgroundSize: "18px",
                  backgroundPosition: "15px center",
                  backgroundRepeat: "no-repeat",
                }}
              />
            </div>
 
class
 
  <div class="relative w-full sm:w-[45%]">
              <input
                class="w-full h-12 px-8 py-3 rounded-lg border border-black text-black pl-12"
                placeholder="Search your required service here"
                style="background-image: url(${sent}); background-size: 18px; background-position: 15px center; background-repeat: no-repeat;"
              />
            </div>
 
../assets/suitcase 1.png
 
          {/* Input and Button Section */}
          <div className="flex flex-col sm:flex-row sm:justify-center sm:items-center gap-4">
            <input
              className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your required service here"
              style={{ height: "50px" }}
            />
            <input
              className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your desired location here"
              style={{ height: "50px" }}
            />
            <button
              className="w-full sm:w-[15%] h-12 bg-[#00732f] text-white font-bold rounded-lg border border-black"
              style={{ height: "54px" }}
            >
              Search
            </button>
          </div>
 

              <img src/>
 
,
              <img />
 
"url('../assets/suitcase 1.png')"
 
 <div className="flex flex-col sm:flex-row sm:justify-center sm:items-center gap-4">
            <input
              className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your required service here"
              style={{ height: "50px" }}
            />
            <input
              className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your desired location here"
              style={{ height: "50px" }}
            />
            <button
              className="w-full sm:w-[15%] h-12 bg-[#00732f] text-white font-bold rounded-lg border border-black"
              style={{ height: "54px" }}
            >
              Search
            </button>
          </div>
 
"/images/sent.png"
 
<input
              className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your required service here"
              style={{ height: "50px" }}
            />
 

          style={{
            marginTop: "70px",
          }}
 
 <div
        id="hero"
        className="min-h-screen flex flex-col justify-center items-center"
        style={{
          width: "100%",
          minHeight: "40vh",
          background: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), 
                 linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)),
                 url(${heroImage})`,
        }}
 

            gap:"10px"
 
./Asessts/hero-habot.PNG
 
../Asessts/hero-habot.PNG
 
path/to/your/image.jpg
 
<div
        id="hero"
        className="min-h-screen bg-black-600 flex flex-col justify-center items-center"
        style={{
          width:"100%",
          minHeight: "523px",
          background:"linear-gradient(356.01deg,rgba(7, 47, 87, 0.75) 50.8%,rgba(7, 47, 87, 0) 94.58%),linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)),url("")}}
      >
 
backgroundImage: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)), url(${heroImage})`,
          backgroundPosition: 'center', // Ensures the image is centered
 
tyle={{
          backgroundImage: `linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)), url(${heroImage})`,
        }}
 
style={{
          backgroundImage: `url(${heroImage})`,
        }}
 
 style={{
            backgroundImage:`url('src/Pages/Asessts/hero-habot.PNG')`,
        }}
 
      <div
        id="hero"
        className="min-h-screen bg-black-600 flex flex-col justify-center items-center"
      >
        <div
          id="hero-container"
          className="max-w-4xl mx-auto px-6 pb-32 flex flex-col gap-8 sm:items-start sm:text-left"
        >
          {/* Heading Section */}
          <h1 className="text-3xl sm:text-4xl font-bold text-center sm:text-left text-black mt-8">
            Are You a Supplier?
          </h1>
          <h2 className="text-2xl sm:text-4xl font-normal text-center sm:text-left text-black">
            Explore Matching Opportunities.
          </h2>

          {/* Input and Button Section */}
          <div className="flex flex-col gap-4 sm:flex-row sm:justify-center sm:items-center mt-8">
            <input
              className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your required service here"
              style={{ height: "50px" }}
            />
            <input
              className="w-full sm:w-[45%] h-12 px-8 py-3 rounded-lg border border-black text-black"
              placeholder="Search your desired location here"
              style={{ height: "50px" }}
            />
            <button
              className="w-full sm:w-[15%] h-12 bg-[#00732f] text-white font-bold rounded-lg border border-black"
              style={{ height: "54px" }}
            >
              Search
            </button>
          </div>
          <div className="hero-footer">
            <b>Are you a buyer?</b>
            <a>Click here if you are looking to post a requirements</a>
          </div>
        </div>
      </div>
 

{
 
}

 
 <div id="hero" className="min-h-screen bg-black-600">
        <div
          id="hero-container"
          className="max-w-4xl mx-auto px-6 pb-32 flex flex-col gap-4 sm:items-center sm:text-center"
        >
          <h1
            className="flex items-center"
            style={{
              marginTop: "30px",
              fontSize: "35px",
              color: "black",
              fontWeight: "700",
              textAlign: "center",
            }}
          >
            Are You a Supplier?
          </h1>
          <h2
            style={{
              fontSize: "40px",
              color: "black",
              fontWeight: "400",
              lineHeight: "66px",
            }}
          >
            Explore Matching Opportunities.
          </h2>
          <div className="flex flex-col gap-4 sm:flex-row">
            <input
              className="px-8 py-3 rounded-lg"
              placeholder="Search your required service here"
              style={{
                height: "50px",
                border: "1px solid black",
              }}
            />
            <input
              className="icon-input"
              placeholder="Search your desired location here"
              style={{
                height: "50px",
                border: "1px solid black",
              }}
            />
            <button
              className="hero-btn"
              style={{
                border: "1px solid black",
                height: "54px",
              }}
            >
              Search
            </button>
          </div>
        </div>
      </div>
 

              marginTop: "30px",
 

                width: "100%",
 
icon-input
 
input-section
 

                width: "50%",
 

                width: "100%",
 
 <h3>Are you a buyer?</h3>
              <a>Click here if you are looking to post a requirements</a>
 

            </span>
 

            <span>
 
import { width } from "@fortawesome/free-solid-svg-icons/fa0";

 

          <input></input>
 
@layer base{
    body{
        @apply font-body;
    }
}
 

    <div
      className="hero container py-8 flex flex-col justify-center items-center"
      style={{
        background: "linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)), url('../assets/hero-habot.PNG')",
        backgroundSize: "cover",
        backgroundPosition: "center",
      }}
    >
      <div className="hero-text text-center max-w-[935px] mb-4 mt-8">
        <h1 className="text-white text-3xl font-semibold mb-2 mt-6">Are You a Supplier?</h1>
        <h3 className="text-white text-4xl font-light">Explore Matching Opportunities.</h3>
      </div>

      <div className="hero-inputs flex justify-center items-center space-x-4 mt-6 max-w-[935px] w-full">
        <input
          className="icon-input px-4 py-3 rounded-lg border border-transparent bg-white text-black placeholder-black w-1/2 sm:w-full"
          placeholder="Search your required service here"
          style={{
            backgroundImage: "url('../assets/suitcase 1.png')",
            backgroundSize: "18px",
            backgroundPosition: "15px center",
            backgroundRepeat: "no-repeat",
          }}
        />
        <input
          className="icon-input px-4 py-3 rounded-lg border border-transparent bg-white text-black placeholder-black w-1/2 sm:w-full"
          placeholder="Search your desired location here"
          style={{
            backgroundImage: "url('../assets/placeholder 1.png')",
            backgroundSize: "18px",
            backgroundPosition: "15px center",
            backgroundRepeat: "no-repeat",
          }}
        />
        <button
          className="hero-btn bg-[#00732f] text-white py-3 px-6 rounded-lg font-bold w-1/4 sm:w-full"
          style={{ width: "120px", height: "56px" }}
        >
          Search
        </button>
      </div>

      <div className="hero-footer text-center mt-6">
        <b className="text-white text-lg font-bold">Are you a buyer?</b>
        <a href="#" className="text-white underline ml-2 text-lg">
          Click here if you are looking to post a requirement
        </a>
      </div>
 
HeroSection
 
import React from "react";

function Hero() {
  return (
    // Hero section
    <main>
      <div id="hero" className="min-h-screen bg-black-600">
        <div
          className="hero container bg-cover bg-center relative py-8 px-4 flex flex-col justify-center items-center"
          style="background: linear-gradient(356.01deg, rgba(7, 47, 87, 0.75) 50.8%, rgba(7, 47, 87, 0) 94.58%), linear-gradient(0deg, rgba(7, 47, 87, 0.45), rgba(7, 47, 87, 0.45)), url('../assets/hero-habot.PNG');"
        >
          <div className="hero-text text-center max-w-[935px] mb-4 mt-8">
            <h1 className="text-white text-3xl font-semibold mb-2 mt-6">
              Are You a Supplier?
            </h1>
            <h3 className="text-white text-4xl font-light">
              Explore Matching Opportunities.
            </h3>
          </div>

          <div className="hero-inputs flex justify-center items-center space-x-4 mt-6 max-w-[935px] w-full">
            <input
              className="icon-input px-4 py-3 rounded-lg border border-transparent bg-white text-black placeholder-black w-1/2 sm:w-full"
              placeholder="Search your required service here"
              style="background-image: url('../assets/suitcase 1.png'); background-size: 18px; background-position: 15px center; background-repeat: no-repeat;"
            />
            <input
              className="icon-input px-4 py-3 rounded-lg border border-transparent bg-white text-black placeholder-black w-1/2 sm:w-full"
              placeholder="Search your desired location here"
              style="background-image: url('../assets/placeholder 1.png'); background-size: 18px; background-position: 15px center; background-repeat: no-repeat;"
            />
            <button className="hero-btn bg-[#00732f] text-white py-3 px-6 rounded-lg font-bold w-1/4 sm:w-full">
              Search
            </button>
          </div>

          <div className="hero-footer text-center mt-6">
            <b className="text-white text-lg font-bold">Are you a buyer?</b>
            <a href="#" className="text-white underline ml-2 text-lg">
              Click here if you are looking to post a requirement
            </a>
          </div>
        </div>
      </div>
    </main>
  );
}

export default Hero;

 
class
 
hero" className='
 
'./Pages/Home/Home
 
// import {
//   Disclosure,
//   DisclosureButton,
//   DisclosurePanel,
//   Menu,
//   MenuButton,
//   MenuItem,
//   MenuItems,
// } from "@headlessui/react";
// import { Bars3Icon, BellIcon, XMarkIcon } from "@heroicons/react/24/outline";
import logo from "../Asessts/logo.png";
import dropVec from "../Asessts/dropVec.png";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBars, faXmark } from "@fortawesome/free-solid-svg-icons";
import React, { useState } from "react";
import { height, width } from "@fortawesome/free-solid-svg-icons/fa0";

const navigation = [
  { name: "Find Suppliers", href: "#", current: false },
  { name: "Find Service Tags", href: "#", current: false },
  // { name: "Dashboard", href: "#", current: true }
];

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

export default function Example() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const handleMenu = () => {
    setIsMenuOpen(!isMenuOpen); // Toggle the menu state
  };
  return (
    <nav
      className="px-8 py-2 flex justify-between items-center"
      style={{
        height: "65px",
        background: "gray",
      }}
    >
      <a href="#" className="flex items-center">
        <img
          alt="Habot Logo"
          src={logo}
          style={{
            width: "181px",
            height: "auto",
          }}
        />
      </a>

      <div
        className="hidden md:flex space-x-4 justify-center items-center"
        style={{
          color: "#6D6E71",
          lineHeight: "24px",
          fontSize: "15.25px",
          fontWeight: "400",
          gap: "30px",
        }}
      >
        {navigation.map((item) => (
          <div key={item.name} className="flex items-center">
            <a
              href={item.href}
              aria-current={item.current ? "page" : undefined}
              className={classNames(item.current)}
            >
              {item.name}
            </a>

            {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
            {item.name === "Find Service Tags" && (
              <img
                src={dropVec}
                alt="Dropdown"
                style={{
                  marginLeft: "7px",
                  cursor: "pointer",
                }} // Adjust size as needed
              />
            )}
          </div>
        ))}

        <button
          className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
          style={{
            width: "193px",
            height: "50px",
            borderRadius: "5px",
            border: "1px solid #00732F",
            color: "#00732F",
            fontSize: "15px",
            fontWeight: "700",
            lineHeight: "24px",
          }}
        >
          Login / Signup
        </button>
      </div>

      <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={isMenuOpen ? faXmark : faBars} />
      </button>

      {/* Conditional rendering of the navigation menu */}
      {isMenuOpen && (
        <div
          id="nav-dailoge"
          className="fixed bg-white-500 inset-0 px-6 md:hidden"
        >
          <div id="nav-bar" className="flex justify-between items-center">
            {/* Left: Logo */}
            <a href="#" className="flex gap-2 items-center">
              <img
                alt="Habot Logo"
                src={logo} // Update with actual logo path
                style={{
                  width: "100px",
                  height: "auto",
                }}
              />
            </a>

            {/* Right: Button to close menu */}
            <button className="p-2 md:hidden" onClick={handleMenu}>
              <FontAwesomeIcon icon={faXmark} style={{ height: "25px" }} />
            </button>
          </div>
          <div className="flex-1 gap-4 flex flex-col md:flex-row">
            

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-black"
              style={{
                width: "193px",
                height: "50px",
                borderRadius: "5px",
                border: "1px solid #00732F",
                color: "#00732F",
                fontSize: "15px",
                fontWeight: "700",
                lineHeight: "24px",
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      )}
    </nav>
  );
}

 
{navigation.map((item) => (
              <div key={item.name} className="flex items-center space-x-4">
                <a
                  href={item.href}
                  aria-current={item.current ? "page" : undefined}
                  className={classNames(
                    item.current,
                    "transition duration-300 ease-in-out hover:text-green-500"
                  )}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === "Find Service Tags" && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: "7px",
                      cursor: "pointer",
                      transition: "transform 0.3s ease",
                    }}
                    className="hover:rotate-180"
                  />
                )}
              </div>
            ))}
 
{navigation.map((item) => (
              <div key={item.name} className="flex items-center space-x-4">
                <a
                  href={item.href}
                  aria-current={item.current ? "page" : undefined}
                  className={classNames(
                    item.current,
                    "transition duration-300 ease-in-out hover:text-green-500"
                  )}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === "Find Service Tags" && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: "7px",
                      cursor: "pointer",
                      transition: "transform 0.3s ease",
                    }}
                    className="hover:rotate-180"
                  />
                )}
              </div>
            ))}

            {/* Login / Signup button with hover animation */}
            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-all duration-300 ease-in-out hover:bg-green-500 hover:text-white"
              style={{
                width: "193px",
                height: "50px",
                borderRadius: "5px",
                border: "1px solid #00732F",
                color: "#00732F",
                fontSize: "15px",
                fontWeight: "700",
                lineHeight: "24px",
              }}
            >
              Login / Signup
            </button>
 

        </div>
 

          <div className="flex-1 flex flex-col md:flex-row"
 

            </div>
 
 style={{
            gap:"30px"
          }}>
            <div style={{
              display:'flex',
              flexDirection:"column",
              gap:"20px",
              marginLeft:"25px"
            }}>
 
gap-4
 
 <div className="flex-1 gap-4">
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? "page" : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === "Find Service Tags" && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: "7px",
                      cursor: "pointer",
                    }} // Adjust size as needed
                  />
                )}
              </div>
            ))}
            <button
            className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            style={{
              width: "193px",
              height: "50px",
              borderRadius: "5px",
              border: "1px solid #00732F",
              color: "#00732F",
              fontSize: "15px",
              fontWeight: "700",
              lineHeight: "24px",
            }}
          >
            Login / Signup
          </button>
          </div>
 

          <div>
           
          </div>
 
width: "10px"
 
justify-between items-center
 
your-logo-path.png"
 
 <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={faBars} />
      </button>

      <div id='nav-dailoge' className="fixed bg-red-500 inset-0 px-8">
        <div id="nav-bar" className="flex justify-between items-center">
          {/* Left: Logo */}
          <a href="#" className="flex gap-2 items-center">
            <img
              alt="Habot Logo"
              src={logo}
              style={{
                width: "181px",
                height: "auto",
              }}
            />
          </a>

          {/* Right: Button */}
          <button className="p-2 md:hidden" onClick={handleMenu}>
            <FontAwesomeIcon icon={faXmark} />
          </button>
        </div>
      </div>
 
const handleMenu = () => {
    console.log("Menu clicked");
  };
 

import useState from "react";
 
 <div className="fixed bg-red-500 inset-0 p-4">
        <div id="nav-bar" className="flex justify-between">
          <a href="#" className="flex gap-2 items-center">
            <img
              alt="Habot Logo"
              src={logo}
              style={{
                width: "181px",
                height: "auto",
              }}
            />
          </a>
        </div>
        <button className="p-2 md:hidden" onClick={handleMenu}>
          <FontAwesomeIcon icon={faXmark} />
        </button>
      </div>
 
"fa-solid fa-xmark"
 

        <FontAwesomeIcon icon={faBars} />
 
../Assets/dropVec.png
 
../Assets/logo.png
 
// import {
//   Disclosure,
//   DisclosureButton,
//   DisclosurePanel,
//   Menu,
//   MenuButton,
//   MenuItem,
//   MenuItems,
// } from "@headlessui/react";
// import { Bars3Icon, BellIcon, XMarkIcon } from "@heroicons/react/24/outline";
import logo from "../Asessts/logo.png";
import dropVec from "../Asessts/dropVec.png";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBars } from "@fortawesome/free-solid-svg-icons";
import useState from "react";

const navigation = [
  { name: "Find Suppliers", href: "#", current: false },
  { name: "Find Service Tags", href: "#", current: false },
  // { name: "Dashboard", href: "#", current: true }
];

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

export default function Example() {
  const handleMenu = () => {
    console.log("Menu clicked");
  };
  return (
    <nav
      className="px-8 py-2 flex justify-between items-center"
      style={{
        height: "65px",
        background: "gray",
      }}
    >
      <a href="#" className="flex items-center">
        <img
          alt="Habot Logo"
          src={logo}
          style={{
            width: "181px",
            height: "auto",
          }}
        />
      </a>

      <div
        className="hidden md:flex space-x-4 justify-center items-center"
        style={{
          color: "#6D6E71",
          lineHeight: "24px",
          fontSize: "15.25px",
          fontWeight: "400",
          gap: "30px",
        }}
      >
        {navigation.map((item) => (
          <div key={item.name} className="flex items-center">
            <a
              href={item.href}
              aria-current={item.current ? "page" : undefined}
              className={classNames(item.current)}
            >
              {item.name}
            </a>

            {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
            {item.name === "Find Service Tags" && (
              <img
                src={dropVec}
                alt="Dropdown"
                style={{
                  marginLeft: "7px",
                  cursor: "pointer",
                }} // Adjust size as needed
              />
            )}
          </div>
        ))}

        <button
          className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
          style={{
            width: "193px",
            height: "50px",
            borderRadius: "5px",
            border: "1px solid #00732F",
            color: "#00732F",
            fontSize: "15px",
            fontWeight: "700",
            lineHeight: "24px",
          }}
        >
          Login / Signup
        </button>
      </div>

      <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={faBars} />
      </button>

      <div className="fixed bg-red-500 inset-0 ">
        <div id='nav-bar'>
        <a href="#" className="flex items-center">
        <img
          alt="Habot Logo"
          src={logo}
          style={{
            width: "181px",
            height: "auto",
          }}
        />
      </a>
        </div>
        <button className="p-2 md:hidden" onClick={handleMenu}>
        <FontAwesomeIcon icon={faBars} />
      </button>
      </div>
    </nav>
  );
}

 

        </div>
 

        <div className="md:hidden md:ml-8">
 

        <div className="md:hidden md:ml-8">
 

        {/* Image aligned to the left */}
 

      <div className="flex flex-1 items-center justify-between">
 

      </div>
 

      <div className="flex flex-1 items-center justify-between">
 

  // Function to toggle the menu
  const handleMenu = () => {
    setIsMenuOpen(!isMenuOpen); // Toggle menu visibility
  };
 
  const [isMenuOpen, setIsMenuOpen] = useState(false); // State to manage menu visibility

 
// import {
//   Disclosure,
//   DisclosureButton,
//   DisclosurePanel,
//   Menu,
//   MenuButton,
//   MenuItem,
//   MenuItems,
// } from "@headlessui/react";
// import { Bars3Icon, BellIcon, XMarkIcon } from "@heroicons/react/24/outline";
import logo from "../Asessts/logo.png";
import dropVec from "../Asessts/dropVec.png";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBars } from "@fortawesome/free-solid-svg-icons";
import { useState } from 'react';

const navigation = [
  { name: "Find Suppliers", href: "#", current: false },
  { name: "Find Service Tags", href: "#", current: false },
  // { name: "Dashboard", href: "#", current: true }
];

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

export default function Example() {
  const [isMenuOpen, setIsMenuOpen] = useState(false); // State to manage menu visibility

  // Function to toggle the menu
  const handleMenu = () => {
    setIsMenuOpen(!isMenuOpen); // Toggle menu visibility
  };

  return (
    <nav
      className="px-8 py-2 flex justify-between items-center"
      style={{
        height: "65px",
        background: "gray",
      }}
    >
      <div className="flex flex-1 items-center justify-between">
        {/* Image aligned to the left */}
        <div className="flex items-center mr-auto sm:ml-0">
          <img
            alt="Habot Logo"
            src={logo}
            style={{
              width: "181px",
              height: "auto",
            }}
          />
        </div>

        <div className={`hidden md:ml-8 sm:block ${isMenuOpen ? 'block' : 'hidden'}`}>
          <div
            className="flex space-x-4 justify-center items-center"
            style={{
              color: "#6D6E71",
              lineHeight: "24px",
              fontSize: "15.25px",
              fontWeight: "400",
              gap: "30px",
            }}
          >
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? "page" : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === "Find Service Tags" && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: "7px",
                      cursor: "pointer",
                    }} // Adjust size as needed
                  />
                )}
              </div>
            ))}

            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              style={{
                width: "193px",
                height: "50px",
                borderRadius: "5px",
                border: "1px solid #00732F",
                color: "#00732F",
                fontSize: "15px",
                fontWeight: "700",
                lineHeight: "24px",
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      </div>

      {/* Hamburger icon button */}
      <button
        className="p-2 md:hidden"
        onClick={handleMenu} // Trigger the menu toggle
      >
        <FontAwesomeIcon icon={faBars} />
      </button>
    </nav>
  );
}

 

import useState from 'react'
 

    <nav
      className="px-8 py-2 flex justify-between items-center"
      style={{
        height: "65px",
        background: "gray",
      }}
    >
      <div className="flex flex-1 items-center justify-between">
        {/* Image aligned to the left */}
        <div className="flex items-center mr-auto sm:ml-0">
          <img
            alt="Habot Logo"
            src={logo}
            style={{
              width: "181px",
              height: "auto",
            }}
          />
        </div>

        <div className="hidden md:ml-8 sm:block">
          <div
            className="flex space-x-4 justify-center items-center"
            style={{
              color: "#6D6E71",
              lineHeight: "24px",
              fontSize: "15.25px",
              fontWeight: "400",
              gap: "30px",
            }}
          >
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? "page" : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === "Find Service Tags" && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: "7px",
                      cursor: "pointer",
                    }} // Adjust size as needed
                  />
                )}
              </div>
            ))}

            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              style={{
                width: "193px",
                height: "50px",
                borderRadius: "5px",
                border: "1px solid #00732F",
                color: "#00732F",
                fontSize: "15px",
                fontWeight: "700",
                lineHeight: "24px",
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      </div>

      <button className="p-2 md:hidden" onClick="handleMenu()">
        <FontAwesomeIcon icon={faBars} />
      </button>
    </nav>
 

import useState from
 
// import {
//   Disclosure,
//   DisclosureButton,
//   DisclosurePanel,
//   Menu,
//   MenuButton,
//   MenuItem,
//   MenuItems,
// } from "@headlessui/react";
// import { Bars3Icon, BellIcon, XMarkIcon } from "@heroicons/react/24/outline";
import logo from "../Asessts/logo.png";
import dropVec from "../Asessts/dropVec.png";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBars } from "@fortawesome/free-solid-svg-icons";

const navigation = [
  { name: "Find Suppliers", href: "#", current: false },
  { name: "Find Service Tags", href: "#", current: false },
  // { name: "Dashboard", href: "#", current: true }
];

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

export default function Example() {
  return (
    <nav
      className="px-8 py-2 flex justify-between items-center"
      style={{
        height: "65px",
        background: "gray",
      }}
    >
      <div className="flex flex-1 items-center justify-between">
        {/* Image aligned to the left */}
        <div className="flex items-center mr-auto sm:ml-0">
          <img
            alt="Habot Logo"
            src={logo}
            style={{
              width: "181px",
              height: "auto",
            }}
          />
        </div>

        <div className="hidden md:ml-8 sm:block">
          <div
            className="flex space-x-4 justify-center items-center"
            style={{
              color: "#6D6E71",
              lineHeight: "24px",
              fontSize: "15.25px",
              fontWeight: "400",
              gap: "30px",
            }}
          >
            {navigation.map((item) => (
              <div key={item.name} className="flex items-center">
                <a
                  href={item.href}
                  aria-current={item.current ? "page" : undefined}
                  className={classNames(item.current)}
                >
                  {item.name}
                </a>

                {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                {item.name === "Find Service Tags" && (
                  <img
                    src={dropVec}
                    alt="Dropdown"
                    style={{
                      marginLeft: "7px",
                      cursor: "pointer",
                    }} // Adjust size as needed
                  />
                )}
              </div>
            ))}

            <button
              className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              style={{
                width: "193px",
                height: "50px",
                borderRadius: "5px",
                border: "1px solid #00732F",
                color: "#00732F",
                fontSize: "15px",
                fontWeight: "700",
                lineHeight: "24px",
              }}
            >
              Login / Signup
            </button>
          </div>
        </div>
      </div>

      <button className="p-2 md:hidden" onClick="handleMenu()">
        <FontAwesomeIcon icon={faBars} />
      </button>
    </nav>
  );
}

 

    // <Disclosure as="nav" style={{ background: "white", height: "82px" }}>
    //   <div className="mx-auto max-w-7xl py-2 px-2 sm:px-6 lg:px-8">
    //     <div className="relative flex h-16 items-center justify-between">
    //       <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
    //         {/* Mobile menu button */}
    //         <DisclosureButton className="group relative inline-flex items-center justify-center rounded-md p-2 text-gray-800 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
    //           <span className="absolute -inset-0.5" />
    //           <span className="sr-only">Open main menu</span>
    //           <Bars3Icon
    //             aria-hidden="true"
    //             className="block size-6 group-data-[open]:hidden"
    //           />
    //           <XMarkIcon
    //             aria-hidden="true"
    //             className="hidden size-6 group-data-[open]:block"
    //           />
    //         </DisclosureButton>
    //       </div>
    //       <div className="flex flex-1 items-center justify-between">
    //         {/* Image aligned to the left */}
    //         <div className="flex items-center ml-auto sm:ml-0">
    //           <img
    //             alt="Habot Logo"
    //             src={logo}
    //             style={{
    //               width: "181px",
    //               height: "auto",
    //             }}
    //           />
    //         </div>

    //         <div className="hidden sm:ml-6 sm:block">
    //           <div
    //             className="flex space-x-4 justify-center items-center"
    //             style={{
    //               color: "#6D6E71",
    //               lineHeight: "24px",
    //               fontSize: "15.25px",
    //               fontWeight: "400",
    //               gap: "30px",
    //             }}
    //           >
    //             {navigation.map((item) => (
    //               <div key={item.name} className="flex items-center">
    //                 <a
    //                   href={item.href}
    //                   aria-current={item.current ? "page" : undefined}
    //                   className={classNames(item.current)}
    //                 >
    //                   {item.name}
    //                 </a>

    //                 {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
    //                 {item.name === "Find Service Tags" && (
    //                   <img
    //                     src={dropVec}
    //                     alt="Dropdown"
    //                     style={{
    //                       marginLeft: "7px",
    //                       cursor: "pointer",
    //                     }} // Adjust size as needed
    //                   />
    //                 )}
    //               </div>
    //             ))}

    //             <button
    //               className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
    //               style={{
    //                 width: "193px",
    //                 height: "50px",
    //                 borderRadius: "5px",
    //                 border: "1px solid #00732F",
    //                 color: "#00732F",
    //                 fontSize: "15px",
    //                 fontWeight: "700",
    //                 lineHeight: "24px",
    //               }}
    //             >
    //               Login / Signup
    //             </button>
    //           </div>
    //         </div>
    //       </div>
    //     </div>
    //   </div>

    //   {/* Mobile menu items */}
    //   <DisclosurePanel className="sm:hidden shadow-lg w-10 mx-auto px-4 py-2">
    //     <div className="space-y-1 px-2 pb-3 pt-2">
    //       {navigation.map((item) => (
    //         <DisclosureButton
    //           key={item.name}
    //           as="a"
    //           href={item.href}
    //           aria-current={item.current ? "page" : undefined}
    //           className={classNames(
    //             item.current,
    //             "block rounded-md px-4 py-4 text-base font-medium"
    //           )}
    //         >
    //           {item.name}
    //         </DisclosureButton>
    //       ))}

    //       <button
    //         className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
    //         style={{
    //           width: "163px",
    //           height: "50px",
    //           borderRadius: "5px",
    //           border: "1px solid #00732F",
    //           color: "#00732F",
    //           fontSize: "15px",
    //           fontWeight: "700",
    //           lineHeight: "24px",
    //         }}
    //       >
    //         Login / Signup
    //       </button>
    //     </div>
    //   </DisclosurePanel>
    // </Disclosure>
 
 <a href="#" id="habot" className="flex gap-2 items-center">
        <img
          className="object-cover"
          alt="Habot Logo"
          src={logo}
          style={{
            width: "181px",
            height: "auto",
          }}
        />
      </a>
      <div id="nav-menu" className='gap-12'>
        <a href="#" >
          hello
        </a>
        <a href="#">
          world
        </a>
        <button
          className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
          style={{
            width: "193px",
            height: "50px",
            borderRadius: "5px",
            border: "1px solid #00732F",
            color: "#00732F",
            fontSize: "15px",
            fontWeight: "700",
            lineHeight: "24px",
          }}
        >
          Login / Signup
        </button>
      </div>
 
<div id="nav-menu" className='gap-12'>
        <a href="#" >
          hello
        </a>
        <a href="#">
          world
        </a>
        <button
          className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
          style={{
            width: "193px",
            height: "50px",
            borderRadius: "5px",
            border: "1px solid #00732F",
            color: "#00732F",
            fontSize: "15px",
            fontWeight: "700",
            lineHeight: "24px",
          }}
        >
          Login / Signup
        </button>
      </div>

 
 className
 
className
 
"fa-solid fa-bars"
 

import { faBars } from "@fortawesome/free-solid-svg-icons";
 

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBars } from "@fortawesome/free-solid-svg-icons";
 

import { fontAwesome } from "@fortawesome/free-solid-svg-icons"

 
<i className="fa-solid fa-bars text-gray-700"></i>
 
<img />
 
 bg-white
 
<DisclosurePanel className="sm:hidden">
        <div className="space-y-1 px-2 pb-3 pt-2">
          {navigation.map((item) => (
            <DisclosureButton
              key={item.name}
              as="a"
              href={item.href}
              aria-current={item.current ? "page" : undefined}
              className={classNames(
                item.current,
                "block rounded-md px-4 py-4 text-base font-medium",
              )}
            >
              {item.name}
            </DisclosureButton>
            
          ))}
          <button
                  className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  style={{
                    width: "163px",
                    height: "50px",
                    borderRadius: "5px",
                    border: "1px solid #00732F",
                    color: "#00732F",
                    fontSize:"15px",
                    fontWeight:"700",
                    lineHeight:"24px"
                  }}
                >
                  Login / Signup
                </button>
        </div>
      </DisclosurePanel>
 
<DisclosurePanel className="sm:hidden">
        <div className="space-y-1 px-2 pb-3 pt-2">
          {navigation.map((item) => (
            <DisclosureButton
              key={item.name}
              as="a"
              href={item.href}
              aria-current={item.current ? "page" : undefined}
              className={classNames(
                item.current,
                "block rounded-md px-4 py-4 text-base font-medium",
              )}
            >
              {item.name}
            </DisclosureButton>
            
          ))}
          <button
                  className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  style={{
                    width: "163px",
                    height: "50px",
                    borderRadius: "5px",
                    border: "1px solid #00732F",
                    color: "#00732F",
                    fontSize:"15px",
                    fontWeight:"700",
                    lineHeight:"24px"
                  }}
                >
                  Login / Signup
                </button>
        </div>
      </DisclosurePanel>
 
<DisclosurePanel className="sm:hidden">
        <div className="space-y-1 px-2 pb-3 pt-2">
          {navigation.map((item) => (
            <DisclosureButton
              key={item.name}
              as="a"
              href={item.href}
              aria-current={item.current ? "page" : undefined}
              className={classNames(
                item.current,
                "block rounded-md px-4 py-4 text-base font-medium",
              )}
            >
              {item.name}
            </DisclosureButton>
            
          ))}
          <button
                  className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  style={{
                    width: "163px",
                    height: "50px",
                    borderRadius: "5px",
                    border: "1px solid #00732F",
                    color: "#00732F",
                    fontSize:"15px",
                    fontWeight:"700",
                    lineHeight:"24px"
                  }}
                >
                  Login / Signup
                </button>
        </div>
      </DisclosurePanel>
 
style={{}}
 

                  ? "bg-gray-900 text-white"
                  : "text-gray-300 hover:bg-gray-700 hover:text-white",
 

                  ? "bg-gray-900 text-white"
                  : "text-gray-300 hover:bg-gray-700 hover:text-white",
                "block rounded-md px-3 py-2 text-base font-medium"
 

                    alignItems:"center"
 

                className="w-1/3 custom:w-1/3"
 
import {
  Disclosure,
  DisclosureButton,
  DisclosurePanel,
  Menu,
  MenuButton,
  MenuItem,
  MenuItems,
} from "@headlessui/react";
import { Bars3Icon, BellIcon, XMarkIcon } from "@heroicons/react/24/outline";
import logo from "../Asessts/logo.png";
import dropVec from "../Asessts/dropVec.png";

const navigation = [
  { name: "Find Suppliers", href: "#", current: false },
  { name: "Find Service Tags", href: "#", current: false },
  // { name: "Dashboard", href: "#", current: true }
];

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

export default function Example() {
  return (
    <Disclosure as="nav" style={{ background: "red" ,height:"82px"}}>
      <div className="mx-auto max-w-7xl py-2 px-2 sm:px-6 lg:px-8">
        <div className="relative flex h-16 items-center justify-between">
          <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
            {/* Mobile menu button */}
            <DisclosureButton className="group relative inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
              <span className="absolute -inset-0.5" />
              <span className="sr-only">Open main menu</span>
              <Bars3Icon
                aria-hidden="true"
                className="block size-6 group-data-[open]:hidden"
              />
              <XMarkIcon
                aria-hidden="true"
                className="hidden size-6 group-data-[open]:block"
              />
            </DisclosureButton>
          </div>
          <div className="flex flex-1 items-center justify-between">
            {/* Image aligned to the left */}
            <div className="flex items-center ml-auto sm:ml-0">
              <img
                alt="Habot Logo"
                src={logo}
                style={{
                  width: "181px",
                  height: "auto",
                }}
              />
            </div>

            <div className="hidden sm:ml-6 sm:block">
              <div
                className="flex space-x-4 justify-center items-center"
                style={{
                  color: "#6D6E71",
                  lineHeight: "24px",
                  fontSize: "15.25px",
                  fontWeight: "400",
                  gap: "30px",
                }}
              >
                {navigation.map((item) => (
                  <div key={item.name} className="flex items-center">
                    <a
                      href={item.href}
                      aria-current={item.current ? "page" : undefined}
                      className={classNames(item.current)}
                    >
                      {item.name}
                    </a>

                    {/* Check if this is the "Find Service Tags" item, then show the dropdown icon */}
                    {item.name === "Find Service Tags" && (
                      <img
                        src={dropVec}
                        alt="Dropdown"
                        style={{
                          marginLeft:"7px",
                          cursor:"pointer"
                        }} // Adjust size as needed
                      />
                    )}
                  </div>
                ))}

                <button
                  className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  style={{
                    width: "193px",
                    height: "50px",
                    borderRadius: "5px",
                    border: "1px solid #00732F",
                    color: "#00732F",
                  }}
                >
                  Login / Signup
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Mobile menu items */}
      <DisclosurePanel className="sm:hidden">
        <div className="space-y-1 px-2 pb-3 pt-2">
          {navigation.map((item) => (
            <DisclosureButton
              key={item.name}
              as="a"
              href={item.href}
              aria-current={item.current ? "page" : undefined}
              className={classNames(
                item.current
                  ? "bg-gray-900 text-white"
                  : "text-gray-300 hover:bg-gray-700 hover:text-white",
                "block rounded-md px-3 py-2 text-base font-medium"
              )}
            >
              {item.name}
            </DisclosureButton>
          ))}
        </div>
      </DisclosurePanel>
    </Disclosure>
  );
}

 
sm
 
hidden sm:ml-6 sm:block
 
className="ml-4 h-4 w-auto"
 


            {/* Navigation aligned to the right */}
            import dropVec from "../Assets/dropVec.png";  // Import the image
 

const navigation = [
  { name: "Find Suppliers", href: "#", current: false },
  { name: "Find Service Tags", href: "#", current: false },
  // { name: "Dashboard", href: "#", current: true }
];
 
<div className="hidden sm:ml-6 sm:block">
              <div
                className="flex space-x-4 justify-center items-center"
                style={{
                  color:"#6D6E71",
                  lineHeight:"24px",
                  fontSize:"14.25px",
                  fontWeight:"400",
                  gap:"30px"
                }}
              >
                {navigation.map((item) => (
                  <a
                    key={item.name}
                    href={item.href}
                    aria-current={item.current ? "page" : undefined}
                    className={classNames(item.current)}
                  >
                    {item.name}
                  </a>
                ))}

                <button
                  className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  style={{
                    width: "193px",
                    height: "50px",
                    borderRadius: "5px",
                    border: "1px solid #00732F",
                    color: "#00732F",
                  }}
                >
                  Login / Signup
                </button>
              </div>
            </div>
 

                  marginRight:
 
 ? "text-black"
                        : "text-black",
                      "rounded-md px-3 py-2 text-sm font-medium"
 

                      "rounded-md px-3 py-2 text-sm font-medium"
 
300 hover:bg-white- hover:text-black
 
bg-white-900
 
className="bg-red-800"
 
"bg-gray-800
 

                className="h-8 w-auto"
 
https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=500
 
<div className="flex space-x-4 flex justify-center">
                {navigation.map((item) => (
                  <a
                    key={item.name}
                    href={item.href}
                    aria-current={item.current ? "page" : undefined}
                    className={classNames(
                      item.current
                        ? "bg-gray-900 text-white"
                        : "text-gray-300 hover:bg-gray-700 hover:text-white",
                      "rounded-md px-3 py-2 text-sm font-medium"
                    )}
                  >
                    {item.name}
                  </a>
                ))}

                <button
                className="relative text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                style={{
                  width: "193px",
                  paddingLeft: "10px",
                  height:"50px",
                  borderRadius: "5px",
                  border: "1px solid #00732F",
                  color: "#00732F",
                }}
              >
                Login / Signup
              </button>
              </div>
 

    paddingTop: '50px',
 

  { name: "Calendar", href: "#", current: false },
 
 <div className="flex flex-1 items-center justify-between">
            {/* Image aligned to the left on larger screens, right on mobile */}
            <div className="flex items-center sm:mr-auto sm:ml-0 ml-auto">
              <img
                alt="Your Company"
                src="https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=500"
                className="h-8 w-auto"
              />
            </div>

            {/* Navigation aligned to the right on larger screens */}
            <div className="hidden sm:block">
              <div className="flex space-x-4">
                {navigation.map((item) => (
                  <a
                    key={item.name}
                    href={item.href}
                    aria-current={item.current ? "page" : undefined}
                    className={classNames(
                      item.current
                        ? "bg-gray-900 text-white"
                        : "text-gray-300 hover:bg-gray-700 hover:text-white",
                      "rounded-md px-3 py-2 text-sm font-medium"
                    )}
                  >
                    {item.name}
                  </a>
                ))}
              </div>
            </div>
          </div>
 
 <Disclosure as="nav" className="bg-gray-800">
      <div className="mx-auto max-w-7xl px-2 sm:px-6 lg:px-8">
        <div className="relative flex h-16 items-center justify-between">
          <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
            {/* Mobile menu button*/}
            <DisclosureButton className="group relative inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
              <span className="absolute -inset-0.5" />
              <span className="sr-only">Open main menu</span>
              <Bars3Icon aria-hidden="true" className="block size-6 group-data-[open]:hidden" />
              <XMarkIcon aria-hidden="true" className="hidden size-6 group-data-[open]:block" />
            </DisclosureButton>
          </div>
          <div className="flex flex-1 items-center justify-between">
  {/* Image aligned to the left */}
  <div className="flex items-center">
    <img
      alt="Your Company"
      src="https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=500"
      className="h-8 w-auto"
    />
  </div>

  {/* Navigation aligned to the right on larger screens */}
  <div className="hidden sm:block">
    <div className="flex space-x-4">
      {navigation.map((item) => (
        <a
          key={item.name}
          href={item.href}
          aria-current={item.current ? 'page' : undefined}
          className={classNames(
            item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
            'rounded-md px-3 py-2 text-sm font-medium',
          )}
        >
          {item.name}
        </a>
      ))}
    </div>
  </div>
</div>

        </div>
      </div>

      <DisclosurePanel className="sm:hidden">
        <div className="space-y-1 px-2 pb-3 pt-2">
          {navigation.map((item) => (
            <DisclosureButton
              key={item.name}
              as="a"
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(
                item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                'block rounded-md px-3 py-2 text-base font-medium',
              )}
            >
              {item.name}
            </DisclosureButton>
          ))}
        </div>
      </DisclosurePanel>
    </Disclosure>
 
<div className="flex flex-1 sm:items-stretch justify-end">
            <div className="flex shrink-0 items-center">
              <img
                alt="Your Company"
                src="https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=500"
                className="h-8 w-auto"
              />
            </div>
            <div className="hidden sm:ml-6 sm:block">
              <div className="flex space-x-4">
                {navigation.map((item) => (
                  <a
                    key={item.name}
                    href={item.href}
                    aria-current={item.current ? 'page' : undefined}
                    className={classNames(
                      item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                      'rounded-md px-3 py-2 text-sm font-medium',
                    )}
                  >
                    {item.name}
                  </a>
                ))}
              </div>
            </div>
          </div>
 
<div className="flex flex-1 sm:items-stretch justify-end">
            <div className="flex shrink-0 items-center">
              <img
                alt="Your Company"
                src="https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=500"
                className="h-8 w-auto"
              />
            </div>
            <div className="hidden sm:ml-6 sm:block">
              <div className="flex space-x-4">
                {navigation.map((item) => (
                  <a
                    key={item.name}
                    href={item.href}
                    aria-current={item.current ? 'page' : undefined}
                    className={classNames(
                      item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                      'rounded-md px-3 py-2 text-sm font-medium',
                    )}
                  >
                    {item.name}
                  </a>
                ))}
              </div>
            </div>
          </div>
 
justify-center
 

          <div className="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
            <button
              type="button"
              className="relative rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800"
            >
              <span className="absolute -inset-1.5" />
              <span className="sr-only">View notifications</span>
              <BellIcon aria-hidden="true" className="size-6" />
            </button>
          </div>
 


            {/* Profile dropdown */}
 

            <Menu as="div" className="relative ml-3">
              <div>
                <MenuButton className="relative flex rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800">
                  <span className="absolute -inset-1.5" />
                  <span className="sr-only">Open user menu</span>
                  <img
                    alt=""
                    src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                    className="size-8 rounded-full"
                  />
                </MenuButton>
              </div>
              <MenuItems
                transition
                className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black/5 transition focus:outline-none data-[closed]:scale-95 data-[closed]:transform data-[closed]:opacity-0 data-[enter]:duration-100 data-[leave]:duration-75 data-[enter]:ease-out data-[leave]:ease-in"
              >
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Your Profile
                  </a>
                </MenuItem>
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Settings
                  </a>
                </MenuItem>
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Sign out
                  </a>
                </MenuItem>
              </MenuItems>
            </Menu>
 
// NOTE: Users of the `experimental` builds of React should add a reference
// to 'react/experimental' in their project. See experimental.d.ts's top comment
// for reference and documentation on how exactly to do it.

/// <reference path="global.d.ts" />

import * as CSS from "csstype";
import * as PropTypes from "prop-types";

type NativeAnimationEvent = AnimationEvent;
type NativeClipboardEvent = ClipboardEvent;
type NativeCompositionEvent = CompositionEvent;
type NativeDragEvent = DragEvent;
type NativeFocusEvent = FocusEvent;
type NativeKeyboardEvent = KeyboardEvent;
type NativeMouseEvent = MouseEvent;
type NativeTouchEvent = TouchEvent;
type NativePointerEvent = PointerEvent;
type NativeTransitionEvent = TransitionEvent;
type NativeUIEvent = UIEvent;
type NativeWheelEvent = WheelEvent;

/**
 * Used to represent DOM API's where users can either pass
 * true or false as a boolean or as its equivalent strings.
 */
type Booleanish = boolean | "true" | "false";

/**
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}
 */
type CrossOrigin = "anonymous" | "use-credentials" | "" | undefined;

declare const UNDEFINED_VOID_ONLY: unique symbol;

/**
 * The function returned from an effect passed to {@link React.useEffect useEffect},
 * which can be used to clean up the effect when the component unmounts.
 *
 * @see {@link https://react.dev/reference/react/useEffect React Docs}
 */
type Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };
type VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };

// eslint-disable-next-line @definitelytyped/export-just-namespace
export = React;
export as namespace React;

declare namespace React {
    //
    // React Elements
    // ----------------------------------------------------------------------

    /**
     * Used to retrieve the possible components which accept a given set of props.
     *
     * Can be passed no type parameters to get a union of all possible components
     * and tags.
     *
     * Is a superset of {@link ComponentType}.
     *
     * @template P The props to match against. If not passed, defaults to any.
     * @template Tag An optional tag to match against. If not passed, attempts to match against all possible tags.
     *
     * @example
     *
     * ```tsx
     * // All components and tags (img, embed etc.)
     * // which accept `src`
     * type SrcComponents = ElementType<{ src: any }>;
     * ```
     *
     * @example
     *
     * ```tsx
     * // All components
     * type AllComponents = ElementType;
     * ```
     *
     * @example
     *
     * ```tsx
     * // All custom components which match `src`, and tags which
     * // match `src`, narrowed down to just `audio` and `embed`
     * type SrcComponents = ElementType<{ src: any }, 'audio' | 'embed'>;
     * ```
     */
    type ElementType<P = any, Tag extends keyof JSX.IntrinsicElements = keyof JSX.IntrinsicElements> =
        | { [K in Tag]: P extends JSX.IntrinsicElements[K] ? K : never }[Tag]
        | ComponentType<P>;

    /**
     * Represents any user-defined component, either as a function or a class.
     *
     * Similar to {@link JSXElementConstructor}, but with extra properties like
     * {@link FunctionComponent.defaultProps defaultProps } and
     * {@link ComponentClass.contextTypes contextTypes}.
     *
     * @template P The props the component accepts.
     *
     * @see {@link ComponentClass}
     * @see {@link FunctionComponent}
     */
    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;

    /**
     * Represents any user-defined component, either as a function or a class.
     *
     * Similar to {@link ComponentType}, but without extra properties like
     * {@link FunctionComponent.defaultProps defaultProps } and
     * {@link ComponentClass.contextTypes contextTypes}.
     *
     * @template P The props the component accepts.
     */
    type JSXElementConstructor<P> =
        | ((
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-stateless-function-components React Docs}
             */
            deprecatedLegacyContext?: any,
        ) => ReactNode)
        | (new(
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ) => Component<any, any>);

    /**
     * A readonly ref container where {@link current} cannot be mutated.
     *
     * Created by {@link createRef}, or {@link useRef} when passed `null`.
     *
     * @template T The type of the ref's value.
     *
     * @example
     *
     * ```tsx
     * const ref = createRef<HTMLDivElement>();
     *
     * ref.current = document.createElement('div'); // Error
     * ```
     */
    interface RefObject<T> {
        /**
         * The current value of the ref.
         */
        readonly current: T | null;
    }

    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES {
    }
    /**
     * A callback fired whenever the ref's value changes.
     *
     * @template T The type of the ref's value.
     *
     * @see {@link https://react.dev/reference/react-dom/components/common#ref-callback React Docs}
     *
     * @example
     *
     * ```tsx
     * <div ref={(node) => console.log(node)} />
     * ```
     */
    type RefCallback<T> = {
        bivarianceHack(
            instance: T | null,
        ):
            | void
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES
            ];
    }["bivarianceHack"];

    /**
     * A union type of all possible shapes for React refs.
     *
     * @see {@link RefCallback}
     * @see {@link RefObject}
     */

    type Ref<T> = RefCallback<T> | RefObject<T> | null;
    /**
     * A legacy implementation of refs where you can pass a string to a ref prop.
     *
     * @see {@link https://react.dev/reference/react/Component#refs React Docs}
     *
     * @example
     *
     * ```tsx
     * <div ref="myRef" />
     * ```
     */
    // TODO: Remove the string ref special case from `PropsWithRef` once we remove LegacyRef
    type LegacyRef<T> = string | Ref<T>;

    /**
     * Retrieves the type of the 'ref' prop for a given component type or tag name.
     *
     * @template C The component type.
     *
     * @example
     *
     * ```tsx
     * type MyComponentRef = React.ElementRef<typeof MyComponent>;
     * ```
     *
     * @example
     *
     * ```tsx
     * type DivRef = React.ElementRef<'div'>;
     * ```
     */
    type ElementRef<
        C extends
            | ForwardRefExoticComponent<any>
            | { new(props: any): Component<any> }
            | ((props: any, deprecatedLegacyContext?: any) => ReactNode)
            | keyof JSX.IntrinsicElements,
    > =
        // need to check first if `ref` is a valid prop for ts@3.0
        // otherwise it will infer `{}` instead of `never`
        "ref" extends keyof ComponentPropsWithRef<C>
            ? NonNullable<ComponentPropsWithRef<C>["ref"]> extends RefAttributes<
                infer Instance
            >["ref"] ? Instance
            : never
            : never;

    type ComponentState = any;

    /**
     * A value which uniquely identifies a node among items in an array.
     *
     * @see {@link https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key React Docs}
     */
    type Key = string | number | bigint;

    /**
     * @internal The props any component can receive.
     * You don't have to add this type. All components automatically accept these props.
     * ```tsx
     * const Component = () => <div />;
     * <Component key="one" />
     * ```
     *
     * WARNING: The implementation of a component will never have access to these attributes.
     * The following example would be incorrect usage because {@link Component} would never have access to `key`:
     * ```tsx
     * const Component = (props: React.Attributes) => props.key;
     * ```
     */
    interface Attributes {
        key?: Key | null | undefined;
    }
    /**
     * The props any component accepting refs can receive.
     * Class components, built-in browser components (e.g. `div`) and forwardRef components can receive refs and automatically accept these props.
     * ```tsx
     * const Component = forwardRef(() => <div />);
     * <Component ref={(current) => console.log(current)} />
     * ```
     *
     * You only need this type if you manually author the types of props that need to be compatible with legacy refs.
     * ```tsx
     * interface Props extends React.RefAttributes<HTMLDivElement> {}
     * declare const Component: React.FunctionComponent<Props>;
     * ```
     *
     * Otherwise it's simpler to directly use {@link Ref} since you can safely use the
     * props type to describe to props that a consumer can pass to the component
     * as well as describing the props the implementation of a component "sees".
     * {@link RefAttributes} is generally not safe to describe both consumer and seen props.
     *
     * ```tsx
     * interface Props extends {
     *   ref?: React.Ref<HTMLDivElement> | undefined;
     * }
     * declare const Component: React.FunctionComponent<Props>;
     * ```
     *
     * WARNING: The implementation of a component will not have access to the same type in versions of React supporting string refs.
     * The following example would be incorrect usage because {@link Component} would never have access to a `ref` with type `string`
     * ```tsx
     * const Component = (props: React.RefAttributes) => props.ref;
     * ```
     */
    interface RefAttributes<T> extends Attributes {
        /**
         * Allows getting a ref to the component instance.
         * Once the component unmounts, React will set `ref.current` to `null`
         * (or call the ref with `null` if you passed a callback ref).
         *
         * @see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}
         */
        ref?: LegacyRef<T> | undefined;
    }

    /**
     * Represents the built-in attributes available to class components.
     */
    interface ClassAttributes<T> extends RefAttributes<T> {
    }

    /**
     * Represents a JSX element.
     *
     * Where {@link ReactNode} represents everything that can be rendered, `ReactElement`
     * only represents JSX.
     *
     * @template P The type of the props object
     * @template T The type of the component or tag
     *
     * @example
     *
     * ```tsx
     * const element: ReactElement = <div />;
     * ```
     */
    interface ReactElement<
        P = any,
        T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>,
    > {
        type: T;
        props: P;
        key: string | null;
    }

    /**
     * @deprecated
     */
    interface ReactComponentElement<
        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,
        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, "key" | "ref">>,
    > extends ReactElement<P, Exclude<T, number>> {}

    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {
        ref?: ("ref" extends keyof P ? P extends { ref?: infer R | undefined } ? R : never : never) | undefined;
    }

    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;
    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {
        ref?: LegacyRef<T> | undefined;
    }

    /**
     * @deprecated Use {@link ComponentElement} instead.
     */
    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;

    // string fallback for custom web-components
    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element>
        extends ReactElement<P, string>
    {
        ref: LegacyRef<T>;
    }

    // ReactHTML for ReactHTMLElement
    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> {}

    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {
        type: keyof ReactHTML;
    }

    // ReactSVG for ReactSVGElement
    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {
        type: keyof ReactSVG;
    }

    interface ReactPortal extends ReactElement {
        children: ReactNode;
    }

    //
    // Factories
    // ----------------------------------------------------------------------

    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;

    /**
     * @deprecated Please use `FunctionComponentFactory`
     */
    type SFCFactory<P> = FunctionComponentFactory<P>;

    type FunctionComponentFactory<P> = (
        props?: Attributes & P,
        ...children: ReactNode[]
    ) => FunctionComponentElement<P>;

    type ComponentFactory<P, T extends Component<P, ComponentState>> = (
        props?: ClassAttributes<T> & P,
        ...children: ReactNode[]
    ) => CElement<P, T>;

    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;
    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;

    type DOMFactory<P extends DOMAttributes<T>, T extends Element> = (
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ) => DOMElement<P, T>;

    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}

    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {
        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;
    }

    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {
        (
            props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null,
            ...children: ReactNode[]
        ): ReactSVGElement;
    }

    /**
     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.
     */
    type ReactText = string | number;
    /**
     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.
     */
    type ReactChild = ReactElement | string | number;

    /**
     * @deprecated Use either `ReactNode[]` if you need an array or `Iterable<ReactNode>` if its passed to a host component.
     */
    interface ReactNodeArray extends ReadonlyArray<ReactNode> {}
    /**
     * WARNING: Not related to `React.Fragment`.
     * @deprecated This type is not relevant when using React. Inline the type instead to make the intent clear.
     */
    type ReactFragment = Iterable<ReactNode>;

    /**
     * Different release channels declare additional types of ReactNode this particular release channel accepts.
     * App or library types should never augment this interface.
     */
    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {}

    /**
     * Represents all of the things React can render.
     *
     * Where {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/reactnode/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Typing children
     * type Props = { children: ReactNode }
     *
     * const Component = ({ children }: Props) => <div>{children}</div>
     *
     * <Component>hello</Component>
     * ```
     *
     * @example
     *
     * ```tsx
     * // Typing a custom element
     * type Props = { customElement: ReactNode }
     *
     * const Component = ({ customElement }: Props) => <div>{customElement}</div>
     *
     * <Component customElement={<div>hello</div>} />
     * ```
     */
    // non-thenables need to be kept in sync with AwaitedReactNode
    type ReactNode =
        | ReactElement
        | string
        | number
        | Iterable<ReactNode>
        | ReactPortal
        | boolean
        | null
        | undefined
        | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES[
            keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES
        ];

    //
    // Top Level API
    // ----------------------------------------------------------------------

    // DOM Elements
    /** @deprecated */
    function createFactory<T extends HTMLElement>(
        type: keyof ReactHTML,
    ): HTMLFactory<T>;
    /** @deprecated */
    function createFactory(
        type: keyof ReactSVG,
    ): SVGFactory;
    /** @deprecated */
    function createFactory<P extends DOMAttributes<T>, T extends Element>(
        type: string,
    ): DOMFactory<P, T>;

    // Custom components
    /** @deprecated */
    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;
    /** @deprecated */
    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(
        type: ClassType<P, T, C>,
    ): CFactory<P, T>;
    /** @deprecated */
    function createFactory<P>(type: ComponentClass<P>): Factory<P>;

    // DOM Elements
    // TODO: generalize this to everything in `keyof ReactHTML`, not just "input"
    function createElement(
        type: "input",
        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,
        ...children: ReactNode[]
    ): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(
        type: keyof ReactHTML,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): DetailedReactHTMLElement<P, T>;
    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(
        type: keyof ReactSVG,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): ReactSVGElement;
    function createElement<P extends DOMAttributes<T>, T extends Element>(
        type: string,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): DOMElement<P, T>;

    // Custom components

    function createElement<P extends {}>(
        type: FunctionComponent<P>,
        props?: Attributes & P | null,
        ...children: ReactNode[]
    ): FunctionComponentElement<P>;
    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(
        type: ClassType<P, T, C>,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): CElement<P, T>;
    function createElement<P extends {}>(
        type: FunctionComponent<P> | ComponentClass<P> | string,
        props?: Attributes & P | null,
        ...children: ReactNode[]
    ): ReactElement<P>;

    // DOM Elements
    // ReactHTMLElement
    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(
        element: DetailedReactHTMLElement<P, T>,
        props?: P,
        ...children: ReactNode[]
    ): DetailedReactHTMLElement<P, T>;
    // ReactHTMLElement, less specific
    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(
        element: ReactHTMLElement<T>,
        props?: P,
        ...children: ReactNode[]
    ): ReactHTMLElement<T>;
    // SVGElement
    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(
        element: ReactSVGElement,
        props?: P,
        ...children: ReactNode[]
    ): ReactSVGElement;
    // DOM Element (has to be the last, because type checking stops at first overload that fits)
    function cloneElement<P extends DOMAttributes<T>, T extends Element>(
        element: DOMElement<P, T>,
        props?: DOMAttributes<T> & P,
        ...children: ReactNode[]
    ): DOMElement<P, T>;

    // Custom components
    function cloneElement<P>(
        element: FunctionComponentElement<P>,
        props?: Partial<P> & Attributes,
        ...children: ReactNode[]
    ): FunctionComponentElement<P>;
    function cloneElement<P, T extends Component<P, ComponentState>>(
        element: CElement<P, T>,
        props?: Partial<P> & ClassAttributes<T>,
        ...children: ReactNode[]
    ): CElement<P, T>;
    function cloneElement<P>(
        element: ReactElement<P>,
        props?: Partial<P> & Attributes,
        ...children: ReactNode[]
    ): ReactElement<P>;

    /**
     * Describes the props accepted by a Context {@link Provider}.
     *
     * @template T The type of the value the context provides.
     */
    interface ProviderProps<T> {
        value: T;
        children?: ReactNode | undefined;
    }

    /**
     * Describes the props accepted by a Context {@link Consumer}.
     *
     * @template T The type of the value the context provides.
     */
    interface ConsumerProps<T> {
        children: (value: T) => ReactNode;
    }

    /**
     * An object masquerading as a component. These are created by functions
     * like {@link forwardRef}, {@link memo}, and {@link createContext}.
     *
     * In order to make TypeScript work, we pretend that they are normal
     * components.
     *
     * But they are, in fact, not callable - instead, they are objects which
     * are treated specially by the renderer.
     *
     * @template P The props the component accepts.
     */
    interface ExoticComponent<P = {}> {
        (props: P): ReactNode;
        readonly $$typeof: symbol;
    }

    /**
     * An {@link ExoticComponent} with a `displayName` property applied to it.
     *
     * @template P The props the component accepts.
     */
    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
    }

    /**
     * An {@link ExoticComponent} with a `propTypes` property applied to it.
     *
     * @template P The props the component accepts.
     */
    interface ProviderExoticComponent<P> extends ExoticComponent<P> {
        propTypes?: WeakValidationMap<P> | undefined;
    }

    /**
     * Used to retrieve the type of a context object from a {@link Context}.
     *
     * @template C The context object.
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const MyContext = createContext({ foo: 'bar' });
     *
     * type ContextType = ContextType<typeof MyContext>;
     * // ContextType = { foo: string }
     * ```
     */
    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;

    /**
     * Wraps your components to specify the value of this context for all components inside.
     *
     * @see {@link https://react.dev/reference/react/createContext#provider React Docs}
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const ThemeContext = createContext('light');
     *
     * function App() {
     *   return (
     *     <ThemeContext.Provider value="dark">
     *       <Toolbar />
     *     </ThemeContext.Provider>
     *   );
     * }
     * ```
     */
    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;

    /**
     * The old way to read context, before {@link useContext} existed.
     *
     * @see {@link https://react.dev/reference/react/createContext#consumer React Docs}
     *
     * @example
     *
     * ```tsx
     * import { UserContext } from './user-context';
     *
     * function Avatar() {
     *   return (
     *     <UserContext.Consumer>
     *       {user => <img src={user.profileImage} alt={user.name} />}
     *     </UserContext.Consumer>
     *   );
     * }
     * ```
     */
    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;

    /**
     * Context lets components pass information deep down without explicitly
     * passing props.
     *
     * Created from {@link createContext}
     *
     * @see {@link https://react.dev/learn/passing-data-deeply-with-context React Docs}
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const ThemeContext = createContext('light');
     * ```
     */
    interface Context<T> {
        Provider: Provider<T>;
        Consumer: Consumer<T>;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
    }

    /**
     * Lets you create a {@link Context} that components can provide or read.
     *
     * @param defaultValue The value you want the context to have when there is no matching
     * {@link Provider} in the tree above the component reading the context. This is meant
     * as a "last resort" fallback.
     *
     * @see {@link https://react.dev/reference/react/createContext#reference React Docs}
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const ThemeContext = createContext('light');
     * ```
     */
    function createContext<T>(
        // If you thought this should be optional, see
        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106
        defaultValue: T,
    ): Context<T>;

    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;

    /**
     * Maintainer's note: Sync with {@link ReactChildren} until {@link ReactChildren} is removed.
     */
    const Children: {
        map<T, C>(
            children: C | readonly C[],
            fn: (child: C, index: number) => T,
        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;
        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;
        count(children: any): number;
        only<C>(children: C): C extends any[] ? never : C;
        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;
    };
    /**
     * Lets you group elements without a wrapper node.
     *
     * @see {@link https://react.dev/reference/react/Fragment React Docs}
     *
     * @example
     *
     * ```tsx
     * import { Fragment } from 'react';
     *
     * <Fragment>
     *   <td>Hello</td>
     *   <td>World</td>
     * </Fragment>
     * ```
     *
     * @example
     *
     * ```tsx
     * // Using the <></> shorthand syntax:
     *
     * <>
     *   <td>Hello</td>
     *   <td>World</td>
     * </>
     * ```
     */
    const Fragment: ExoticComponent<{ children?: ReactNode | undefined }>;

    /**
     * Lets you find common bugs in your components early during development.
     *
     * @see {@link https://react.dev/reference/react/StrictMode React Docs}
     *
     * @example
     *
     * ```tsx
     * import { StrictMode } from 'react';
     *
     * <StrictMode>
     *   <App />
     * </StrictMode>
     * ```
     */
    const StrictMode: ExoticComponent<{ children?: ReactNode | undefined }>;

    /**
     * The props accepted by {@link Suspense}.
     *
     * @see {@link https://react.dev/reference/react/Suspense React Docs}
     */
    interface SuspenseProps {
        children?: ReactNode | undefined;

        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */
        fallback?: ReactNode;

        /**
         * A name for this Suspense boundary for instrumentation purposes.
         * The name will help identify this boundary in React DevTools.
         */
        name?: string | undefined;
    }

    /**
     * Lets you display a fallback until its children have finished loading.
     *
     * @see {@link https://react.dev/reference/react/Suspense React Docs}
     *
     * @example
     *
     * ```tsx
     * import { Suspense } from 'react';
     *
     * <Suspense fallback={<Loading />}>
     *   <ProfileDetails />
     * </Suspense>
     * ```
     */
    const Suspense: ExoticComponent<SuspenseProps>;
    const version: string;

    /**
     * The callback passed to {@link ProfilerProps.onRender}.
     *
     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
     */
    type ProfilerOnRenderCallback = (
        /**
         * The string id prop of the {@link Profiler} tree that has just committed. This lets
         * you identify which part of the tree was committed if you are using multiple
         * profilers.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        id: string,
        /**
         * This lets you know whether the tree has just been mounted for the first time
         * or re-rendered due to a change in props, state, or hooks.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        phase: "mount" | "update" | "nested-update",
        /**
         * The number of milliseconds spent rendering the {@link Profiler} and its descendants
         * for the current update. This indicates how well the subtree makes use of
         * memoization (e.g. {@link memo} and {@link useMemo}). Ideally this value should decrease
         * significantly after the initial mount as many of the descendants will only need to
         * re-render if their specific props change.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        actualDuration: number,
        /**
         * The number of milliseconds estimating how much time it would take to re-render the entire
         * {@link Profiler} subtree without any optimizations. It is calculated by summing up the most
         * recent render durations of each component in the tree. This value estimates a worst-case
         * cost of rendering (e.g. the initial mount or a tree with no memoization). Compare
         * {@link actualDuration} against it to see if memoization is working.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        baseDuration: number,
        /**
         * A numeric timestamp for when React began rendering the current update.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        startTime: number,
        /**
         * A numeric timestamp for when React committed the current update. This value is shared
         * between all profilers in a commit, enabling them to be grouped if desirable.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        commitTime: number,
    ) => void;

    /**
     * The props accepted by {@link Profiler}.
     *
     * @see {@link https://react.dev/reference/react/Profiler React Docs}
     */
    interface ProfilerProps {
        children?: ReactNode | undefined;
        id: string;
        onRender: ProfilerOnRenderCallback;
    }

    /**
     * Lets you measure rendering performance of a React tree programmatically.
     *
     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
     *
     * @example
     *
     * ```tsx
     * <Profiler id="App" onRender={onRender}>
     *   <App />
     * </Profiler>
     * ```
     */
    const Profiler: ExoticComponent<ProfilerProps>;

    //
    // Component API
    // ----------------------------------------------------------------------

    type ReactInstance = Component<any> | Element;

    // Base component for plain JS classes
    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> {}
    class Component<P, S> {
        /**
         * If set, `this.context` will be set at runtime to the current value of the given Context.
         *
         * @example
         *
         * ```ts
         * type MyContext = number
         * const Ctx = React.createContext<MyContext>(0)
         *
         * class Foo extends React.Component {
         *   static contextType = Ctx
         *   context!: React.ContextType<typeof Ctx>
         *   render () {
         *     return <>My context's value: {this.context}</>;
         *   }
         * }
         * ```
         *
         * @see {@link https://react.dev/reference/react/Component#static-contexttype}
         */
        static contextType?: Context<any> | undefined;

        /**
         * If using the new style context, re-declare this in your class to be the
         * `React.ContextType` of your `static contextType`.
         * Should be used with type annotation or static contextType.
         *
         * @example
         * ```ts
         * static contextType = MyContext
         * // For TS pre-3.7:
         * context!: React.ContextType<typeof MyContext>
         * // For TS 3.7 and above:
         * declare context: React.ContextType<typeof MyContext>
         * ```
         *
         * @see {@link https://react.dev/reference/react/Component#context React Docs}
         */
        context: unknown;

        constructor(props: P);
        /**
         * @deprecated
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html React Docs}
         */
        constructor(props: P, context: any);

        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.
        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257
        // Also, the ` | S` allows intellisense to not be dumbisense
        setState<K extends keyof S>(
            state: ((prevState: Readonly<S>, props: Readonly<P>) => Pick<S, K> | S | null) | (Pick<S, K> | S | null),
            callback?: () => void,
        ): void;

        forceUpdate(callback?: () => void): void;
        render(): ReactNode;

        readonly props: Readonly<P>;
        state: Readonly<S>;
        /**
         * @deprecated
         *
         * @see {@link https://legacy.reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs Legacy React Docs}
         */
        refs: {
            [key: string]: ReactInstance;
        };
    }

    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> {}

    /**
     * @deprecated Use `ClassicComponent` from `create-react-class`
     *
     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}
     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}
     */
    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {
        replaceState(nextState: S, callback?: () => void): void;
        isMounted(): boolean;
        getInitialState?(): S;
    }

    interface ChildContextProvider<CC> {
        getChildContext(): CC;
    }

    //
    // Class Interfaces
    // ----------------------------------------------------------------------

    /**
     * Represents the type of a function component. Can optionally
     * receive a type argument that represents the props the component
     * receives.
     *
     * @template P The props the component accepts.
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}
     * @alias for {@link FunctionComponent}
     *
     * @example
     *
     * ```tsx
     * // With props:
     * type Props = { name: string }
     *
     * const MyComponent: FC<Props> = (props) => {
     *  return <div>{props.name}</div>
     * }
     * ```
     *
     * @example
     *
     * ```tsx
     * // Without props:
     * const MyComponentWithoutProps: FC = () => {
     *   return <div>MyComponentWithoutProps</div>
     * }
     * ```
     */
    type FC<P = {}> = FunctionComponent<P>;

    /**
     * Represents the type of a function component. Can optionally
     * receive a type argument that represents the props the component
     * accepts.
     *
     * @template P The props the component accepts.
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // With props:
     * type Props = { name: string }
     *
     * const MyComponent: FunctionComponent<Props> = (props) => {
     *  return <div>{props.name}</div>
     * }
     * ```
     *
     * @example
     *
     * ```tsx
     * // Without props:
     * const MyComponentWithoutProps: FunctionComponent = () => {
     *   return <div>MyComponentWithoutProps</div>
     * }
     * ```
     */
    interface FunctionComponent<P = {}> {
        (
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ): ReactNode;
        /**
         * Used to declare the types of the props accepted by the
         * component. These types will be checked during rendering
         * and in development only.
         *
         * We recommend using TypeScript instead of checking prop
         * types at runtime.
         *
         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}
         */
        propTypes?: WeakValidationMap<P> | undefined;
        /**
         * @deprecated
         *
         * Lets you specify which legacy context is consumed by
         * this component.
         *
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}
         */
        contextTypes?: ValidationMap<any> | undefined;
        /**
         * Used to define default values for the props accepted by
         * the component.
         *
         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}
         *
         * @example
         *
         * ```tsx
         * type Props = { name?: string }
         *
         * const MyComponent: FC<Props> = (props) => {
         *   return <div>{props.name}</div>
         * }
         *
         * MyComponent.defaultProps = {
         *   name: 'John Doe'
         * }
         * ```
         *
         * @deprecated Use {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value|default values for destructuring assignments instead}.
         */
        defaultProps?: Partial<P> | undefined;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         *
         * @example
         *
         * ```tsx
         *
         * const MyComponent: FC = () => {
         *   return <div>Hello!</div>
         * }
         *
         * MyComponent.displayName = 'MyAwesomeComponent'
         * ```
         */
        displayName?: string | undefined;
    }

    /**
     * @deprecated - Equivalent to {@link React.FunctionComponent}.
     *
     * @see {@link React.FunctionComponent}
     * @alias {@link VoidFunctionComponent}
     */
    type VFC<P = {}> = VoidFunctionComponent<P>;

    /**
     * @deprecated - Equivalent to {@link React.FunctionComponent}.
     *
     * @see {@link React.FunctionComponent}
     */
    interface VoidFunctionComponent<P = {}> {
        (
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ): ReactNode;
        propTypes?: WeakValidationMap<P> | undefined;
        contextTypes?: ValidationMap<any> | undefined;
        /**
         * @deprecated Use {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value|default values for destructuring assignments instead}.
         */
        defaultProps?: Partial<P> | undefined;
        displayName?: string | undefined;
    }

    /**
     * The type of the ref received by a {@link ForwardRefRenderFunction}.
     *
     * @see {@link ForwardRefRenderFunction}
     */
    type ForwardedRef<T> = ((instance: T | null) => void) | MutableRefObject<T | null> | null;

    /**
     * The type of the function passed to {@link forwardRef}. This is considered different
     * to a normal {@link FunctionComponent} because it receives an additional argument,
     *
     * @param props Props passed to the component, if any.
     * @param ref A ref forwarded to the component of type {@link ForwardedRef}.
     *
     * @template T The type of the forwarded ref.
     * @template P The type of the props the component accepts.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}
     * @see {@link forwardRef}
     */
    interface ForwardRefRenderFunction<T, P = {}> {
        (props: P, ref: ForwardedRef<T>): ReactNode;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * Will show `ForwardRef(${Component.displayName || Component.name})`
         * in devtools by default, but can be given its own specific name.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
        /**
         * defaultProps are not supported on render functions passed to forwardRef.
         *
         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context
         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}
         */
        defaultProps?: never | undefined;
        /**
         * propTypes are not supported on render functions passed to forwardRef.
         *
         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context
         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}
         */
        propTypes?: never | undefined;
    }

    /**
     * Represents a component class in React.
     *
     * @template P The props the component accepts.
     * @template S The internal state of the component.
     */
    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {
        new(
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ): Component<P, S>;
        /**
         * Used to declare the types of the props accepted by the
         * component. These types will be checked during rendering
         * and in development only.
         *
         * We recommend using TypeScript instead of checking prop
         * types at runtime.
         *
         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}
         */
        propTypes?: WeakValidationMap<P> | undefined;
        contextType?: Context<any> | undefined;
        /**
         * @deprecated use {@link ComponentClass.contextType} instead
         *
         * Lets you specify which legacy context is consumed by
         * this component.
         *
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}
         */
        contextTypes?: ValidationMap<any> | undefined;
        /**
         * @deprecated
         *
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#how-to-use-context Legacy React Docs}
         */
        childContextTypes?: ValidationMap<any> | undefined;
        /**
         * Used to define default values for the props accepted by
         * the component.
         *
         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}
         */
        defaultProps?: Partial<P> | undefined;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
    }

    /**
     * @deprecated Use `ClassicComponentClass` from `create-react-class`
     *
     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}
     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}
     */
    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {
        new(props: P, deprecatedLegacyContext?: any): ClassicComponent<P, ComponentState>;
        getDefaultProps?(): P;
    }

    /**
     * Used in {@link createElement} and {@link createFactory} to represent
     * a class.
     *
     * An intersection type is used to infer multiple type parameters from
     * a single argument, which is useful for many top-level API defs.
     * See {@link https://github.com/Microsoft/TypeScript/issues/7234 this GitHub issue}
     * for more info.
     */
    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =
        & C
        & (new(props: P, deprecatedLegacyContext?: any) => T);

    //
    // Component Specs and Lifecycle
    // ----------------------------------------------------------------------

    // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,
    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle
    // methods are present.
    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {
        /**
         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.
         */
        componentDidMount?(): void;
        /**
         * Called to determine whether the change in props and state should trigger a re-render.
         *
         * `Component` always returns true.
         * `PureComponent` implements a shallow comparison on props and state and returns true if any
         * props or states have changed.
         *
         * If false is returned, {@link Component.render}, `componentWillUpdate`
         * and `componentDidUpdate` will not be called.
         */
        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;
        /**
         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as
         * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.
         */
        componentWillUnmount?(): void;
        /**
         * Catches exceptions generated in descendant components. Unhandled exceptions will cause
         * the entire component tree to unmount.
         */
        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;
    }

    // Unfortunately, we have no way of declaring that the component constructor must implement this
    interface StaticLifecycle<P, S> {
        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S> | undefined;
        getDerivedStateFromError?: GetDerivedStateFromError<P, S> | undefined;
    }

    type GetDerivedStateFromProps<P, S> =
        /**
         * Returns an update to a component's state based on its new props and old state.
         *
         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked
         */
        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;

    type GetDerivedStateFromError<P, S> =
        /**
         * This lifecycle is invoked after an error has been thrown by a descendant component.
         * It receives the error that was thrown as a parameter and should return a value to update state.
         *
         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked
         */
        (error: any) => Partial<S> | null;

    // This should be "infer SS" but can't use it yet
    interface NewLifecycle<P, S, SS> {
        /**
         * Runs before React applies the result of {@link Component.render render} to the document, and
         * returns an object to be given to {@link componentDidUpdate}. Useful for saving
         * things such as scroll position before {@link Component.render render} causes changes to it.
         *
         * Note: the presence of this method prevents any of the deprecated
         * lifecycle events from running.
         */
        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;
        /**
         * Called immediately after updating occurs. Not called for the initial render.
         *
         * The snapshot is only present if {@link getSnapshotBeforeUpdate} is present and returns non-null.
         */
        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;
    }

    interface DeprecatedLifecycle<P, S> {
        /**
         * Called immediately before mounting occurs, and before {@link Component.render}.
         * Avoid introducing any side-effects or subscriptions in this method.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead; will stop working in React 17
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        componentWillMount?(): void;
        /**
         * Called immediately before mounting occurs, and before {@link Component.render}.
         * Avoid introducing any side-effects or subscriptions in this method.
         *
         * This method will not stop working in React 17.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        UNSAFE_componentWillMount?(): void;
        /**
         * Called when the component may be receiving new props.
         * React may call this even if props have not changed, so be sure to compare new and existing
         * props if you only want to handle changes.
         *
         * Calling {@link Component.setState} generally does not trigger this method.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead; will stop working in React 17
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        /**
         * Called when the component may be receiving new props.
         * React may call this even if props have not changed, so be sure to compare new and existing
         * props if you only want to handle changes.
         *
         * Calling {@link Component.setState} generally does not trigger this method.
         *
         * This method will not stop working in React 17.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        /**
         * Called immediately before rendering when new props or state is received. Not called for the initial render.
         *
         * Note: You cannot call {@link Component.setState} here.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;
        /**
         * Called immediately before rendering when new props or state is received. Not called for the initial render.
         *
         * Note: You cannot call {@link Component.setState} here.
         *
         * This method will not stop working in React 17.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use getSnapshotBeforeUpdate instead
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;
    }

    /**
     * @deprecated
     *
     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}
     */
    interface Mixin<P, S> extends ComponentLifecycle<P, S> {
        mixins?: Array<Mixin<P, S>> | undefined;
        statics?: {
            [key: string]: any;
        } | undefined;

        displayName?: string | undefined;
        propTypes?: ValidationMap<any> | undefined;
        contextTypes?: ValidationMap<any> | undefined;
        childContextTypes?: ValidationMap<any> | undefined;

        getDefaultProps?(): P;
        getInitialState?(): S;
    }

    /**
     * @deprecated
     *
     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}
     */
    interface ComponentSpec<P, S> extends Mixin<P, S> {
        render(): ReactNode;

        [propertyName: string]: any;
    }

    function createRef<T>(): RefObject<T>;

    /**
     * The type of the component returned from {@link forwardRef}.
     *
     * @template P The props the component accepts, if any.
     *
     * @see {@link ExoticComponent}
     */
    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {
        /**
         * @deprecated Use {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value|default values for destructuring assignments instead}.
         */
        defaultProps?: Partial<P> | undefined;
        propTypes?: WeakValidationMap<P> | undefined;
    }

    /**
     * Lets your component expose a DOM node to a parent component
     * using a ref.
     *
     * @see {@link https://react.dev/reference/react/forwardRef React Docs}
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}
     *
     * @param render See the {@link ForwardRefRenderFunction}.
     *
     * @template T The type of the DOM node.
     * @template P The props the component accepts, if any.
     *
     * @example
     *
     * ```tsx
     * interface Props {
     *   children?: ReactNode;
     *   type: "submit" | "button";
     * }
     *
     * export const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (
     *   <button ref={ref} className="MyClassName" type={props.type}>
     *     {props.children}
     *   </button>
     * ));
     * ```
     */
    function forwardRef<T, P = {}>(
        render: ForwardRefRenderFunction<T, PropsWithoutRef<P>>,
    ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;

    /**
     * Omits the 'ref' attribute from the given props object.
     *
     * @template P The props object type.
     */
    type PropsWithoutRef<P> =
        // Omit would not be sufficient for this. We'd like to avoid unnecessary mapping and need a distributive conditional to support unions.
        // see: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types
        // https://github.com/Microsoft/TypeScript/issues/28339
        P extends any ? ("ref" extends keyof P ? Omit<P, "ref"> : P) : P;
    /** Ensures that the props do not include string ref, which cannot be forwarded */
    type PropsWithRef<P> =
        // Note: String refs can be forwarded. We can't fix this bug without breaking a bunch of libraries now though.
        // Just "P extends { ref?: infer R }" looks sufficient, but R will infer as {} if P is {}.
        "ref" extends keyof P
            ? P extends { ref?: infer R | undefined }
                ? string extends R ? PropsWithoutRef<P> & { ref?: Exclude<R, string> | undefined }
                : P
            : P
            : P;

    type PropsWithChildren<P = unknown> = P & { children?: ReactNode | undefined };

    /**
     * Used to retrieve the props a component accepts. Can either be passed a string,
     * indicating a DOM element (e.g. 'div', 'span', etc.) or the type of a React
     * component.
     *
     * It's usually better to use {@link ComponentPropsWithRef} or {@link ComponentPropsWithoutRef}
     * instead of this type, as they let you be explicit about whether or not to include
     * the `ref` prop.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Retrieves the props an 'input' element accepts
     * type InputProps = React.ComponentProps<'input'>;
     * ```
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentProps = React.ComponentProps<typeof MyComponent>;
     * ```
     */
    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> = T extends
        JSXElementConstructor<infer P> ? P
        : T extends keyof JSX.IntrinsicElements ? JSX.IntrinsicElements[T]
        : {};

    /**
     * Used to retrieve the props a component accepts with its ref. Can either be
     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the
     * type of a React component.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Retrieves the props an 'input' element accepts
     * type InputProps = React.ComponentPropsWithRef<'input'>;
     * ```
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentPropsWithRef = React.ComponentPropsWithRef<typeof MyComponent>;
     * ```
     */
    type ComponentPropsWithRef<T extends ElementType> = T extends (new(props: infer P) => Component<any, any>)
        ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>
        : PropsWithRef<ComponentProps<T>>;
    /**
     * Used to retrieve the props a custom component accepts with its ref.
     *
     * Unlike {@link ComponentPropsWithRef}, this only works with custom
     * components, i.e. components you define yourself. This is to improve
     * type-checking performance.
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentPropsWithRef = React.CustomComponentPropsWithRef<typeof MyComponent>;
     * ```
     */
    type CustomComponentPropsWithRef<T extends ComponentType> = T extends (new(props: infer P) => Component<any, any>)
        ? (PropsWithoutRef<P> & RefAttributes<InstanceType<T>>)
        : T extends ((props: infer P, legacyContext?: any) => ReactNode) ? PropsWithRef<P>
        : never;

    /**
     * Used to retrieve the props a component accepts without its ref. Can either be
     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the
     * type of a React component.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Retrieves the props an 'input' element accepts
     * type InputProps = React.ComponentPropsWithoutRef<'input'>;
     * ```
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentPropsWithoutRef = React.ComponentPropsWithoutRef<typeof MyComponent>;
     * ```
     */
    type ComponentPropsWithoutRef<T extends ElementType> = PropsWithoutRef<ComponentProps<T>>;

    type ComponentRef<T extends ElementType> = T extends NamedExoticComponent<
        ComponentPropsWithoutRef<T> & RefAttributes<infer Method>
    > ? Method
        : ComponentPropsWithRef<T> extends RefAttributes<infer Method> ? Method
        : never;

    // will show `Memo(${Component.displayName || Component.name})` in devtools by default,
    // but can be given its own specific name
    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<CustomComponentPropsWithRef<T>> & {
        readonly type: T;
    };

    /**
     * Lets you skip re-rendering a component when its props are unchanged.
     *
     * @see {@link https://react.dev/reference/react/memo React Docs}
     *
     * @param Component The component to memoize.
     * @param propsAreEqual A function that will be used to determine if the props have changed.
     *
     * @example
     *
     * ```tsx
     * import { memo } from 'react';
     *
     * const SomeComponent = memo(function SomeComponent(props: { foo: string }) {
     *   // ...
     * });
     * ```
     */
    function memo<P extends object>(
        Component: FunctionComponent<P>,
        propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean,
    ): NamedExoticComponent<P>;
    function memo<T extends ComponentType<any>>(
        Component: T,
        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean,
    ): MemoExoticComponent<T>;

    interface LazyExoticComponent<T extends ComponentType<any>>
        extends ExoticComponent<CustomComponentPropsWithRef<T>>
    {
        readonly _result: T;
    }

    /**
     * Lets you defer loading a component’s code until it is rendered for the first time.
     *
     * @see {@link https://react.dev/reference/react/lazy React Docs}
     *
     * @param load A function that returns a `Promise` or another thenable (a `Promise`-like object with a
     * then method). React will not call `load` until the first time you attempt to render the returned
     * component. After React first calls load, it will wait for it to resolve, and then render the
     * resolved value’s `.default` as a React component. Both the returned `Promise` and the `Promise`’s
     * resolved value will be cached, so React will not call load more than once. If the `Promise` rejects,
     * React will throw the rejection reason for the nearest Error Boundary to handle.
     *
     * @example
     *
     * ```tsx
     * import { lazy } from 'react';
     *
     * const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));
     * ```
     */
    function lazy<T extends ComponentType<any>>(
        load: () => Promise<{ default: T }>,
    ): LazyExoticComponent<T>;

    //
    // React Hooks
    // ----------------------------------------------------------------------

    /**
     * The instruction passed to a {@link Dispatch} function in {@link useState}
     * to tell React what the next value of the {@link useState} should be.
     *
     * Often found wrapped in {@link Dispatch}.
     *
     * @template S The type of the state.
     *
     * @example
     *
     * ```tsx
     * // This return type correctly represents the type of
     * // `setCount` in the example below.
     * const useCustomState = (): Dispatch<SetStateAction<number>> => {
     *   const [count, setCount] = useState(0);
     *
     *   return setCount;
     * }
     * ```
     */
    type SetStateAction<S> = S | ((prevState: S) => S);

    /**
     * A function that can be used to update the state of a {@link useState}
     * or {@link useReducer} hook.
     */
    type Dispatch<A> = (value: A) => void;
    /**
     * A {@link Dispatch} function can sometimes be called without any arguments.
     */
    type DispatchWithoutAction = () => void;
    // Unlike redux, the actions _can_ be anything
    type Reducer<S, A> = (prevState: S, action: A) => S;
    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.
    type ReducerWithoutAction<S> = (prevState: S) => S;
    // types used to try and prevent the compiler from reducing S
    // to a supertype common with the second argument to useReducer()
    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;
    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;
    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===
    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> = R extends ReducerWithoutAction<infer S> ? S
        : never;
    type DependencyList = readonly unknown[];

    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.
    type EffectCallback = () => void | Destructor;

    interface MutableRefObject<T> {
        current: T;
    }

    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns
    /**
     * Accepts a context object (the value returned from `React.createContext`) and returns the current
     * context value, as given by the nearest context provider for the given context.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useContext}
     */
    function useContext<T>(context: Context<T> /*, (not public API) observedBits?: number|boolean */): T;
    /**
     * Returns a stateful value, and a function to update it.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useState}
     */
    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];
    // convenience overload when first argument is omitted
    /**
     * Returns a stateful value, and a function to update it.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useState}
     */
    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload where dispatch could accept 0 arguments.
    function useReducer<R extends ReducerWithoutAction<any>, I>(
        reducer: R,
        initializerArg: I,
        initializer: (arg: I) => ReducerStateWithoutAction<R>,
    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload where dispatch could accept 0 arguments.
    function useReducer<R extends ReducerWithoutAction<any>>(
        reducer: R,
        initializerArg: ReducerStateWithoutAction<R>,
        initializer?: undefined,
    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload where "I" may be a subset of ReducerState<R>; used to provide autocompletion.
    // If "I" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.
    // the last overload effectively behaves as if the identity function (x => x) is the initializer.
    function useReducer<R extends Reducer<any, any>, I>(
        reducer: R,
        initializerArg: I & ReducerState<R>,
        initializer: (arg: I & ReducerState<R>) => ReducerState<R>,
    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload for free "I"; all goes as long as initializer converts it into "ReducerState<R>".
    function useReducer<R extends Reducer<any, any>, I>(
        reducer: R,
        initializerArg: I,
        initializer: (arg: I) => ReducerState<R>,
    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */

    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.
    // The Flow types do have an overload for 3-ary invocation with undefined initializer.

    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common
    // supertype between the reducer's return type and the initialState (or the initializer's return type),
    // which would prevent autocompletion from ever working.

    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug
    // in older versions, or a regression in newer versions of the typescript completion service.
    function useReducer<R extends Reducer<any, any>>(
        reducer: R,
        initialState: ReducerState<R>,
        initializer?: undefined,
    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];
    /**
     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
     * (`initialValue`). The returned object will persist for the full lifetime of the component.
     *
     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
     * value around similar to how you’d use instance fields in classes.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useRef}
     */
    function useRef<T>(initialValue: T): MutableRefObject<T>;
    // convenience overload for refs given as a ref prop as they typically start with a null value
    /**
     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
     * (`initialValue`). The returned object will persist for the full lifetime of the component.
     *
     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
     * value around similar to how you’d use instance fields in classes.
     *
     * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type
     * of the generic argument.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useRef}
     */
    function useRef<T>(initialValue: T | null): RefObject<T>;
    // convenience overload for potentially undefined initialValue / call with 0 arguments
    // has a default to stop it from defaulting to {} instead
    /**
     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
     * (`initialValue`). The returned object will persist for the full lifetime of the component.
     *
     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
     * value around similar to how you’d use instance fields in classes.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useRef}
     */
    function useRef<T = undefined>(): MutableRefObject<T | undefined>;
    /**
     * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.
     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside
     * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.
     *
     * Prefer the standard `useEffect` when possible to avoid blocking visual updates.
     *
     * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as
     * `componentDidMount` and `componentDidUpdate`.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useLayoutEffect}
     */
    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;
    /**
     * Accepts a function that contains imperative, possibly effectful code.
     *
     * @param effect Imperative function that can return a cleanup function
     * @param deps If present, effect will only activate if the values in the list change.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useEffect}
     */
    function useEffect(effect: EffectCallback, deps?: DependencyList): void;
    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>
    /**
     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using
     * `ref`. As always, imperative code using refs should be avoided in most cases.
     *
     * `useImperativeHandle` should be used with `React.forwardRef`.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useImperativeHandle}
     */
    function useImperativeHandle<T, R extends T>(ref: Ref<T> | undefined, init: () => R, deps?: DependencyList): void;
    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key
    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.
    /**
     * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`
     * has changed.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useCallback}
     */
    // A specific function type would not trigger implicit any.
    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/52873#issuecomment-845806435 for a comparison between `Function` and more specific types.
    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
    function useCallback<T extends Function>(callback: T, deps: DependencyList): T;
    /**
     * `useMemo` will only recompute the memoized value when one of the `deps` has changed.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useMemo}
     */
    // allow undefined, but don't make it optional as that is very likely a mistake
    function useMemo<T>(factory: () => T, deps: DependencyList): T;
    /**
     * `useDebugValue` can be used to display a label for custom hooks in React DevTools.
     *
     * NOTE: We don’t recommend adding debug values to every custom hook.
     * It’s most valuable for custom hooks that are part of shared libraries.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useDebugValue}
     */
    // the name of the custom hook is itself derived from the function name at runtime:
    // it's just the function name without the "use" prefix.
    function useDebugValue<T>(value: T, format?: (value: T) => any): void;

    // must be synchronous
    export type TransitionFunction = () => VoidOrUndefinedOnly;
    // strange definition to allow vscode to show documentation on the invocation
    export interface TransitionStartFunction {
        /**
         * State updates caused inside the callback are allowed to be deferred.
         *
         * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**
         *
         * @param callback A _synchronous_ function which causes state updates that can be deferred.
         */
        (callback: TransitionFunction): void;
    }

    /**
     * Returns a deferred version of the value that may “lag behind” it.
     *
     * This is commonly used to keep the interface responsive when you have something that renders immediately
     * based on user input and something that needs to wait for a data fetch.
     *
     * A good example of this is a text input.
     *
     * @param value The value that is going to be deferred
     *
     * @see {@link https://react.dev/reference/react/useDeferredValue}
     */
    export function useDeferredValue<T>(value: T): T;

    /**
     * Allows components to avoid undesirable loading states by waiting for content to load
     * before transitioning to the next screen. It also allows components to defer slower,
     * data fetching updates until subsequent renders so that more crucial updates can be
     * rendered immediately.
     *
     * The `useTransition` hook returns two values in an array.
     *
     * The first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.
     * The second is a function that takes a callback. We can use it to tell React which state we want to defer.
     *
     * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**
     *
     * @see {@link https://react.dev/reference/react/useTransition}
     */
    export function useTransition(): [boolean, TransitionStartFunction];

    /**
     * Similar to `useTransition` but allows uses where hooks are not available.
     *
     * @param callback A _synchronous_ function which causes state updates that can be deferred.
     */
    export function startTransition(scope: TransitionFunction): void;

    /**
     * Wrap any code rendering and triggering updates to your components into `act()` calls.
     *
     * Ensures that the behavior in your tests matches what happens in the browser
     * more closely by executing pending `useEffect`s before returning. This also
     * reduces the amount of re-renders done.
     *
     * @param callback A synchronous, void callback that will execute as a single, complete React commit.
     *
     * @see https://reactjs.org/blog/2019/02/06/react-v16.8.0.html#testing-hooks
     */
    // While act does always return Thenable, if a void function is passed, we pretend the return value is also void to not trigger dangling Promise lint rules.
    export function act(callback: () => VoidOrUndefinedOnly): void;
    export function act<T>(callback: () => T | Promise<T>): Promise<T>;

    export function useId(): string;

    /**
     * @param effect Imperative function that can return a cleanup function
     * @param deps If present, effect will only activate if the values in the list change.
     *
     * @see {@link https://github.com/facebook/react/pull/21913}
     */
    export function useInsertionEffect(effect: EffectCallback, deps?: DependencyList): void;

    /**
     * @param subscribe
     * @param getSnapshot
     *
     * @see {@link https://github.com/reactwg/react-18/discussions/86}
     */
    // keep in sync with `useSyncExternalStore` from `use-sync-external-store`
    export function useSyncExternalStore<Snapshot>(
        subscribe: (onStoreChange: () => void) => () => void,
        getSnapshot: () => Snapshot,
        getServerSnapshot?: () => Snapshot,
    ): Snapshot;

    //
    // Event System
    // ----------------------------------------------------------------------
    // TODO: change any to unknown when moving to TS v3
    interface BaseSyntheticEvent<E = object, C = any, T = any> {
        nativeEvent: E;
        currentTarget: C;
        target: T;
        bubbles: boolean;
        cancelable: boolean;
        defaultPrevented: boolean;
        eventPhase: number;
        isTrusted: boolean;
        preventDefault(): void;
        isDefaultPrevented(): boolean;
        stopPropagation(): void;
        isPropagationStopped(): boolean;
        persist(): void;
        timeStamp: number;
        type: string;
    }

    /**
     * currentTarget - a reference to the element on which the event listener is registered.
     *
     * target - a reference to the element from which the event was originally dispatched.
     * This might be a child element to the element on which the event listener is registered.
     * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682
     */
    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}

    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {
        clipboardData: DataTransfer;
    }

    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {
        data: string;
    }

    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {
        dataTransfer: DataTransfer;
    }

    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {
        pointerId: number;
        pressure: number;
        tangentialPressure: number;
        tiltX: number;
        tiltY: number;
        twist: number;
        width: number;
        height: number;
        pointerType: "mouse" | "pen" | "touch";
        isPrimary: boolean;
    }

    interface FocusEvent<Target = Element, RelatedTarget = Element> extends SyntheticEvent<Target, NativeFocusEvent> {
        relatedTarget: (EventTarget & RelatedTarget) | null;
        target: EventTarget & Target;
    }

    interface FormEvent<T = Element> extends SyntheticEvent<T> {
    }

    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {
        target: EventTarget & T;
    }

    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {
        target: EventTarget & T;
    }

    export type ModifierKey =
        | "Alt"
        | "AltGraph"
        | "CapsLock"
        | "Control"
        | "Fn"
        | "FnLock"
        | "Hyper"
        | "Meta"
        | "NumLock"
        | "ScrollLock"
        | "Shift"
        | "Super"
        | "Symbol"
        | "SymbolLock";

    interface KeyboardEvent<T = Element> extends UIEvent<T, NativeKeyboardEvent> {
        altKey: boolean;
        /** @deprecated */
        charCode: number;
        ctrlKey: boolean;
        code: string;
        /**
         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
         */
        getModifierState(key: ModifierKey): boolean;
        /**
         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values
         */
        key: string;
        /** @deprecated */
        keyCode: number;
        locale: string;
        location: number;
        metaKey: boolean;
        repeat: boolean;
        shiftKey: boolean;
        /** @deprecated */
        which: number;
    }

    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {
        altKey: boolean;
        button: number;
        buttons: number;
        clientX: number;
        clientY: number;
        ctrlKey: boolean;
        /**
         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
         */
        getModifierState(key: ModifierKey): boolean;
        metaKey: boolean;
        movementX: number;
        movementY: number;
        pageX: number;
        pageY: number;
        relatedTarget: EventTarget | null;
        screenX: number;
        screenY: number;
        shiftKey: boolean;
    }

    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {
        altKey: boolean;
        changedTouches: TouchList;
        ctrlKey: boolean;
        /**
         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
         */
        getModifierState(key: ModifierKey): boolean;
        metaKey: boolean;
        shiftKey: boolean;
        targetTouches: TouchList;
        touches: TouchList;
    }

    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {
        detail: number;
        view: AbstractView;
    }

    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {
        deltaMode: number;
        deltaX: number;
        deltaY: number;
        deltaZ: number;
    }

    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {
        animationName: string;
        elapsedTime: number;
        pseudoElement: string;
    }

    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {
        elapsedTime: number;
        propertyName: string;
        pseudoElement: string;
    }

    //
    // Event Handler Types
    // ----------------------------------------------------------------------

    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }["bivarianceHack"];

    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;

    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;
    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;
    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;
    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;
    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;
    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;
    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;
    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;
    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;
    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;
    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;
    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;
    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;
    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;

    //
    // Props / DOM Attributes
    // ----------------------------------------------------------------------

    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {
    }

    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;

    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {
    }

    interface SVGLineElementAttributes<T> extends SVGProps<T> {}
    interface SVGTextElementAttributes<T> extends SVGProps<T> {}

    interface DOMAttributes<T> {
        children?: ReactNode | undefined;
        dangerouslySetInnerHTML?: {
            // Should be InnerHTML['innerHTML'].
            // But unfortunately we're mixing renderer-specific type declarations.
            __html: string | TrustedHTML;
        } | undefined;

        // Clipboard Events
        onCopy?: ClipboardEventHandler<T> | undefined;
        onCopyCapture?: ClipboardEventHandler<T> | undefined;
        onCut?: ClipboardEventHandler<T> | undefined;
        onCutCapture?: ClipboardEventHandler<T> | undefined;
        onPaste?: ClipboardEventHandler<T> | undefined;
        onPasteCapture?: ClipboardEventHandler<T> | undefined;

        // Composition Events
        onCompositionEnd?: CompositionEventHandler<T> | undefined;
        onCompositionEndCapture?: CompositionEventHandler<T> | undefined;
        onCompositionStart?: CompositionEventHandler<T> | undefined;
        onCompositionStartCapture?: CompositionEventHandler<T> | undefined;
        onCompositionUpdate?: CompositionEventHandler<T> | undefined;
        onCompositionUpdateCapture?: CompositionEventHandler<T> | undefined;

        // Focus Events
        onFocus?: FocusEventHandler<T> | undefined;
        onFocusCapture?: FocusEventHandler<T> | undefined;
        onBlur?: FocusEventHandler<T> | undefined;
        onBlurCapture?: FocusEventHandler<T> | undefined;

        // Form Events
        onChange?: FormEventHandler<T> | undefined;
        onChangeCapture?: FormEventHandler<T> | undefined;
        onBeforeInput?: FormEventHandler<T> | undefined;
        onBeforeInputCapture?: FormEventHandler<T> | undefined;
        onInput?: FormEventHandler<T> | undefined;
        onInputCapture?: FormEventHandler<T> | undefined;
        onReset?: FormEventHandler<T> | undefined;
        onResetCapture?: FormEventHandler<T> | undefined;
        onSubmit?: FormEventHandler<T> | undefined;
        onSubmitCapture?: FormEventHandler<T> | undefined;
        onInvalid?: FormEventHandler<T> | undefined;
        onInvalidCapture?: FormEventHandler<T> | undefined;

        // Image Events
        onLoad?: ReactEventHandler<T> | undefined;
        onLoadCapture?: ReactEventHandler<T> | undefined;
        onError?: ReactEventHandler<T> | undefined; // also a Media Event
        onErrorCapture?: ReactEventHandler<T> | undefined; // also a Media Event

        // Keyboard Events
        onKeyDown?: KeyboardEventHandler<T> | undefined;
        onKeyDownCapture?: KeyboardEventHandler<T> | undefined;
        /** @deprecated Use `onKeyUp` or `onKeyDown` instead */
        onKeyPress?: KeyboardEventHandler<T> | undefined;
        /** @deprecated Use `onKeyUpCapture` or `onKeyDownCapture` instead */
        onKeyPressCapture?: KeyboardEventHandler<T> | undefined;
        onKeyUp?: KeyboardEventHandler<T> | undefined;
        onKeyUpCapture?: KeyboardEventHandler<T> | undefined;

        // Media Events
        onAbort?: ReactEventHandler<T> | undefined;
        onAbortCapture?: ReactEventHandler<T> | undefined;
        onCanPlay?: ReactEventHandler<T> | undefined;
        onCanPlayCapture?: ReactEventHandler<T> | undefined;
        onCanPlayThrough?: ReactEventHandler<T> | undefined;
        onCanPlayThroughCapture?: ReactEventHandler<T> | undefined;
        onDurationChange?: ReactEventHandler<T> | undefined;
        onDurationChangeCapture?: ReactEventHandler<T> | undefined;
        onEmptied?: ReactEventHandler<T> | undefined;
        onEmptiedCapture?: ReactEventHandler<T> | undefined;
        onEncrypted?: ReactEventHandler<T> | undefined;
        onEncryptedCapture?: ReactEventHandler<T> | undefined;
        onEnded?: ReactEventHandler<T> | undefined;
        onEndedCapture?: ReactEventHandler<T> | undefined;
        onLoadedData?: ReactEventHandler<T> | undefined;
        onLoadedDataCapture?: ReactEventHandler<T> | undefined;
        onLoadedMetadata?: ReactEventHandler<T> | undefined;
        onLoadedMetadataCapture?: ReactEventHandler<T> | undefined;
        onLoadStart?: ReactEventHandler<T> | undefined;
        onLoadStartCapture?: ReactEventHandler<T> | undefined;
        onPause?: ReactEventHandler<T> | undefined;
        onPauseCapture?: ReactEventHandler<T> | undefined;
        onPlay?: ReactEventHandler<T> | undefined;
        onPlayCapture?: ReactEventHandler<T> | undefined;
        onPlaying?: ReactEventHandler<T> | undefined;
        onPlayingCapture?: ReactEventHandler<T> | undefined;
        onProgress?: ReactEventHandler<T> | undefined;
        onProgressCapture?: ReactEventHandler<T> | undefined;
        onRateChange?: ReactEventHandler<T> | undefined;
        onRateChangeCapture?: ReactEventHandler<T> | undefined;
        onResize?: ReactEventHandler<T> | undefined;
        onResizeCapture?: ReactEventHandler<T> | undefined;
        onSeeked?: ReactEventHandler<T> | undefined;
        onSeekedCapture?: ReactEventHandler<T> | undefined;
        onSeeking?: ReactEventHandler<T> | undefined;
        onSeekingCapture?: ReactEventHandler<T> | undefined;
        onStalled?: ReactEventHandler<T> | undefined;
        onStalledCapture?: ReactEventHandler<T> | undefined;
        onSuspend?: ReactEventHandler<T> | undefined;
        onSuspendCapture?: ReactEventHandler<T> | undefined;
        onTimeUpdate?: ReactEventHandler<T> | undefined;
        onTimeUpdateCapture?: ReactEventHandler<T> | undefined;
        onVolumeChange?: ReactEventHandler<T> | undefined;
        onVolumeChangeCapture?: ReactEventHandler<T> | undefined;
        onWaiting?: ReactEventHandler<T> | undefined;
        onWaitingCapture?: ReactEventHandler<T> | undefined;

        // MouseEvents
        onAuxClick?: MouseEventHandler<T> | undefined;
        onAuxClickCapture?: MouseEventHandler<T> | undefined;
        onClick?: MouseEventHandler<T> | undefined;
        onClickCapture?: MouseEventHandler<T> | undefined;
        onContextMenu?: MouseEventHandler<T> | undefined;
        onContextMenuCapture?: MouseEventHandler<T> | undefined;
        onDoubleClick?: MouseEventHandler<T> | undefined;
        onDoubleClickCapture?: MouseEventHandler<T> | undefined;
        onDrag?: DragEventHandler<T> | undefined;
        onDragCapture?: DragEventHandler<T> | undefined;
        onDragEnd?: DragEventHandler<T> | undefined;
        onDragEndCapture?: DragEventHandler<T> | undefined;
        onDragEnter?: DragEventHandler<T> | undefined;
        onDragEnterCapture?: DragEventHandler<T> | undefined;
        onDragExit?: DragEventHandler<T> | undefined;
        onDragExitCapture?: DragEventHandler<T> | undefined;
        onDragLeave?: DragEventHandler<T> | undefined;
        onDragLeaveCapture?: DragEventHandler<T> | undefined;
        onDragOver?: DragEventHandler<T> | undefined;
        onDragOverCapture?: DragEventHandler<T> | undefined;
        onDragStart?: DragEventHandler<T> | undefined;
        onDragStartCapture?: DragEventHandler<T> | undefined;
        onDrop?: DragEventHandler<T> | undefined;
        onDropCapture?: DragEventHandler<T> | undefined;
        onMouseDown?: MouseEventHandler<T> | undefined;
        onMouseDownCapture?: MouseEventHandler<T> | undefined;
        onMouseEnter?: MouseEventHandler<T> | undefined;
        onMouseLeave?: MouseEventHandler<T> | undefined;
        onMouseMove?: MouseEventHandler<T> | undefined;
        onMouseMoveCapture?: MouseEventHandler<T> | undefined;
        onMouseOut?: MouseEventHandler<T> | undefined;
        onMouseOutCapture?: MouseEventHandler<T> | undefined;
        onMouseOver?: MouseEventHandler<T> | undefined;
        onMouseOverCapture?: MouseEventHandler<T> | undefined;
        onMouseUp?: MouseEventHandler<T> | undefined;
        onMouseUpCapture?: MouseEventHandler<T> | undefined;

        // Selection Events
        onSelect?: ReactEventHandler<T> | undefined;
        onSelectCapture?: ReactEventHandler<T> | undefined;

        // Touch Events
        onTouchCancel?: TouchEventHandler<T> | undefined;
        onTouchCancelCapture?: TouchEventHandler<T> | undefined;
        onTouchEnd?: TouchEventHandler<T> | undefined;
        onTouchEndCapture?: TouchEventHandler<T> | undefined;
        onTouchMove?: TouchEventHandler<T> | undefined;
        onTouchMoveCapture?: TouchEventHandler<T> | undefined;
        onTouchStart?: TouchEventHandler<T> | undefined;
        onTouchStartCapture?: TouchEventHandler<T> | undefined;

        // Pointer Events
        onPointerDown?: PointerEventHandler<T> | undefined;
        onPointerDownCapture?: PointerEventHandler<T> | undefined;
        onPointerMove?: PointerEventHandler<T> | undefined;
        onPointerMoveCapture?: PointerEventHandler<T> | undefined;
        onPointerUp?: PointerEventHandler<T> | undefined;
        onPointerUpCapture?: PointerEventHandler<T> | undefined;
        onPointerCancel?: PointerEventHandler<T> | undefined;
        onPointerCancelCapture?: PointerEventHandler<T> | undefined;
        onPointerEnter?: PointerEventHandler<T> | undefined;
        onPointerLeave?: PointerEventHandler<T> | undefined;
        onPointerOver?: PointerEventHandler<T> | undefined;
        onPointerOverCapture?: PointerEventHandler<T> | undefined;
        onPointerOut?: PointerEventHandler<T> | undefined;
        onPointerOutCapture?: PointerEventHandler<T> | undefined;
        onGotPointerCapture?: PointerEventHandler<T> | undefined;
        onGotPointerCaptureCapture?: PointerEventHandler<T> | undefined;
        onLostPointerCapture?: PointerEventHandler<T> | undefined;
        onLostPointerCaptureCapture?: PointerEventHandler<T> | undefined;

        // UI Events
        onScroll?: UIEventHandler<T> | undefined;
        onScrollCapture?: UIEventHandler<T> | undefined;

        // Wheel Events
        onWheel?: WheelEventHandler<T> | undefined;
        onWheelCapture?: WheelEventHandler<T> | undefined;

        // Animation Events
        onAnimationStart?: AnimationEventHandler<T> | undefined;
        onAnimationStartCapture?: AnimationEventHandler<T> | undefined;
        onAnimationEnd?: AnimationEventHandler<T> | undefined;
        onAnimationEndCapture?: AnimationEventHandler<T> | undefined;
        onAnimationIteration?: AnimationEventHandler<T> | undefined;
        onAnimationIterationCapture?: AnimationEventHandler<T> | undefined;

        // Transition Events
        onTransitionEnd?: TransitionEventHandler<T> | undefined;
        onTransitionEndCapture?: TransitionEventHandler<T> | undefined;
    }

    export interface CSSProperties extends CSS.Properties<string | number> {
        /**
         * The index signature was removed to enable closed typing for style
         * using CSSType. You're able to use type assertion or module augmentation
         * to add properties or an index signature of your own.
         *
         * For examples and more information, visit:
         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors
         */
    }

    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/
    interface AriaAttributes {
        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */
        "aria-activedescendant"?: string | undefined;
        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */
        "aria-atomic"?: Booleanish | undefined;
        /**
         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
         * presented if they are made.
         */
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined;
        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */
        /**
         * Defines a string value that labels the current element, which is intended to be converted into Braille.
         * @see aria-label.
         */
        "aria-braillelabel"?: string | undefined;
        /**
         * Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.
         * @see aria-roledescription.
         */
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: Booleanish | undefined;
        /**
         * Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
         * @see aria-pressed @see aria-selected.
         */
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined;
        /**
         * Defines the total number of columns in a table, grid, or treegrid.
         * @see aria-colindex.
         */
        "aria-colcount"?: number | undefined;
        /**
         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
         * @see aria-colcount @see aria-colspan.
         */
        "aria-colindex"?: number | undefined;
        /**
         * Defines a human readable text alternative of aria-colindex.
         * @see aria-rowindextext.
         */
        "aria-colindextext"?: string | undefined;
        /**
         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
         * @see aria-colindex @see aria-rowspan.
         */
        "aria-colspan"?: number | undefined;
        /**
         * Identifies the element (or elements) whose contents or presence are controlled by the current element.
         * @see aria-owns.
         */
        "aria-controls"?: string | undefined;
        /** Indicates the element that represents the current item within a container or set of related elements. */
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined;
        /**
         * Identifies the element (or elements) that describes the object.
         * @see aria-labelledby
         */
        "aria-describedby"?: string | undefined;
        /**
         * Defines a string value that describes or annotates the current element.
         * @see related aria-describedby.
         */
        "aria-description"?: string | undefined;
        /**
         * Identifies the element that provides a detailed, extended description for the object.
         * @see aria-describedby.
         */
        "aria-details"?: string | undefined;
        /**
         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
         * @see aria-hidden @see aria-readonly.
         */
        "aria-disabled"?: Booleanish | undefined;
        /**
         * Indicates what functions can be performed when a dragged object is released on the drop target.
         * @deprecated in ARIA 1.1
         */
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
        /**
         * Identifies the element that provides an error message for the object.
         * @see aria-invalid @see aria-describedby.
         */
        "aria-errormessage"?: string | undefined;
        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */
        "aria-expanded"?: Booleanish | undefined;
        /**
         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
         * allows assistive technology to override the general default of reading in document source order.
         */
        "aria-flowto"?: string | undefined;
        /**
         * Indicates an element's "grabbed" state in a drag-and-drop operation.
         * @deprecated in ARIA 1.1
         */
        "aria-grabbed"?: Booleanish | undefined;
        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
        /**
         * Indicates whether the element is exposed to an accessibility API.
         * @see aria-disabled.
         */
        "aria-hidden"?: Booleanish | undefined;
        /**
         * Indicates the entered value does not conform to the format expected by the application.
         * @see aria-errormessage.
         */
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */
        "aria-keyshortcuts"?: string | undefined;
        /**
         * Defines a string value that labels the current element.
         * @see aria-labelledby.
         */
        "aria-label"?: string | undefined;
        /**
         * Identifies the element (or elements) that labels the current element.
         * @see aria-describedby.
         */
        "aria-labelledby"?: string | undefined;
        /** Defines the hierarchical level of an element within a structure. */
        "aria-level"?: number | undefined;
        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        /** Indicates whether an element is modal when displayed. */
        "aria-modal"?: Booleanish | undefined;
        /** Indicates whether a text box accepts multiple lines of input or only a single line. */
        "aria-multiline"?: Booleanish | undefined;
        /** Indicates that the user may select more than one item from the current selectable descendants. */
        "aria-multiselectable"?: Booleanish | undefined;
        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        /**
         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
         * @see aria-controls.
         */
        "aria-owns"?: string | undefined;
        /**
         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
         * A hint could be a sample value or a brief description of the expected format.
         */
        "aria-placeholder"?: string | undefined;
        /**
         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
         * @see aria-setsize.
         */
        "aria-posinset"?: number | undefined;
        /**
         * Indicates the current "pressed" state of toggle buttons.
         * @see aria-checked @see aria-selected.
         */
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined;
        /**
         * Indicates that the element is not editable, but is otherwise operable.
         * @see aria-disabled.
         */
        "aria-readonly"?: Booleanish | undefined;
        /**
         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
         * @see aria-atomic.
         */
        "aria-relevant"?:
            | "additions"
            | "additions removals"
            | "additions text"
            | "all"
            | "removals"
            | "removals additions"
            | "removals text"
            | "text"
            | "text additions"
            | "text removals"
            | undefined;
        /** Indicates that user input is required on the element before a form may be submitted. */
        "aria-required"?: Booleanish | undefined;
        /** Defines a human-readable, author-localized description for the role of an element. */
        "aria-roledescription"?: string | undefined;
        /**
         * Defines the total number of rows in a table, grid, or treegrid.
         * @see aria-rowindex.
         */
        "aria-rowcount"?: number | undefined;
        /**
         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
         * @see aria-rowcount @see aria-rowspan.
         */
        "aria-rowindex"?: number | undefined;
        /**
         * Defines a human readable text alternative of aria-rowindex.
         * @see aria-colindextext.
         */
        "aria-rowindextext"?: string | undefined;
        /**
         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
         * @see aria-rowindex @see aria-colspan.
         */
        "aria-rowspan"?: number | undefined;
        /**
         * Indicates the current "selected" state of various widgets.
         * @see aria-checked @see aria-pressed.
         */
        "aria-selected"?: Booleanish | undefined;
        /**
         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
         * @see aria-posinset.
         */
        "aria-setsize"?: number | undefined;
        /** Indicates if items in a table or grid are sorted in ascending or descending order. */
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        /** Defines the maximum allowed value for a range widget. */
        "aria-valuemax"?: number | undefined;
        /** Defines the minimum allowed value for a range widget. */
        "aria-valuemin"?: number | undefined;
        /**
         * Defines the current value for a range widget.
         * @see aria-valuetext.
         */
        "aria-valuenow"?: number | undefined;
        /** Defines the human readable text alternative of aria-valuenow for a range widget. */
        "aria-valuetext"?: string | undefined;
    }

    // All the WAI-ARIA 1.1 role attribute values from https://www.w3.org/TR/wai-aria-1.1/#role_definitions
    type AriaRole =
        | "alert"
        | "alertdialog"
        | "application"
        | "article"
        | "banner"
        | "button"
        | "cell"
        | "checkbox"
        | "columnheader"
        | "combobox"
        | "complementary"
        | "contentinfo"
        | "definition"
        | "dialog"
        | "directory"
        | "document"
        | "feed"
        | "figure"
        | "form"
        | "grid"
        | "gridcell"
        | "group"
        | "heading"
        | "img"
        | "link"
        | "list"
        | "listbox"
        | "listitem"
        | "log"
        | "main"
        | "marquee"
        | "math"
        | "menu"
        | "menubar"
        | "menuitem"
        | "menuitemcheckbox"
        | "menuitemradio"
        | "navigation"
        | "none"
        | "note"
        | "option"
        | "presentation"
        | "progressbar"
        | "radio"
        | "radiogroup"
        | "region"
        | "row"
        | "rowgroup"
        | "rowheader"
        | "scrollbar"
        | "search"
        | "searchbox"
        | "separator"
        | "slider"
        | "spinbutton"
        | "status"
        | "switch"
        | "tab"
        | "table"
        | "tablist"
        | "tabpanel"
        | "term"
        | "textbox"
        | "timer"
        | "toolbar"
        | "tooltip"
        | "tree"
        | "treegrid"
        | "treeitem"
        | (string & {});

    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {
        // React-specific Attributes
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;

        // Standard HTML Attributes
        accessKey?: string | undefined;
        autoCapitalize?: "off" | "none" | "on" | "sentences" | "words" | "characters" | undefined | (string & {});
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: Booleanish | "inherit" | "plaintext-only" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: Booleanish | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        slot?: string | undefined;
        spellCheck?: Booleanish | undefined;
        style?: CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;

        // Unknown
        radioGroup?: string | undefined; // <command>, <menuitem>

        // WAI-ARIA
        role?: AriaRole | undefined;

        // RDFa Attributes
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;

        // Non-standard Attributes
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;

        // Living Standard
        /**
         * Hints at the type of data that might be entered by the user while editing the element or its contents
         * @see {@link https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute}
         */
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
        /**
         * Specify that a standard HTML element should behave like a defined custom built-in element
         * @see {@link https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is}
         */
        is?: string | undefined;
    }

    /**
     * For internal usage only.
     * Different release channels declare additional types of ReactNode this particular release channel accepts.
     * App or library types should never augment this interface.
     */
    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {}

    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {
        // Standard HTML Attributes
        accept?: string | undefined;
        acceptCharset?: string | undefined;
        action?:
            | string
            | undefined
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ];
        allowFullScreen?: boolean | undefined;
        allowTransparency?: boolean | undefined;
        alt?: string | undefined;
        as?: string | undefined;
        async?: boolean | undefined;
        autoComplete?: string | undefined;
        autoPlay?: boolean | undefined;
        capture?: boolean | "user" | "environment" | undefined;
        cellPadding?: number | string | undefined;
        cellSpacing?: number | string | undefined;
        charSet?: string | undefined;
        challenge?: string | undefined;
        checked?: boolean | undefined;
        cite?: string | undefined;
        classID?: string | undefined;
        cols?: number | undefined;
        colSpan?: number | undefined;
        controls?: boolean | undefined;
        coords?: string | undefined;
        crossOrigin?: CrossOrigin;
        data?: string | undefined;
        dateTime?: string | undefined;
        default?: boolean | undefined;
        defer?: boolean | undefined;
        disabled?: boolean | undefined;
        download?: any;
        encType?: string | undefined;
        form?: string | undefined;
        formAction?:
            | string
            | undefined
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ];
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        frameBorder?: number | string | undefined;
        headers?: string | undefined;
        height?: number | string | undefined;
        high?: number | undefined;
        href?: string | undefined;
        hrefLang?: string | undefined;
        htmlFor?: string | undefined;
        httpEquiv?: string | undefined;
        integrity?: string | undefined;
        keyParams?: string | undefined;
        keyType?: string | undefined;
        kind?: string | undefined;
        label?: string | undefined;
        list?: string | undefined;
        loop?: boolean | undefined;
        low?: number | undefined;
        manifest?: string | undefined;
        marginHeight?: number | undefined;
        marginWidth?: number | undefined;
        max?: number | string | undefined;
        maxLength?: number | undefined;
        media?: string | undefined;
        mediaGroup?: string | undefined;
        method?: string | undefined;
        min?: number | string | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        muted?: boolean | undefined;
        name?: string | undefined;
        noValidate?: boolean | undefined;
        open?: boolean | undefined;
        optimum?: number | undefined;
        pattern?: string | undefined;
        placeholder?: string | undefined;
        playsInline?: boolean | undefined;
        poster?: string | undefined;
        preload?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        reversed?: boolean | undefined;
        rows?: number | undefined;
        rowSpan?: number | undefined;
        sandbox?: string | undefined;
        scope?: string | undefined;
        scoped?: boolean | undefined;
        scrolling?: string | undefined;
        seamless?: boolean | undefined;
        selected?: boolean | undefined;
        shape?: string | undefined;
        size?: number | undefined;
        sizes?: string | undefined;
        span?: number | undefined;
        src?: string | undefined;
        srcDoc?: string | undefined;
        srcLang?: string | undefined;
        srcSet?: string | undefined;
        start?: number | undefined;
        step?: number | string | undefined;
        summary?: string | undefined;
        target?: string | undefined;
        type?: string | undefined;
        useMap?: string | undefined;
        value?: string | readonly string[] | number | undefined;
        width?: number | string | undefined;
        wmode?: string | undefined;
        wrap?: string | undefined;
    }

    type HTMLAttributeReferrerPolicy =
        | ""
        | "no-referrer"
        | "no-referrer-when-downgrade"
        | "origin"
        | "origin-when-cross-origin"
        | "same-origin"
        | "strict-origin"
        | "strict-origin-when-cross-origin"
        | "unsafe-url";

    type HTMLAttributeAnchorTarget =
        | "_self"
        | "_blank"
        | "_parent"
        | "_top"
        | (string & {});

    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {
        download?: any;
        href?: string | undefined;
        hrefLang?: string | undefined;
        media?: string | undefined;
        ping?: string | undefined;
        target?: HTMLAttributeAnchorTarget | undefined;
        type?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
    }

    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}

    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {
        alt?: string | undefined;
        coords?: string | undefined;
        download?: any;
        href?: string | undefined;
        hrefLang?: string | undefined;
        media?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        shape?: string | undefined;
        target?: string | undefined;
    }

    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {
        href?: string | undefined;
        target?: string | undefined;
    }

    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
    }

    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        form?: string | undefined;
        formAction?:
            | string
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ]
            | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        name?: string | undefined;
        type?: "submit" | "reset" | "button" | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {
        height?: number | string | undefined;
        width?: number | string | undefined;
    }

    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {
        span?: number | undefined;
        width?: number | string | undefined;
    }

    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {
        span?: number | undefined;
    }

    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {
        value?: string | readonly string[] | number | undefined;
    }

    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {
        open?: boolean | undefined;
        onToggle?: ReactEventHandler<T> | undefined;
        name?: string | undefined;
    }

    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
        dateTime?: string | undefined;
    }

    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {
        onCancel?: ReactEventHandler<T> | undefined;
        onClose?: ReactEventHandler<T> | undefined;
        open?: boolean | undefined;
    }

    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {
        height?: number | string | undefined;
        src?: string | undefined;
        type?: string | undefined;
        width?: number | string | undefined;
    }

    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        form?: string | undefined;
        name?: string | undefined;
    }

    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {
        acceptCharset?: string | undefined;
        action?:
            | string
            | undefined
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ];
        autoComplete?: string | undefined;
        encType?: string | undefined;
        method?: string | undefined;
        name?: string | undefined;
        noValidate?: boolean | undefined;
        target?: string | undefined;
    }

    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {
        manifest?: string | undefined;
    }

    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {
        allow?: string | undefined;
        allowFullScreen?: boolean | undefined;
        allowTransparency?: boolean | undefined;
        /** @deprecated */
        frameBorder?: number | string | undefined;
        height?: number | string | undefined;
        loading?: "eager" | "lazy" | undefined;
        /** @deprecated */
        marginHeight?: number | undefined;
        /** @deprecated */
        marginWidth?: number | undefined;
        name?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        sandbox?: string | undefined;
        /** @deprecated */
        scrolling?: string | undefined;
        seamless?: boolean | undefined;
        src?: string | undefined;
        srcDoc?: string | undefined;
        width?: number | string | undefined;
    }

    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {
        alt?: string | undefined;
        crossOrigin?: CrossOrigin;
        decoding?: "async" | "auto" | "sync" | undefined;
        fetchPriority?: "high" | "low" | "auto";
        height?: number | string | undefined;
        loading?: "eager" | "lazy" | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        sizes?: string | undefined;
        src?: string | undefined;
        srcSet?: string | undefined;
        useMap?: string | undefined;
        width?: number | string | undefined;
    }

    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
        dateTime?: string | undefined;
    }

    type HTMLInputTypeAttribute =
        | "button"
        | "checkbox"
        | "color"
        | "date"
        | "datetime-local"
        | "email"
        | "file"
        | "hidden"
        | "image"
        | "month"
        | "number"
        | "password"
        | "radio"
        | "range"
        | "reset"
        | "search"
        | "submit"
        | "tel"
        | "text"
        | "time"
        | "url"
        | "week"
        | (string & {});

    type AutoFillAddressKind = "billing" | "shipping";
    type AutoFillBase = "" | "off" | "on";
    type AutoFillContactField =
        | "email"
        | "tel"
        | "tel-area-code"
        | "tel-country-code"
        | "tel-extension"
        | "tel-local"
        | "tel-local-prefix"
        | "tel-local-suffix"
        | "tel-national";
    type AutoFillContactKind = "home" | "mobile" | "work";
    type AutoFillCredentialField = "webauthn";
    type AutoFillNormalField =
        | "additional-name"
        | "address-level1"
        | "address-level2"
        | "address-level3"
        | "address-level4"
        | "address-line1"
        | "address-line2"
        | "address-line3"
        | "bday-day"
        | "bday-month"
        | "bday-year"
        | "cc-csc"
        | "cc-exp"
        | "cc-exp-month"
        | "cc-exp-year"
        | "cc-family-name"
        | "cc-given-name"
        | "cc-name"
        | "cc-number"
        | "cc-type"
        | "country"
        | "country-name"
        | "current-password"
        | "family-name"
        | "given-name"
        | "honorific-prefix"
        | "honorific-suffix"
        | "name"
        | "new-password"
        | "one-time-code"
        | "organization"
        | "postal-code"
        | "street-address"
        | "transaction-amount"
        | "transaction-currency"
        | "username";
    type OptionalPrefixToken<T extends string> = `${T} ` | "";
    type OptionalPostfixToken<T extends string> = ` ${T}` | "";
    type AutoFillField = AutoFillNormalField | `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`;
    type AutoFillSection = `section-${string}`;
    type AutoFill =
        | AutoFillBase
        | `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<
            AutoFillAddressKind
        >}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`;
    type HTMLInputAutoCompleteAttribute = AutoFill | (string & {});

    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {
        accept?: string | undefined;
        alt?: string | undefined;
        autoComplete?: HTMLInputAutoCompleteAttribute | undefined;
        capture?: boolean | "user" | "environment" | undefined; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute
        checked?: boolean | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        formAction?:
            | string
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ]
            | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        height?: number | string | undefined;
        list?: string | undefined;
        max?: number | string | undefined;
        maxLength?: number | undefined;
        min?: number | string | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        name?: string | undefined;
        pattern?: string | undefined;
        placeholder?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        size?: number | undefined;
        src?: string | undefined;
        step?: number | string | undefined;
        type?: HTMLInputTypeAttribute | undefined;
        value?: string | readonly string[] | number | undefined;
        width?: number | string | undefined;

        onChange?: ChangeEventHandler<T> | undefined;
    }

    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {
        challenge?: string | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        keyType?: string | undefined;
        keyParams?: string | undefined;
        name?: string | undefined;
    }

    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {
        form?: string | undefined;
        htmlFor?: string | undefined;
    }

    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {
        value?: string | readonly string[] | number | undefined;
    }

    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {
        as?: string | undefined;
        crossOrigin?: CrossOrigin;
        fetchPriority?: "high" | "low" | "auto";
        href?: string | undefined;
        hrefLang?: string | undefined;
        integrity?: string | undefined;
        media?: string | undefined;
        imageSrcSet?: string | undefined;
        imageSizes?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        sizes?: string | undefined;
        type?: string | undefined;
        charSet?: string | undefined;
    }

    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {
        name?: string | undefined;
    }

    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {
        type?: string | undefined;
    }

    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {
        autoPlay?: boolean | undefined;
        controls?: boolean | undefined;
        controlsList?: string | undefined;
        crossOrigin?: CrossOrigin;
        loop?: boolean | undefined;
        mediaGroup?: string | undefined;
        muted?: boolean | undefined;
        playsInline?: boolean | undefined;
        preload?: string | undefined;
        src?: string | undefined;
    }

    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {
        charSet?: string | undefined;
        content?: string | undefined;
        httpEquiv?: string | undefined;
        media?: string | undefined;
        name?: string | undefined;
    }

    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {
        form?: string | undefined;
        high?: number | undefined;
        low?: number | undefined;
        max?: number | string | undefined;
        min?: number | string | undefined;
        optimum?: number | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
    }

    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {
        classID?: string | undefined;
        data?: string | undefined;
        form?: string | undefined;
        height?: number | string | undefined;
        name?: string | undefined;
        type?: string | undefined;
        useMap?: string | undefined;
        width?: number | string | undefined;
        wmode?: string | undefined;
    }

    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {
        reversed?: boolean | undefined;
        start?: number | undefined;
        type?: "1" | "a" | "A" | "i" | "I" | undefined;
    }

    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        label?: string | undefined;
    }

    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        label?: string | undefined;
        selected?: boolean | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {
        form?: string | undefined;
        htmlFor?: string | undefined;
        name?: string | undefined;
    }

    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {
        name?: string | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {
        max?: number | string | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {
        name?: string | undefined;
    }

    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {
        async?: boolean | undefined;
        /** @deprecated */
        charSet?: string | undefined;
        crossOrigin?: CrossOrigin;
        defer?: boolean | undefined;
        integrity?: string | undefined;
        noModule?: boolean | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        src?: string | undefined;
        type?: string | undefined;
    }

    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {
        autoComplete?: string | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        multiple?: boolean | undefined;
        name?: string | undefined;
        required?: boolean | undefined;
        size?: number | undefined;
        value?: string | readonly string[] | number | undefined;
        onChange?: ChangeEventHandler<T> | undefined;
    }

    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {
        height?: number | string | undefined;
        media?: string | undefined;
        sizes?: string | undefined;
        src?: string | undefined;
        srcSet?: string | undefined;
        type?: string | undefined;
        width?: number | string | undefined;
    }

    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {
        media?: string | undefined;
        scoped?: boolean | undefined;
        type?: string | undefined;
    }

    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {
        align?: "left" | "center" | "right" | undefined;
        bgcolor?: string | undefined;
        border?: number | undefined;
        cellPadding?: number | string | undefined;
        cellSpacing?: number | string | undefined;
        frame?: boolean | undefined;
        rules?: "none" | "groups" | "rows" | "columns" | "all" | undefined;
        summary?: string | undefined;
        width?: number | string | undefined;
    }

    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {
        autoComplete?: string | undefined;
        cols?: number | undefined;
        dirName?: string | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        name?: string | undefined;
        placeholder?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        rows?: number | undefined;
        value?: string | readonly string[] | number | undefined;
        wrap?: string | undefined;

        onChange?: ChangeEventHandler<T> | undefined;
    }

    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {
        align?: "left" | "center" | "right" | "justify" | "char" | undefined;
        colSpan?: number | undefined;
        headers?: string | undefined;
        rowSpan?: number | undefined;
        scope?: string | undefined;
        abbr?: string | undefined;
        height?: number | string | undefined;
        width?: number | string | undefined;
        valign?: "top" | "middle" | "bottom" | "baseline" | undefined;
    }

    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {
        align?: "left" | "center" | "right" | "justify" | "char" | undefined;
        colSpan?: number | undefined;
        headers?: string | undefined;
        rowSpan?: number | undefined;
        scope?: string | undefined;
        abbr?: string | undefined;
    }

    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {
        dateTime?: string | undefined;
    }

    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {
        default?: boolean | undefined;
        kind?: string | undefined;
        label?: string | undefined;
        src?: string | undefined;
        srcLang?: string | undefined;
    }

    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {
        height?: number | string | undefined;
        playsInline?: boolean | undefined;
        poster?: string | undefined;
        width?: number | string | undefined;
        disablePictureInPicture?: boolean | undefined;
        disableRemotePlayback?: boolean | undefined;
    }

    // this list is "complete" in that it contains every SVG attribute
    // that React supports, but the types can be improved.
    // Full list here: https://facebook.github.io/react/docs/dom-elements.html
    //
    // The three broad type categories are (in order of restrictiveness):
    //   - "number | string"
    //   - "string"
    //   - union of string literals
    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {
        // React-specific Attributes
        suppressHydrationWarning?: boolean | undefined;

        // Attributes which also defined in HTMLAttributes
        // See comment in SVGDOMPropertyConfig.js
        className?: string | undefined;
        color?: string | undefined;
        height?: number | string | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        max?: number | string | undefined;
        media?: string | undefined;
        method?: string | undefined;
        min?: number | string | undefined;
        name?: string | undefined;
        style?: CSSProperties | undefined;
        target?: string | undefined;
        type?: string | undefined;
        width?: number | string | undefined;

        // Other HTML properties supported by SVG elements in browsers
        role?: AriaRole | undefined;
        tabIndex?: number | undefined;
        crossOrigin?: CrossOrigin;

        // SVG Specific attributes
        accentHeight?: number | string | undefined;
        accumulate?: "none" | "sum" | undefined;
        additive?: "replace" | "sum" | undefined;
        alignmentBaseline?:
            | "auto"
            | "baseline"
            | "before-edge"
            | "text-before-edge"
            | "middle"
            | "central"
            | "after-edge"
            | "text-after-edge"
            | "ideographic"
            | "alphabetic"
            | "hanging"
            | "mathematical"
            | "inherit"
            | undefined;
        allowReorder?: "no" | "yes" | undefined;
        alphabetic?: number | string | undefined;
        amplitude?: number | string | undefined;
        arabicForm?: "initial" | "medial" | "terminal" | "isolated" | undefined;
        ascent?: number | string | undefined;
        attributeName?: string | undefined;
        attributeType?: string | undefined;
        autoReverse?: Booleanish | undefined;
        azimuth?: number | string | undefined;
        baseFrequency?: number | string | undefined;
        baselineShift?: number | string | undefined;
        baseProfile?: number | string | undefined;
        bbox?: number | string | undefined;
        begin?: number | string | undefined;
        bias?: number | string | undefined;
        by?: number | string | undefined;
        calcMode?: number | string | undefined;
        capHeight?: number | string | undefined;
        clip?: number | string | undefined;
        clipPath?: string | undefined;
        clipPathUnits?: number | string | undefined;
        clipRule?: number | string | undefined;
        colorInterpolation?: number | string | undefined;
        colorInterpolationFilters?: "auto" | "sRGB" | "linearRGB" | "inherit" | undefined;
        colorProfile?: number | string | undefined;
        colorRendering?: number | string | undefined;
        contentScriptType?: number | string | undefined;
        contentStyleType?: number | string | undefined;
        cursor?: number | string | undefined;
        cx?: number | string | undefined;
        cy?: number | string | undefined;
        d?: string | undefined;
        decelerate?: number | string | undefined;
        descent?: number | string | undefined;
        diffuseConstant?: number | string | undefined;
        direction?: number | string | undefined;
        display?: number | string | undefined;
        divisor?: number | string | undefined;
        dominantBaseline?: number | string | undefined;
        dur?: number | string | undefined;
        dx?: number | string | undefined;
        dy?: number | string | undefined;
        edgeMode?: number | string | undefined;
        elevation?: number | string | undefined;
        enableBackground?: number | string | undefined;
        end?: number | string | undefined;
        exponent?: number | string | undefined;
        externalResourcesRequired?: Booleanish | undefined;
        fill?: string | undefined;
        fillOpacity?: number | string | undefined;
        fillRule?: "nonzero" | "evenodd" | "inherit" | undefined;
        filter?: string | undefined;
        filterRes?: number | string | undefined;
        filterUnits?: number | string | undefined;
        floodColor?: number | string | undefined;
        floodOpacity?: number | string | undefined;
        focusable?: Booleanish | "auto" | undefined;
        fontFamily?: string | undefined;
        fontSize?: number | string | undefined;
        fontSizeAdjust?: number | string | undefined;
        fontStretch?: number | string | undefined;
        fontStyle?: number | string | undefined;
        fontVariant?: number | string | undefined;
        fontWeight?: number | string | undefined;
        format?: number | string | undefined;
        fr?: number | string | undefined;
        from?: number | string | undefined;
        fx?: number | string | undefined;
        fy?: number | string | undefined;
        g1?: number | string | undefined;
        g2?: number | string | undefined;
        glyphName?: number | string | undefined;
        glyphOrientationHorizontal?: number | string | undefined;
        glyphOrientationVertical?: number | string | undefined;
        glyphRef?: number | string | undefined;
        gradientTransform?: string | undefined;
        gradientUnits?: string | undefined;
        hanging?: number | string | undefined;
        horizAdvX?: number | string | undefined;
        horizOriginX?: number | string | undefined;
        href?: string | undefined;
        ideographic?: number | string | undefined;
        imageRendering?: number | string | undefined;
        in2?: number | string | undefined;
        in?: string | undefined;
        intercept?: number | string | undefined;
        k1?: number | string | undefined;
        k2?: number | string | undefined;
        k3?: number | string | undefined;
        k4?: number | string | undefined;
        k?: number | string | undefined;
        kernelMatrix?: number | string | undefined;
        kernelUnitLength?: number | string | undefined;
        kerning?: number | string | undefined;
        keyPoints?: number | string | undefined;
        keySplines?: number | string | undefined;
        keyTimes?: number | string | undefined;
        lengthAdjust?: number | string | undefined;
        letterSpacing?: number | string | undefined;
        lightingColor?: number | string | undefined;
        limitingConeAngle?: number | string | undefined;
        local?: number | string | undefined;
        markerEnd?: string | undefined;
        markerHeight?: number | string | undefined;
        markerMid?: string | undefined;
        markerStart?: string | undefined;
        markerUnits?: number | string | undefined;
        markerWidth?: number | string | undefined;
        mask?: string | undefined;
        maskContentUnits?: number | string | undefined;
        maskUnits?: number | string | undefined;
        mathematical?: number | string | undefined;
        mode?: number | string | undefined;
        numOctaves?: number | string | undefined;
        offset?: number | string | undefined;
        opacity?: number | string | undefined;
        operator?: number | string | undefined;
        order?: number | string | undefined;
        orient?: number | string | undefined;
        orientation?: number | string | undefined;
        origin?: number | string | undefined;
        overflow?: number | string | undefined;
        overlinePosition?: number | string | undefined;
        overlineThickness?: number | string | undefined;
        paintOrder?: number | string | undefined;
        panose1?: number | string | undefined;
        path?: string | undefined;
        pathLength?: number | string | undefined;
        patternContentUnits?: string | undefined;
        patternTransform?: number | string | undefined;
        patternUnits?: string | undefined;
        pointerEvents?: number | string | undefined;
        points?: string | undefined;
        pointsAtX?: number | string | undefined;
        pointsAtY?: number | string | undefined;
        pointsAtZ?: number | string | undefined;
        preserveAlpha?: Booleanish | undefined;
        preserveAspectRatio?: string | undefined;
        primitiveUnits?: number | string | undefined;
        r?: number | string | undefined;
        radius?: number | string | undefined;
        refX?: number | string | undefined;
        refY?: number | string | undefined;
        renderingIntent?: number | string | undefined;
        repeatCount?: number | string | undefined;
        repeatDur?: number | string | undefined;
        requiredExtensions?: number | string | undefined;
        requiredFeatures?: number | string | undefined;
        restart?: number | string | undefined;
        result?: string | undefined;
        rotate?: number | string | undefined;
        rx?: number | string | undefined;
        ry?: number | string | undefined;
        scale?: number | string | undefined;
        seed?: number | string | undefined;
        shapeRendering?: number | string | undefined;
        slope?: number | string | undefined;
        spacing?: number | string | undefined;
        specularConstant?: number | string | undefined;
        specularExponent?: number | string | undefined;
        speed?: number | string | undefined;
        spreadMethod?: string | undefined;
        startOffset?: number | string | undefined;
        stdDeviation?: number | string | undefined;
        stemh?: number | string | undefined;
        stemv?: number | string | undefined;
        stitchTiles?: number | string | undefined;
        stopColor?: string | undefined;
        stopOpacity?: number | string | undefined;
        strikethroughPosition?: number | string | undefined;
        strikethroughThickness?: number | string | undefined;
        string?: number | string | undefined;
        stroke?: string | undefined;
        strokeDasharray?: string | number | undefined;
        strokeDashoffset?: string | number | undefined;
        strokeLinecap?: "butt" | "round" | "square" | "inherit" | undefined;
        strokeLinejoin?: "miter" | "round" | "bevel" | "inherit" | undefined;
        strokeMiterlimit?: number | string | undefined;
        strokeOpacity?: number | string | undefined;
        strokeWidth?: number | string | undefined;
        surfaceScale?: number | string | undefined;
        systemLanguage?: number | string | undefined;
        tableValues?: number | string | undefined;
        targetX?: number | string | undefined;
        targetY?: number | string | undefined;
        textAnchor?: string | undefined;
        textDecoration?: number | string | undefined;
        textLength?: number | string | undefined;
        textRendering?: number | string | undefined;
        to?: number | string | undefined;
        transform?: string | undefined;
        u1?: number | string | undefined;
        u2?: number | string | undefined;
        underlinePosition?: number | string | undefined;
        underlineThickness?: number | string | undefined;
        unicode?: number | string | undefined;
        unicodeBidi?: number | string | undefined;
        unicodeRange?: number | string | undefined;
        unitsPerEm?: number | string | undefined;
        vAlphabetic?: number | string | undefined;
        values?: string | undefined;
        vectorEffect?: number | string | undefined;
        version?: string | undefined;
        vertAdvY?: number | string | undefined;
        vertOriginX?: number | string | undefined;
        vertOriginY?: number | string | undefined;
        vHanging?: number | string | undefined;
        vIdeographic?: number | string | undefined;
        viewBox?: string | undefined;
        viewTarget?: number | string | undefined;
        visibility?: number | string | undefined;
        vMathematical?: number | string | undefined;
        widths?: number | string | undefined;
        wordSpacing?: number | string | undefined;
        writingMode?: number | string | undefined;
        x1?: number | string | undefined;
        x2?: number | string | undefined;
        x?: number | string | undefined;
        xChannelSelector?: string | undefined;
        xHeight?: number | string | undefined;
        xlinkActuate?: string | undefined;
        xlinkArcrole?: string | undefined;
        xlinkHref?: string | undefined;
        xlinkRole?: string | undefined;
        xlinkShow?: string | undefined;
        xlinkTitle?: string | undefined;
        xlinkType?: string | undefined;
        xmlBase?: string | undefined;
        xmlLang?: string | undefined;
        xmlns?: string | undefined;
        xmlnsXlink?: string | undefined;
        xmlSpace?: string | undefined;
        y1?: number | string | undefined;
        y2?: number | string | undefined;
        y?: number | string | undefined;
        yChannelSelector?: string | undefined;
        z?: number | string | undefined;
        zoomAndPan?: string | undefined;
    }

    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {
        allowFullScreen?: boolean | undefined;
        allowpopups?: boolean | undefined;
        autosize?: boolean | undefined;
        blinkfeatures?: string | undefined;
        disableblinkfeatures?: string | undefined;
        disableguestresize?: boolean | undefined;
        disablewebsecurity?: boolean | undefined;
        guestinstance?: string | undefined;
        httpreferrer?: string | undefined;
        nodeintegration?: boolean | undefined;
        partition?: string | undefined;
        plugins?: boolean | undefined;
        preload?: string | undefined;
        src?: string | undefined;
        useragent?: string | undefined;
        webpreferences?: string | undefined;
    }

    //
    // React.DOM
    // ----------------------------------------------------------------------

    interface ReactHTML {
        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;
        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;
        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;
        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;
        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;
        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;
        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;
        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        center: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;
        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;
        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLModElement>, HTMLModElement>;
        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;
        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;
        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;
        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;
        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;
        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;
        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;
        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;
        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;
        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;
        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;
        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;
        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;
        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;
        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;
        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;
        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;
        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;
        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;
        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;
        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;
        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;
        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;
        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;
        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;
        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;
        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;
        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;
        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;
        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        search: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;
        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;
        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;
        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;
        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;
        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;
        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;
        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;
        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;
        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;
        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;
        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;
        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;
        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;
        "var": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;
        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;
    }

    interface ReactSVG {
        animate: SVGFactory;
        circle: SVGFactory;
        clipPath: SVGFactory;
        defs: SVGFactory;
        desc: SVGFactory;
        ellipse: SVGFactory;
        feBlend: SVGFactory;
        feColorMatrix: SVGFactory;
        feComponentTransfer: SVGFactory;
        feComposite: SVGFactory;
        feConvolveMatrix: SVGFactory;
        feDiffuseLighting: SVGFactory;
        feDisplacementMap: SVGFactory;
        feDistantLight: SVGFactory;
        feDropShadow: SVGFactory;
        feFlood: SVGFactory;
        feFuncA: SVGFactory;
        feFuncB: SVGFactory;
        feFuncG: SVGFactory;
        feFuncR: SVGFactory;
        feGaussianBlur: SVGFactory;
        feImage: SVGFactory;
        feMerge: SVGFactory;
        feMergeNode: SVGFactory;
        feMorphology: SVGFactory;
        feOffset: SVGFactory;
        fePointLight: SVGFactory;
        feSpecularLighting: SVGFactory;
        feSpotLight: SVGFactory;
        feTile: SVGFactory;
        feTurbulence: SVGFactory;
        filter: SVGFactory;
        foreignObject: SVGFactory;
        g: SVGFactory;
        image: SVGFactory;
        line: SVGFactory;
        linearGradient: SVGFactory;
        marker: SVGFactory;
        mask: SVGFactory;
        metadata: SVGFactory;
        path: SVGFactory;
        pattern: SVGFactory;
        polygon: SVGFactory;
        polyline: SVGFactory;
        radialGradient: SVGFactory;
        rect: SVGFactory;
        stop: SVGFactory;
        svg: SVGFactory;
        switch: SVGFactory;
        symbol: SVGFactory;
        text: SVGFactory;
        textPath: SVGFactory;
        tspan: SVGFactory;
        use: SVGFactory;
        view: SVGFactory;
    }

    interface ReactDOM extends ReactHTML, ReactSVG {}

    //
    // React.PropTypes
    // ----------------------------------------------------------------------

    /**
     * @deprecated Use `Validator` from the ´prop-types` instead.
     */
    type Validator<T> = PropTypes.Validator<T>;

    /**
     * @deprecated Use `Requireable` from the ´prop-types` instead.
     */
    type Requireable<T> = PropTypes.Requireable<T>;

    /**
     * @deprecated Use `ValidationMap` from the ´prop-types` instead.
     */
    type ValidationMap<T> = PropTypes.ValidationMap<T>;

    /**
     * @deprecated Use `WeakValidationMap` from the ´prop-types` instead.
     */
    type WeakValidationMap<T> = {
        [K in keyof T]?: null extends T[K] ? Validator<T[K] | null | undefined>
            : undefined extends T[K] ? Validator<T[K] | null | undefined>
            : Validator<T[K]>;
    };

    /**
     * @deprecated Use `PropTypes.*` where `PropTypes` comes from `import * as PropTypes from 'prop-types'` instead.
     */
    interface ReactPropTypes {
        any: typeof PropTypes.any;
        array: typeof PropTypes.array;
        bool: typeof PropTypes.bool;
        func: typeof PropTypes.func;
        number: typeof PropTypes.number;
        object: typeof PropTypes.object;
        string: typeof PropTypes.string;
        node: typeof PropTypes.node;
        element: typeof PropTypes.element;
        instanceOf: typeof PropTypes.instanceOf;
        oneOf: typeof PropTypes.oneOf;
        oneOfType: typeof PropTypes.oneOfType;
        arrayOf: typeof PropTypes.arrayOf;
        objectOf: typeof PropTypes.objectOf;
        shape: typeof PropTypes.shape;
        exact: typeof PropTypes.exact;
    }

    //
    // React.Children
    // ----------------------------------------------------------------------

    /**
     * @deprecated - Use `typeof React.Children` instead.
     */
    // Sync with type of `const Children`.
    interface ReactChildren {
        map<T, C>(
            children: C | readonly C[],
            fn: (child: C, index: number) => T,
        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;
        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;
        count(children: any): number;
        only<C>(children: C): C extends any[] ? never : C;
        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;
    }

    //
    // Browser Interfaces
    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts
    // ----------------------------------------------------------------------

    interface AbstractView {
        styleMedia: StyleMedia;
        document: Document;
    }

    interface Touch {
        identifier: number;
        target: EventTarget;
        screenX: number;
        screenY: number;
        clientX: number;
        clientY: number;
        pageX: number;
        pageY: number;
    }

    interface TouchList {
        [index: number]: Touch;
        length: number;
        item(index: number): Touch;
        identifiedTouch(identifier: number): Touch;
    }

    //
    // Error Interfaces
    // ----------------------------------------------------------------------
    interface ErrorInfo {
        /**
         * Captures which component contained the exception, and its ancestors.
         */
        componentStack?: string | null;
        digest?: string | null;
    }

    // Keep in sync with JSX namespace in ./jsx-runtime.d.ts and ./jsx-dev-runtime.d.ts
    namespace JSX {
        type ElementType = GlobalJSXElementType;
        interface Element extends GlobalJSXElement {}
        interface ElementClass extends GlobalJSXElementClass {}
        interface ElementAttributesProperty extends GlobalJSXElementAttributesProperty {}
        interface ElementChildrenAttribute extends GlobalJSXElementChildrenAttribute {}

        type LibraryManagedAttributes<C, P> = GlobalJSXLibraryManagedAttributes<C, P>;

        interface IntrinsicAttributes extends GlobalJSXIntrinsicAttributes {}
        interface IntrinsicClassAttributes<T> extends GlobalJSXIntrinsicClassAttributes<T> {}
        interface IntrinsicElements extends GlobalJSXIntrinsicElements {}
    }
}

// naked 'any' type in a conditional type will short circuit and union both the then/else branches
// so boolean is only resolved for T = any
type IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;

type ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];
type NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;

// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any
type MergePropTypes<P, T> =
    // Distribute over P in case it is a union type
    P extends any
        // If props is type any, use propTypes definitions
        ? IsExactlyAny<P> extends true ? T
            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened
        : string extends keyof P ? P
            // Prefer declared types which are not exactly any
        :
            & Pick<P, NotExactlyAnyPropertyKeys<P>>
            // For props which are exactly any, use the type inferred from propTypes if present
            & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>
            // Keep leftover props not specified in propTypes
            & Pick<P, Exclude<keyof P, keyof T>>
        : never;

type InexactPartial<T> = { [K in keyof T]?: T[K] | undefined };

// Any prop that has a default prop becomes optional, but its type is unchanged
// Undeclared default props are augmented into the resulting allowable attributes
// If declared props have indexed properties, ignore default props entirely as keyof gets widened
// Wrap in an outer-level conditional type to allow distribution over props that are unions
type Defaultize<P, D> = P extends any ? string extends keyof P ? P
    :
        & Pick<P, Exclude<keyof P, keyof D>>
        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>
        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>
    : never;

type ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D }
    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>
    : C extends { propTypes: infer T } ? MergePropTypes<P, PropTypes.InferProps<T>>
    : C extends { defaultProps: infer D } ? Defaultize<P, D>
    : P;

declare global {
    /**
     * @deprecated Use `React.JSX` instead of the global `JSX` namespace.
     */
    namespace JSX {
        // We don't just alias React.ElementType because React.ElementType
        // historically does more than we need it to.
        // E.g. it also contains .propTypes and so TS also verifies the declared
        // props type does match the declared .propTypes.
        // But if libraries declared their .propTypes but not props type,
        // or they mismatch, you won't be able to use the class component
        // as a JSX.ElementType.
        // We could fix this everywhere but we're ultimately not interested in
        // .propTypes assignability so we might as well drop it entirely here to
        //  reduce the work of the type-checker.
        // TODO: Check impact of making React.ElementType<P = any> = React.JSXElementConstructor<P>
        type ElementType = string | React.JSXElementConstructor<any>;
        interface Element extends React.ReactElement<any, any> {}
        interface ElementClass extends React.Component<any> {
            render(): React.ReactNode;
        }
        interface ElementAttributesProperty {
            props: {};
        }
        interface ElementChildrenAttribute {
            children: {};
        }

        // We can't recurse forever because `type` can't be self-referential;
        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa
        type LibraryManagedAttributes<C, P> = C extends
            React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>
            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>
                ? ReactManagedAttributes<U, P>
            : ReactManagedAttributes<T, P>
            : ReactManagedAttributes<C, P>;

        interface IntrinsicAttributes extends React.Attributes {}
        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> {}

        interface IntrinsicElements {
            // HTML
            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;
            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;
            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;
            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;
            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;
            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;
            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;
            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            center: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;
            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;
            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLModElement>, HTMLModElement>;
            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;
            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;
            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;
            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;
            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;
            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;
            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;
            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;
            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;
            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;
            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;
            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;
            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;
            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;
            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;
            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;
            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;
            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;
            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;
            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;
            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;
            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;
            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;
            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;
            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;
            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;
            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;
            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;
            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;
            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            search: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;
            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;
            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;
            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;
            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;
            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;
            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;
            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;
            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;
            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;
            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;
            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;
            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;
            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;
            "var": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;
            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;

            // SVG
            svg: React.SVGProps<SVGSVGElement>;

            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.
            animateMotion: React.SVGProps<SVGElement>;
            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.
            circle: React.SVGProps<SVGCircleElement>;
            clipPath: React.SVGProps<SVGClipPathElement>;
            defs: React.SVGProps<SVGDefsElement>;
            desc: React.SVGProps<SVGDescElement>;
            ellipse: React.SVGProps<SVGEllipseElement>;
            feBlend: React.SVGProps<SVGFEBlendElement>;
            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;
            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;
            feComposite: React.SVGProps<SVGFECompositeElement>;
            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;
            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;
            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;
            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;
            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;
            feFlood: React.SVGProps<SVGFEFloodElement>;
            feFuncA: React.SVGProps<SVGFEFuncAElement>;
            feFuncB: React.SVGProps<SVGFEFuncBElement>;
            feFuncG: React.SVGProps<SVGFEFuncGElement>;
            feFuncR: React.SVGProps<SVGFEFuncRElement>;
            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;
            feImage: React.SVGProps<SVGFEImageElement>;
            feMerge: React.SVGProps<SVGFEMergeElement>;
            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;
            feMorphology: React.SVGProps<SVGFEMorphologyElement>;
            feOffset: React.SVGProps<SVGFEOffsetElement>;
            fePointLight: React.SVGProps<SVGFEPointLightElement>;
            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;
            feSpotLight: React.SVGProps<SVGFESpotLightElement>;
            feTile: React.SVGProps<SVGFETileElement>;
            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;
            filter: React.SVGProps<SVGFilterElement>;
            foreignObject: React.SVGProps<SVGForeignObjectElement>;
            g: React.SVGProps<SVGGElement>;
            image: React.SVGProps<SVGImageElement>;
            line: React.SVGLineElementAttributes<SVGLineElement>;
            linearGradient: React.SVGProps<SVGLinearGradientElement>;
            marker: React.SVGProps<SVGMarkerElement>;
            mask: React.SVGProps<SVGMaskElement>;
            metadata: React.SVGProps<SVGMetadataElement>;
            mpath: React.SVGProps<SVGElement>;
            path: React.SVGProps<SVGPathElement>;
            pattern: React.SVGProps<SVGPatternElement>;
            polygon: React.SVGProps<SVGPolygonElement>;
            polyline: React.SVGProps<SVGPolylineElement>;
            radialGradient: React.SVGProps<SVGRadialGradientElement>;
            rect: React.SVGProps<SVGRectElement>;
            set: React.SVGProps<SVGSetElement>;
            stop: React.SVGProps<SVGStopElement>;
            switch: React.SVGProps<SVGSwitchElement>;
            symbol: React.SVGProps<SVGSymbolElement>;
            text: React.SVGTextElementAttributes<SVGTextElement>;
            textPath: React.SVGProps<SVGTextPathElement>;
            tspan: React.SVGProps<SVGTSpanElement>;
            use: React.SVGProps<SVGUseElement>;
            view: React.SVGProps<SVGViewElement>;
        }
    }
}

// React.JSX needs to point to global.JSX to keep global module augmentations intact.
// But we can't access global.JSX so we need to create these aliases instead.
// Once the global JSX namespace will be removed we replace React.JSX with the contents of global.JSX
type GlobalJSXElementType = JSX.ElementType;
interface GlobalJSXElement extends JSX.Element {}
interface GlobalJSXElementClass extends JSX.ElementClass {}
interface GlobalJSXElementAttributesProperty extends JSX.ElementAttributesProperty {}
interface GlobalJSXElementChildrenAttribute extends JSX.ElementChildrenAttribute {}

type GlobalJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<C, P>;

interface GlobalJSXIntrinsicAttributes extends JSX.IntrinsicAttributes {}
interface GlobalJSXIntrinsicClassAttributes<T> extends JSX.IntrinsicClassAttributes<T> {}

interface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}

 
<img
                    alt=""
                    src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                    className="size-8 rounded-full"
                  />
 

              <MenuItems
                transition
                className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black/5 transition focus:outline-none data-[closed]:scale-95 data-[closed]:transform data-[closed]:opacity-0 data-[enter]:duration-100 data-[leave]:duration-75 data-[enter]:ease-out data-[leave]:ease-in"
              >
              </MenuItems>
 
rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800
 

                      paddingTop: "10px",
 

                </MenuButton>
 

                <MenuButton className="relative flex rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800">
 
<span className="absolute -inset-1.5" />
                  <span className="sr-only">Open user menu</span>
                  <img
                    alt=""
                    src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                    className="size-8 rounded-full"
                  />
 
<span className="absolute -inset-1.5" />
                  <span className="sr-only">Open user menu</span>
                  <img
                    alt=""
                    src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                    className="size-8 rounded-full"
                  />
 

              <MenuItems
                transition
                className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black/5 transition focus:outline-none data-[closed]:scale-95 data-[closed]:transform data-[closed]:opacity-0 data-[enter]:duration-100 data-[leave]:duration-75 data-[enter]:ease-out data-[leave]:ease-in"
              >
              </MenuItems>
 

                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Your Profile
                  </a>
                </MenuItem>
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Settings
                  </a>
                </MenuItem>
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Sign out
                  </a>
                </MenuItem>
 

                className="h-12 w-auto"
 
className="bg-red-400"
 
bg-gray-800
 
import { Disclosure, DisclosureButton, DisclosurePanel, Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/react'
import { Bars3Icon, BellIcon, XMarkIcon } from '@heroicons/react/24/outline'

const navigation = [
  { name: 'Dashboard', href: '#', current: true },
  { name: 'Team', href: '#', current: false },
  { name: 'Projects', href: '#', current: false },
  { name: 'Calendar', href: '#', current: false },
]

function classNames(...classes) {
  return classes.filter(Boolean).join(' ')
}

export default function Navbar() {
  return (
    <Disclosure as="nav" className="bg-gray-800">
      <div className="mx-auto max-w-7xl px-2 sm:px-6 lg:px-8">
        <div className="relative flex h-16 items-center justify-between">
          <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
            {/* Mobile menu button*/}
            <DisclosureButton className="group relative inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
              <span className="absolute -inset-0.5" />
              <span className="sr-only">Open main menu</span>
              <Bars3Icon aria-hidden="true" className="block size-6 group-data-[open]:hidden" />
              <XMarkIcon aria-hidden="true" className="hidden size-6 group-data-[open]:block" />
            </DisclosureButton>
          </div>
          <div className="flex flex-1 items-center justify-center sm:items-stretch sm:justify-start">
            <div className="flex shrink-0 items-center">
              <img
                alt="Your Company"
                src="https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=500"
                className="h-8 w-auto"
              />
            </div>
            <div className="hidden sm:ml-6 sm:block">
              <div className="flex space-x-4">
                {navigation.map((item) => (
                  <a
                    key={item.name}
                    href={item.href}
                    aria-current={item.current ? 'page' : undefined}
                    className={classNames(
                      item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                      'rounded-md px-3 py-2 text-sm font-medium',
                    )}
                  >
                    {item.name}
                  </a>
                ))}
              </div>
            </div>
          </div>
          <div className="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
            <button
              type="button"
              className="relative rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800"
            >
              <span className="absolute -inset-1.5" />
              <span className="sr-only">View notifications</span>
              <BellIcon aria-hidden="true" className="size-6" />
            </button>

            {/* Profile dropdown */}
            <Menu as="div" className="relative ml-3">
              <div>
                <MenuButton className="relative flex rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800">
                  <span className="absolute -inset-1.5" />
                  <span className="sr-only">Open user menu</span>
                  <img
                    alt=""
                    src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                    className="size-8 rounded-full"
                  />
                </MenuButton>
              </div>
              <MenuItems
                transition
                className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black/5 transition focus:outline-none data-[closed]:scale-95 data-[closed]:transform data-[closed]:opacity-0 data-[enter]:duration-100 data-[leave]:duration-75 data-[enter]:ease-out data-[leave]:ease-in"
              >
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Your Profile
                  </a>
                </MenuItem>
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Settings
                  </a>
                </MenuItem>
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Sign out
                  </a>
                </MenuItem>
              </MenuItems>
            </Menu>
          </div>
        </div>
      </div>

      <DisclosurePanel className="sm:hidden">
        <div className="space-y-1 px-2 pb-3 pt-2">
          {navigation.map((item) => (
            <DisclosureButton
              key={item.name}
              as="a"
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(
                item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                'block rounded-md px-3 py-2 text-base font-medium',
              )}
            >
              {item.name}
            </DisclosureButton>
          ))}
        </div>
      </DisclosurePanel>
    </Disclosure>
  )
}

 
https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=500
 
Your Company
 
import { Disclosure, DisclosureButton, DisclosurePanel, Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/react'
import { Bars3Icon, BellIcon, XMarkIcon } from '@heroicons/react/24/outline'

const navigation = [
  { name: 'Dashboard', href: '#', current: true },
  { name: 'Team', href: '#', current: false },
  { name: 'Projects', href: '#', current: false },
  { name: 'Calendar', href: '#', current: false },
]

function classNames(...classes) {
  return classes.filter(Boolean).join(' ')
}

export default function Example() {
  return (
    <Disclosure as="nav" className="bg-gray-800">
      <div className="mx-auto max-w-7xl px-2 sm:px-6 lg:px-8">
        <div className="relative flex h-16 items-center justify-between">
          <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
            {/* Mobile menu button*/}
            <DisclosureButton className="group relative inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
              <span className="absolute -inset-0.5" />
              <span className="sr-only">Open main menu</span>
              <Bars3Icon aria-hidden="true" className="block size-6 group-data-[open]:hidden" />
              <XMarkIcon aria-hidden="true" className="hidden size-6 group-data-[open]:block" />
            </DisclosureButton>
          </div>
          <div className="flex flex-1 items-center justify-center sm:items-stretch sm:justify-start">
            <div className="flex shrink-0 items-center">
              <img
                alt="Your Company"
                src="https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=500"
                className="h-8 w-auto"
              />
            </div>
            <div className="hidden sm:ml-6 sm:block">
              <div className="flex space-x-4">
                {navigation.map((item) => (
                  <a
                    key={item.name}
                    href={item.href}
                    aria-current={item.current ? 'page' : undefined}
                    className={classNames(
                      item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                      'rounded-md px-3 py-2 text-sm font-medium',
                    )}
                  >
                    {item.name}
                  </a>
                ))}
              </div>
            </div>
          </div>
          <div className="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
            <button
              type="button"
              className="relative rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800"
            >
              <span className="absolute -inset-1.5" />
              <span className="sr-only">View notifications</span>
              <BellIcon aria-hidden="true" className="size-6" />
            </button>

            {/* Profile dropdown */}
            <Menu as="div" className="relative ml-3">
              <div>
                <MenuButton className="relative flex rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800">
                  <span className="absolute -inset-1.5" />
                  <span className="sr-only">Open user menu</span>
                  <img
                    alt=""
                    src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                    className="size-8 rounded-full"
                  />
                </MenuButton>
              </div>
              <MenuItems
                transition
                className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black/5 transition focus:outline-none data-[closed]:scale-95 data-[closed]:transform data-[closed]:opacity-0 data-[enter]:duration-100 data-[leave]:duration-75 data-[enter]:ease-out data-[leave]:ease-in"
              >
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Your Profile
                  </a>
                </MenuItem>
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Settings
                  </a>
                </MenuItem>
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Sign out
                  </a>
                </MenuItem>
              </MenuItems>
            </Menu>
          </div>
        </div>
      </div>

      <DisclosurePanel className="sm:hidden">
        <div className="space-y-1 px-2 pb-3 pt-2">
          {navigation.map((item) => (
            <DisclosureButton
              key={item.name}
              as="a"
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(
                item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                'block rounded-md px-3 py-2 text-base font-medium',
              )}
            >
              {item.name}
            </DisclosureButton>
          ))}
        </div>
      </DisclosurePanel>
 
import { Disclosure, DisclosureButton, DisclosurePanel, Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/react'
import { Bars3Icon, BellIcon, XMarkIcon } from '@heroicons/react/24/outline'

const navigation = [
  { name: 'Dashboard', href: '#', current: true },
  { name: 'Team', href: '#', current: false },
  { name: 'Projects', href: '#', current: false },
  { name: 'Calendar', href: '#', current: false },
]

function classNames(...classes) {
  return classes.filter(Boolean).join(' ')
}

export default function Navbar() {
  return (
    <Disclosure as="nav" className="bg-gray-800">
      <div className="mx-auto max-w-7xl px-2 sm:px-6 lg:px-8">
        <div className="relative flex h-16 items-center justify-between">
          <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
            {/* Mobile menu button*/}
            <DisclosureButton className="group relative inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
              <span className="absolute -inset-0.5" />
              <span className="sr-only">Open main menu</span>
              <Bars3Icon aria-hidden="true" className="block size-6 group-data-[open]:hidden" />
              <XMarkIcon aria-hidden="true" className="hidden size-6 group-data-[open]:block" />
            </DisclosureButton>
          </div>
          <div className="flex flex-1 items-center justify-center sm:items-stretch sm:justify-start">
            <div className="flex shrink-0 items-center">
              <img
                alt="Your Company"
                src="https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=500"
                className="h-8 w-auto"
              />
            </div>
            <div className="hidden sm:ml-6 sm:block">
              <div className="flex space-x-4">
                {navigation.map((item) => (
                  <a
                    key={item.name}
                    href={item.href}
                    aria-current={item.current ? 'page' : undefined}
                    className={classNames(
                      item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                      'rounded-md px-3 py-2 text-sm font-medium',
                    )}
                  >
                    {item.name}
                  </a>
                ))}
              </div>
            </div>
          </div>
          <div className="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
            <button
              type="button"
              className="relative rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800"
            >
              <span className="absolute -inset-1.5" />
              <span className="sr-only">View notifications</span>
              <BellIcon aria-hidden="true" className="size-6" />
            </button>

            {/* Profile dropdown */}
            <Menu as="div" className="relative ml-3">
              <div>
                <MenuButton className="relative flex rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800">
                  <span className="absolute -inset-1.5" />
                  <span className="sr-only">Open user menu</span>
                  <img
                    alt=""
                    src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                    className="size-8 rounded-full"
                  />
                </MenuButton>
              </div>
              <MenuItems
                transition
                className="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black/5 transition focus:outline-none data-[closed]:scale-95 data-[closed]:transform data-[closed]:opacity-0 data-[enter]:duration-100 data-[leave]:duration-75 data-[enter]:ease-out data-[leave]:ease-in"
              >
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Your Profile
                  </a>
                </MenuItem>
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Settings
                  </a>
                </MenuItem>
                <MenuItem>
                  <a
                    href="#"
                    className="block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100 data-[focus]:outline-none"
                  >
                    Sign out
                  </a>
                </MenuItem>
              </MenuItems>
            </Menu>
          </div>
        </div>
      </div>

      <DisclosurePanel className="sm:hidden">
        <div className="space-y-1 px-2 pb-3 pt-2">
          {navigation.map((item) => (
            <DisclosureButton
              key={item.name}
              as="a"
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(
                item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',
                'block rounded-md px-3 py-2 text-base font-medium',
              )}
            >
              {item.name}
            </DisclosureButton>
          ))}
        </div>
      </DisclosurePanel>
    </Disclosure>
  )
}

 
Example
 
import React, { useState } from "react";
import logo from "../Asessts/logo.png";
import NavDropdown from './NavDropdown';  // Make sure to use correct path for Dropdown
import { Link } from "react-router-dom";

function Navbar() {
  const [isOpen, setIsOpen] = useState(false);

  const toggleNav = () => {
    setIsOpen(!isOpen);
  };

  return (
    <nav className="w-full bg-white fixed top-0 left-0 z-10 flex items-center justify-between p-4">
      <a href="/">
        <img src={logo} alt="logo" className="w-44 md:w-32 pl-12" />
      </a>
      <div className="block md:hidden pr-6 cursor-pointer" onClick={toggleNav}>
        &#9776;
      </div>
      <div className={`flex items-center ${isOpen ? "block" : "hidden"} md:flex md:space-x-4`}>
        {isOpen && <img src={logo} alt="logo" className="w-24 mx-auto mt-4 md:hidden" />}
        <ul className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
          <li>Find Suppliers</li>
          <li>
            <NavDropdown />
          </li>
          <li>
            <button className="w-48 h-12 border-2 border-green-700 rounded-md text-green-700">
              <span className="font-semibold text-center block">
                <a href="#">Login</a> <span>/</span>
                <a href="#">Sign Up</a>
              </span>
            </button>
          </li>
        </ul>
      </div>
    </nav>
  );
}

export default Navbar;

 
import React, { useState } from "react";
import logo from "../Asessts/logo.png";
// import NavDropdown from './DropDown/Dropdown'; // Make sure the path is correct
import { Link } from "react-router-dom";

function Navbar() {
  const [isOpen, setIsOpen] = useState(false);

  const toggleNav = () => {
    setIsOpen(!isOpen);
  };

  return (
    <nav className="w-full bg-white fixed top-0 left-0 z-10 flex items-center justify-between p-4">
      <a href="/">
        <img src={logo} alt="logo" className="w-44 md:w-32 pl-12" />
      </a>
      <div className="block md:hidden pr-6 cursor-pointer" onClick={toggleNav}>
        &#9776;
      </div>
      <div className={`flex items-center ${isOpen ? "block" : "hidden"} md:flex md:space-x-4`}>
        {isOpen && <img src={logo} alt="logo" className="w-24 mx-auto mt-4 md:hidden" />}
        <ul className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
          <li>Find Suppliers</li>
          <li>
            {/* <NavDropdown /> */}
          </li>
          <li>
            <button className="w-48 h-12 border-2 border-green-700 rounded-md text-green-700">
              <span className="font-semibold text-center block">
                <a href="#">Login</a> <span>/</span>
                <a href="#">Sign Up</a>
              </span>
            </button>
          </li>
        </ul>
      </div>
    </nav>
  );
}

export default Navbar;

 
../assets/logo.png
 
import React, { useState } from "react";
import logo from "../Asessts/logo.png";
import NavDropdown from './NavDropdown';  // Make sure to use correct path for Dropdown
import { Link } from "react-router-dom";

function Navbar() {
  const [isOpen, setIsOpen] = useState(false);

  const toggleNav = () => {
    setIsOpen(!isOpen);
  };

  return (
    <nav className="w-full bg-white fixed top-0 left-0 z-10 flex items-center justify-between p-4">
      <a href="/">
        <img src={logo} alt="logo" className="w-44 md:w-32 pl-12" />
      </a>
      <div className="block md:hidden pr-6 cursor-pointer" onClick={toggleNav}>
        &#9776;
      </div>
      <div className={`flex items-center ${isOpen ? "block" : "hidden"} md:flex md:space-x-4`}>
        {isOpen && <img src={logo} alt="logo" className="w-24 mx-auto mt-4 md:hidden" />}
        <ul className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
          <li>Find Suppliers</li>
          <li>
            <NavDropdown />
          </li>
          <li>
            <button className="w-48 h-12 border-2 border-green-700 rounded-md text-green-700">
              <span className="font-semibold text-center block">
                <a href="#">Login</a> <span>/</span>
                <a href="#">Sign Up</a>
              </span>
            </button>
          </li>
        </ul>
      </div>
    </nav>
  );
}

export default Navbar;

 
./DropDown/Dropdow
 
../assets/logo.png
 
import React, { useState, useEffect } from "react";
import { IoIosArrowDown } from "react-icons/io";

const NavDropdown = () => {
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    function handleClickOutside(event) {
      if (!event.target.closest(".dropdown")) {
        setIsOpen(false);
      }
    }

    document.addEventListener("click", handleClickOutside);
    return () => {
      document.removeEventListener("click", handleClickOutside);
    };
  }, []);

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  return (
    <div className="dropdown relative">
      <li className="flex items-center cursor-pointer" onClick={toggleDropdown}>
        <span className="flex items-center gap-2">Find Service Tags <IoIosArrowDown /></span>
      </li>
      <ul className={`absolute left-0 mt-2 bg-white shadow-lg rounded-lg overflow-hidden transition-all ${isOpen ? "max-h-60" : "max-h-0"} w-40`}>
        <li>
          <a href="#" className="block px-4 py-2 text-black hover:bg-gray-200">Supplier</a>
        </li>
        <li>
          <a href="#" className="block px-4 py-2 text-black hover:bg-gray-200">Mini Supplier</a>
        </li>
        <li>
          <a href="#" className="block px-4 py-2 text-black hover:bg-gray-200">Hard Supplier</a>
        </li>
      </ul>
    </div>
  );
};

export default NavDropdown;

 
import React, { useState } from "react";
import logo from "../Asessts/logo.png";
import NavDropdown from '../Navbar/NavDropdown';
import { Link } from "react-router-dom";

function Navbar() {
  const [isOpen, setIsOpen] = useState(false);

  const toggleNav = () => {
    setIsOpen(!isOpen);
  };

  return (
    <nav className="w-full bg-white fixed top-0 left-0 z-10 flex items-center justify-between p-4">
      <a href="/">
        <img src={logo} alt="logo" className="w-44 md:w-30 pl-12" />
      </a>
      <div className="block md:hidden pr-6 cursor-pointer" onClick={toggleNav}>
        &#9776;
      </div>
      <div className={`flex items-center ${isOpen ? "block" : "hidden"} md:flex md:space-x-4`}>
        {isOpen && <img src={logo} alt="logo" className="w-24 mx-auto mt-4 md:hidden" />}
        <ul className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
          <li>Find Suppliers</li>
          <li>
            <NavDropdown />
          </li>
          <li>
            <button className="w-48 h-12 border-2 border-green-700 rounded-md text-green-700">
              <span className="font-semibold text-center block">
                <a href="#">Login</a> <span>/</span>
                <a href="#">Sign Up</a>
              </span>
            </button>
          </li>
        </ul>
      </div>
    </nav>
  );
}

export default Navbar;

 
../assets/logo.png
 
../Navbar/DropDown/Dropdown
 
import React from "react";
import logo from "../Asessts/logo.png";

function Navbar() {
  return (
    <nav className="bg-purple-800 text-white flex justify-between items-center py-4 h-10">
      {/* Logo Section */}
      <img src={logo} alt="hb" className="h-auto max-h-12 px-8" />

      {/* Navigation Links */}
      <ul className="flex space-x-11 ml-auto px-6">
        <li className="hover:underline cursor-pointer">Find Suppliers</li>
        <li className="hover:underline cursor-pointer">Find Service Tags</li>
        <button className="">
          Login / Signup
        </button>
      </ul>
    </nav>
  );
}

export default Navbar;

 
bg-white text-purple-800 px-6 py-2 rounded-lg hover:bg-purple-100 transition-all cursor-pointer
 
<nav className="bg-purple-800 text-white flex justify-between">
     <img src={logo} alt="hb" className="h-auto"/>
      <ul className="px-28 py-4 flex space-x-11 justify-end">
        <li>Find Suppliers</li>
        <li>Find Service Tags</li>
        <button>Login / signup</button>
      </ul>
     </nav>
 
className="w-2"
 
 flex justify-between
 
import React from "react";

function Navbar() {
  return (
     <nav className="bg-purple-800 text-white flex justify-between ">
     <img src="hb" alt="hb"/>
      <ul className="px-28 py-4 flex space-x-11 justify-end">
        <li>Find Suppliers</li>
        <li>Find Service Tags</li>
        <button>Login / signup</button>
      </ul>
     </nav>
  );
}

export default Navbar;

 
@tailwind base;
@tailwind components;
@tailwind utilities;


/* body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
} */

 
bg-slate-700
 
bg-slate-500
 
Home
 
About
 

        <li>Cate</li>
        <li>Contact</li>
 
plugins: [],
 
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

 
 <nav className="bg-white flex justify-between px-8 py-4">
        <ul className="py-28 py-4 flex space-x-11 justify-end">
          <li>Find Suppliers</li>
          <li>Find Service Tags</li>
        </ul>
      </nav>
 
items-center
 

    </div>
 

    <div>  
 
React App
 

        <button>Login / Signup</button>
 
<ul className="px-28 py-4 space-x-4 flex justify-end">
 
      <nav className="bg-white flex justify-between">
 
flex
 
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

 
flex
 
Hero
 

      hello
 
